
JSON_parser_via_UART.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005714  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000080  0800589c  0800589c  0001589c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800591c  0800591c  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  0800591c  0800591c  0001591c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005924  08005924  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005924  08005924  00015924  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005928  08005928  00015928  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  0800592c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000e20  20000010  08005938  00020010  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  20000e30  08005938  00020e30  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000df52  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002267  00000000  00000000  0002df8e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000a90  00000000  00000000  000301f8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000009a8  00000000  00000000  00030c88  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002578e  00000000  00000000  00031630  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000e2ea  00000000  00000000  00056dbe  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000e753f  00000000  00000000  000650a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0014c5e7  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002ab0  00000000  00000000  0014c638  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000010 	.word	0x20000010
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08005884 	.word	0x08005884

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000014 	.word	0x20000014
 80001c4:	08005884 	.word	0x08005884

080001c8 <strlen>:
 80001c8:	4603      	mov	r3, r0
 80001ca:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001ce:	2a00      	cmp	r2, #0
 80001d0:	d1fb      	bne.n	80001ca <strlen+0x2>
 80001d2:	1a18      	subs	r0, r3, r0
 80001d4:	3801      	subs	r0, #1
 80001d6:	4770      	bx	lr

080001d8 <__aeabi_drsub>:
 80001d8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001dc:	e002      	b.n	80001e4 <__adddf3>
 80001de:	bf00      	nop

080001e0 <__aeabi_dsub>:
 80001e0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001e4 <__adddf3>:
 80001e4:	b530      	push	{r4, r5, lr}
 80001e6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001ea:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001ee:	ea94 0f05 	teq	r4, r5
 80001f2:	bf08      	it	eq
 80001f4:	ea90 0f02 	teqeq	r0, r2
 80001f8:	bf1f      	itttt	ne
 80001fa:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001fe:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000202:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000206:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800020a:	f000 80e2 	beq.w	80003d2 <__adddf3+0x1ee>
 800020e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000212:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000216:	bfb8      	it	lt
 8000218:	426d      	neglt	r5, r5
 800021a:	dd0c      	ble.n	8000236 <__adddf3+0x52>
 800021c:	442c      	add	r4, r5
 800021e:	ea80 0202 	eor.w	r2, r0, r2
 8000222:	ea81 0303 	eor.w	r3, r1, r3
 8000226:	ea82 0000 	eor.w	r0, r2, r0
 800022a:	ea83 0101 	eor.w	r1, r3, r1
 800022e:	ea80 0202 	eor.w	r2, r0, r2
 8000232:	ea81 0303 	eor.w	r3, r1, r3
 8000236:	2d36      	cmp	r5, #54	; 0x36
 8000238:	bf88      	it	hi
 800023a:	bd30      	pophi	{r4, r5, pc}
 800023c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000240:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000244:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000248:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800024c:	d002      	beq.n	8000254 <__adddf3+0x70>
 800024e:	4240      	negs	r0, r0
 8000250:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000254:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000258:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800025c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000260:	d002      	beq.n	8000268 <__adddf3+0x84>
 8000262:	4252      	negs	r2, r2
 8000264:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000268:	ea94 0f05 	teq	r4, r5
 800026c:	f000 80a7 	beq.w	80003be <__adddf3+0x1da>
 8000270:	f1a4 0401 	sub.w	r4, r4, #1
 8000274:	f1d5 0e20 	rsbs	lr, r5, #32
 8000278:	db0d      	blt.n	8000296 <__adddf3+0xb2>
 800027a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800027e:	fa22 f205 	lsr.w	r2, r2, r5
 8000282:	1880      	adds	r0, r0, r2
 8000284:	f141 0100 	adc.w	r1, r1, #0
 8000288:	fa03 f20e 	lsl.w	r2, r3, lr
 800028c:	1880      	adds	r0, r0, r2
 800028e:	fa43 f305 	asr.w	r3, r3, r5
 8000292:	4159      	adcs	r1, r3
 8000294:	e00e      	b.n	80002b4 <__adddf3+0xd0>
 8000296:	f1a5 0520 	sub.w	r5, r5, #32
 800029a:	f10e 0e20 	add.w	lr, lr, #32
 800029e:	2a01      	cmp	r2, #1
 80002a0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002a4:	bf28      	it	cs
 80002a6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002aa:	fa43 f305 	asr.w	r3, r3, r5
 80002ae:	18c0      	adds	r0, r0, r3
 80002b0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002b4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002b8:	d507      	bpl.n	80002ca <__adddf3+0xe6>
 80002ba:	f04f 0e00 	mov.w	lr, #0
 80002be:	f1dc 0c00 	rsbs	ip, ip, #0
 80002c2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002c6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002ca:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002ce:	d31b      	bcc.n	8000308 <__adddf3+0x124>
 80002d0:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002d4:	d30c      	bcc.n	80002f0 <__adddf3+0x10c>
 80002d6:	0849      	lsrs	r1, r1, #1
 80002d8:	ea5f 0030 	movs.w	r0, r0, rrx
 80002dc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002e0:	f104 0401 	add.w	r4, r4, #1
 80002e4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002e8:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002ec:	f080 809a 	bcs.w	8000424 <__adddf3+0x240>
 80002f0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002f4:	bf08      	it	eq
 80002f6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002fa:	f150 0000 	adcs.w	r0, r0, #0
 80002fe:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000302:	ea41 0105 	orr.w	r1, r1, r5
 8000306:	bd30      	pop	{r4, r5, pc}
 8000308:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800030c:	4140      	adcs	r0, r0
 800030e:	eb41 0101 	adc.w	r1, r1, r1
 8000312:	3c01      	subs	r4, #1
 8000314:	bf28      	it	cs
 8000316:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800031a:	d2e9      	bcs.n	80002f0 <__adddf3+0x10c>
 800031c:	f091 0f00 	teq	r1, #0
 8000320:	bf04      	itt	eq
 8000322:	4601      	moveq	r1, r0
 8000324:	2000      	moveq	r0, #0
 8000326:	fab1 f381 	clz	r3, r1
 800032a:	bf08      	it	eq
 800032c:	3320      	addeq	r3, #32
 800032e:	f1a3 030b 	sub.w	r3, r3, #11
 8000332:	f1b3 0220 	subs.w	r2, r3, #32
 8000336:	da0c      	bge.n	8000352 <__adddf3+0x16e>
 8000338:	320c      	adds	r2, #12
 800033a:	dd08      	ble.n	800034e <__adddf3+0x16a>
 800033c:	f102 0c14 	add.w	ip, r2, #20
 8000340:	f1c2 020c 	rsb	r2, r2, #12
 8000344:	fa01 f00c 	lsl.w	r0, r1, ip
 8000348:	fa21 f102 	lsr.w	r1, r1, r2
 800034c:	e00c      	b.n	8000368 <__adddf3+0x184>
 800034e:	f102 0214 	add.w	r2, r2, #20
 8000352:	bfd8      	it	le
 8000354:	f1c2 0c20 	rsble	ip, r2, #32
 8000358:	fa01 f102 	lsl.w	r1, r1, r2
 800035c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000360:	bfdc      	itt	le
 8000362:	ea41 010c 	orrle.w	r1, r1, ip
 8000366:	4090      	lslle	r0, r2
 8000368:	1ae4      	subs	r4, r4, r3
 800036a:	bfa2      	ittt	ge
 800036c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000370:	4329      	orrge	r1, r5
 8000372:	bd30      	popge	{r4, r5, pc}
 8000374:	ea6f 0404 	mvn.w	r4, r4
 8000378:	3c1f      	subs	r4, #31
 800037a:	da1c      	bge.n	80003b6 <__adddf3+0x1d2>
 800037c:	340c      	adds	r4, #12
 800037e:	dc0e      	bgt.n	800039e <__adddf3+0x1ba>
 8000380:	f104 0414 	add.w	r4, r4, #20
 8000384:	f1c4 0220 	rsb	r2, r4, #32
 8000388:	fa20 f004 	lsr.w	r0, r0, r4
 800038c:	fa01 f302 	lsl.w	r3, r1, r2
 8000390:	ea40 0003 	orr.w	r0, r0, r3
 8000394:	fa21 f304 	lsr.w	r3, r1, r4
 8000398:	ea45 0103 	orr.w	r1, r5, r3
 800039c:	bd30      	pop	{r4, r5, pc}
 800039e:	f1c4 040c 	rsb	r4, r4, #12
 80003a2:	f1c4 0220 	rsb	r2, r4, #32
 80003a6:	fa20 f002 	lsr.w	r0, r0, r2
 80003aa:	fa01 f304 	lsl.w	r3, r1, r4
 80003ae:	ea40 0003 	orr.w	r0, r0, r3
 80003b2:	4629      	mov	r1, r5
 80003b4:	bd30      	pop	{r4, r5, pc}
 80003b6:	fa21 f004 	lsr.w	r0, r1, r4
 80003ba:	4629      	mov	r1, r5
 80003bc:	bd30      	pop	{r4, r5, pc}
 80003be:	f094 0f00 	teq	r4, #0
 80003c2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003c6:	bf06      	itte	eq
 80003c8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003cc:	3401      	addeq	r4, #1
 80003ce:	3d01      	subne	r5, #1
 80003d0:	e74e      	b.n	8000270 <__adddf3+0x8c>
 80003d2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003d6:	bf18      	it	ne
 80003d8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003dc:	d029      	beq.n	8000432 <__adddf3+0x24e>
 80003de:	ea94 0f05 	teq	r4, r5
 80003e2:	bf08      	it	eq
 80003e4:	ea90 0f02 	teqeq	r0, r2
 80003e8:	d005      	beq.n	80003f6 <__adddf3+0x212>
 80003ea:	ea54 0c00 	orrs.w	ip, r4, r0
 80003ee:	bf04      	itt	eq
 80003f0:	4619      	moveq	r1, r3
 80003f2:	4610      	moveq	r0, r2
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	ea91 0f03 	teq	r1, r3
 80003fa:	bf1e      	ittt	ne
 80003fc:	2100      	movne	r1, #0
 80003fe:	2000      	movne	r0, #0
 8000400:	bd30      	popne	{r4, r5, pc}
 8000402:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000406:	d105      	bne.n	8000414 <__adddf3+0x230>
 8000408:	0040      	lsls	r0, r0, #1
 800040a:	4149      	adcs	r1, r1
 800040c:	bf28      	it	cs
 800040e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000412:	bd30      	pop	{r4, r5, pc}
 8000414:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000418:	bf3c      	itt	cc
 800041a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800041e:	bd30      	popcc	{r4, r5, pc}
 8000420:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000424:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000428:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800042c:	f04f 0000 	mov.w	r0, #0
 8000430:	bd30      	pop	{r4, r5, pc}
 8000432:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000436:	bf1a      	itte	ne
 8000438:	4619      	movne	r1, r3
 800043a:	4610      	movne	r0, r2
 800043c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000440:	bf1c      	itt	ne
 8000442:	460b      	movne	r3, r1
 8000444:	4602      	movne	r2, r0
 8000446:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800044a:	bf06      	itte	eq
 800044c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000450:	ea91 0f03 	teqeq	r1, r3
 8000454:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000458:	bd30      	pop	{r4, r5, pc}
 800045a:	bf00      	nop

0800045c <__aeabi_ui2d>:
 800045c:	f090 0f00 	teq	r0, #0
 8000460:	bf04      	itt	eq
 8000462:	2100      	moveq	r1, #0
 8000464:	4770      	bxeq	lr
 8000466:	b530      	push	{r4, r5, lr}
 8000468:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800046c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000470:	f04f 0500 	mov.w	r5, #0
 8000474:	f04f 0100 	mov.w	r1, #0
 8000478:	e750      	b.n	800031c <__adddf3+0x138>
 800047a:	bf00      	nop

0800047c <__aeabi_i2d>:
 800047c:	f090 0f00 	teq	r0, #0
 8000480:	bf04      	itt	eq
 8000482:	2100      	moveq	r1, #0
 8000484:	4770      	bxeq	lr
 8000486:	b530      	push	{r4, r5, lr}
 8000488:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800048c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000490:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000494:	bf48      	it	mi
 8000496:	4240      	negmi	r0, r0
 8000498:	f04f 0100 	mov.w	r1, #0
 800049c:	e73e      	b.n	800031c <__adddf3+0x138>
 800049e:	bf00      	nop

080004a0 <__aeabi_f2d>:
 80004a0:	0042      	lsls	r2, r0, #1
 80004a2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004a6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004aa:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004ae:	bf1f      	itttt	ne
 80004b0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004b4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004b8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004bc:	4770      	bxne	lr
 80004be:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004c2:	bf08      	it	eq
 80004c4:	4770      	bxeq	lr
 80004c6:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004ca:	bf04      	itt	eq
 80004cc:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004d0:	4770      	bxeq	lr
 80004d2:	b530      	push	{r4, r5, lr}
 80004d4:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004e0:	e71c      	b.n	800031c <__adddf3+0x138>
 80004e2:	bf00      	nop

080004e4 <__aeabi_ul2d>:
 80004e4:	ea50 0201 	orrs.w	r2, r0, r1
 80004e8:	bf08      	it	eq
 80004ea:	4770      	bxeq	lr
 80004ec:	b530      	push	{r4, r5, lr}
 80004ee:	f04f 0500 	mov.w	r5, #0
 80004f2:	e00a      	b.n	800050a <__aeabi_l2d+0x16>

080004f4 <__aeabi_l2d>:
 80004f4:	ea50 0201 	orrs.w	r2, r0, r1
 80004f8:	bf08      	it	eq
 80004fa:	4770      	bxeq	lr
 80004fc:	b530      	push	{r4, r5, lr}
 80004fe:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000502:	d502      	bpl.n	800050a <__aeabi_l2d+0x16>
 8000504:	4240      	negs	r0, r0
 8000506:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800050a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800050e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000512:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000516:	f43f aed8 	beq.w	80002ca <__adddf3+0xe6>
 800051a:	f04f 0203 	mov.w	r2, #3
 800051e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000522:	bf18      	it	ne
 8000524:	3203      	addne	r2, #3
 8000526:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800052a:	bf18      	it	ne
 800052c:	3203      	addne	r2, #3
 800052e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000532:	f1c2 0320 	rsb	r3, r2, #32
 8000536:	fa00 fc03 	lsl.w	ip, r0, r3
 800053a:	fa20 f002 	lsr.w	r0, r0, r2
 800053e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000542:	ea40 000e 	orr.w	r0, r0, lr
 8000546:	fa21 f102 	lsr.w	r1, r1, r2
 800054a:	4414      	add	r4, r2
 800054c:	e6bd      	b.n	80002ca <__adddf3+0xe6>
 800054e:	bf00      	nop

08000550 <__aeabi_uldivmod>:
 8000550:	b953      	cbnz	r3, 8000568 <__aeabi_uldivmod+0x18>
 8000552:	b94a      	cbnz	r2, 8000568 <__aeabi_uldivmod+0x18>
 8000554:	2900      	cmp	r1, #0
 8000556:	bf08      	it	eq
 8000558:	2800      	cmpeq	r0, #0
 800055a:	bf1c      	itt	ne
 800055c:	f04f 31ff 	movne.w	r1, #4294967295
 8000560:	f04f 30ff 	movne.w	r0, #4294967295
 8000564:	f000 bad2 	b.w	8000b0c <__aeabi_idiv0>
 8000568:	f1ad 0c08 	sub.w	ip, sp, #8
 800056c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000570:	f000 f83a 	bl	80005e8 <__udivmoddi4>
 8000574:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000578:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800057c:	b004      	add	sp, #16
 800057e:	4770      	bx	lr

08000580 <__aeabi_f2lz>:
 8000580:	ee07 0a90 	vmov	s15, r0
 8000584:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8000588:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800058c:	d401      	bmi.n	8000592 <__aeabi_f2lz+0x12>
 800058e:	f000 b80b 	b.w	80005a8 <__aeabi_f2ulz>
 8000592:	eef1 7a67 	vneg.f32	s15, s15
 8000596:	b508      	push	{r3, lr}
 8000598:	ee17 0a90 	vmov	r0, s15
 800059c:	f000 f804 	bl	80005a8 <__aeabi_f2ulz>
 80005a0:	4240      	negs	r0, r0
 80005a2:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005a6:	bd08      	pop	{r3, pc}

080005a8 <__aeabi_f2ulz>:
 80005a8:	b5d0      	push	{r4, r6, r7, lr}
 80005aa:	f7ff ff79 	bl	80004a0 <__aeabi_f2d>
 80005ae:	4b0c      	ldr	r3, [pc, #48]	; (80005e0 <__aeabi_f2ulz+0x38>)
 80005b0:	2200      	movs	r2, #0
 80005b2:	4606      	mov	r6, r0
 80005b4:	460f      	mov	r7, r1
 80005b6:	f000 f97f 	bl	80008b8 <__aeabi_dmul>
 80005ba:	f000 faa9 	bl	8000b10 <__aeabi_d2uiz>
 80005be:	4604      	mov	r4, r0
 80005c0:	f7ff ff4c 	bl	800045c <__aeabi_ui2d>
 80005c4:	4b07      	ldr	r3, [pc, #28]	; (80005e4 <__aeabi_f2ulz+0x3c>)
 80005c6:	2200      	movs	r2, #0
 80005c8:	f000 f976 	bl	80008b8 <__aeabi_dmul>
 80005cc:	4602      	mov	r2, r0
 80005ce:	460b      	mov	r3, r1
 80005d0:	4630      	mov	r0, r6
 80005d2:	4639      	mov	r1, r7
 80005d4:	f7ff fe04 	bl	80001e0 <__aeabi_dsub>
 80005d8:	f000 fa9a 	bl	8000b10 <__aeabi_d2uiz>
 80005dc:	4621      	mov	r1, r4
 80005de:	bdd0      	pop	{r4, r6, r7, pc}
 80005e0:	3df00000 	.word	0x3df00000
 80005e4:	41f00000 	.word	0x41f00000

080005e8 <__udivmoddi4>:
 80005e8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80005ec:	9d08      	ldr	r5, [sp, #32]
 80005ee:	4604      	mov	r4, r0
 80005f0:	468e      	mov	lr, r1
 80005f2:	2b00      	cmp	r3, #0
 80005f4:	d14d      	bne.n	8000692 <__udivmoddi4+0xaa>
 80005f6:	428a      	cmp	r2, r1
 80005f8:	4694      	mov	ip, r2
 80005fa:	d969      	bls.n	80006d0 <__udivmoddi4+0xe8>
 80005fc:	fab2 f282 	clz	r2, r2
 8000600:	b152      	cbz	r2, 8000618 <__udivmoddi4+0x30>
 8000602:	fa01 f302 	lsl.w	r3, r1, r2
 8000606:	f1c2 0120 	rsb	r1, r2, #32
 800060a:	fa20 f101 	lsr.w	r1, r0, r1
 800060e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000612:	ea41 0e03 	orr.w	lr, r1, r3
 8000616:	4094      	lsls	r4, r2
 8000618:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800061c:	0c21      	lsrs	r1, r4, #16
 800061e:	fbbe f6f8 	udiv	r6, lr, r8
 8000622:	fa1f f78c 	uxth.w	r7, ip
 8000626:	fb08 e316 	mls	r3, r8, r6, lr
 800062a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800062e:	fb06 f107 	mul.w	r1, r6, r7
 8000632:	4299      	cmp	r1, r3
 8000634:	d90a      	bls.n	800064c <__udivmoddi4+0x64>
 8000636:	eb1c 0303 	adds.w	r3, ip, r3
 800063a:	f106 30ff 	add.w	r0, r6, #4294967295
 800063e:	f080 811f 	bcs.w	8000880 <__udivmoddi4+0x298>
 8000642:	4299      	cmp	r1, r3
 8000644:	f240 811c 	bls.w	8000880 <__udivmoddi4+0x298>
 8000648:	3e02      	subs	r6, #2
 800064a:	4463      	add	r3, ip
 800064c:	1a5b      	subs	r3, r3, r1
 800064e:	b2a4      	uxth	r4, r4
 8000650:	fbb3 f0f8 	udiv	r0, r3, r8
 8000654:	fb08 3310 	mls	r3, r8, r0, r3
 8000658:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800065c:	fb00 f707 	mul.w	r7, r0, r7
 8000660:	42a7      	cmp	r7, r4
 8000662:	d90a      	bls.n	800067a <__udivmoddi4+0x92>
 8000664:	eb1c 0404 	adds.w	r4, ip, r4
 8000668:	f100 33ff 	add.w	r3, r0, #4294967295
 800066c:	f080 810a 	bcs.w	8000884 <__udivmoddi4+0x29c>
 8000670:	42a7      	cmp	r7, r4
 8000672:	f240 8107 	bls.w	8000884 <__udivmoddi4+0x29c>
 8000676:	4464      	add	r4, ip
 8000678:	3802      	subs	r0, #2
 800067a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800067e:	1be4      	subs	r4, r4, r7
 8000680:	2600      	movs	r6, #0
 8000682:	b11d      	cbz	r5, 800068c <__udivmoddi4+0xa4>
 8000684:	40d4      	lsrs	r4, r2
 8000686:	2300      	movs	r3, #0
 8000688:	e9c5 4300 	strd	r4, r3, [r5]
 800068c:	4631      	mov	r1, r6
 800068e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000692:	428b      	cmp	r3, r1
 8000694:	d909      	bls.n	80006aa <__udivmoddi4+0xc2>
 8000696:	2d00      	cmp	r5, #0
 8000698:	f000 80ef 	beq.w	800087a <__udivmoddi4+0x292>
 800069c:	2600      	movs	r6, #0
 800069e:	e9c5 0100 	strd	r0, r1, [r5]
 80006a2:	4630      	mov	r0, r6
 80006a4:	4631      	mov	r1, r6
 80006a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80006aa:	fab3 f683 	clz	r6, r3
 80006ae:	2e00      	cmp	r6, #0
 80006b0:	d14a      	bne.n	8000748 <__udivmoddi4+0x160>
 80006b2:	428b      	cmp	r3, r1
 80006b4:	d302      	bcc.n	80006bc <__udivmoddi4+0xd4>
 80006b6:	4282      	cmp	r2, r0
 80006b8:	f200 80f9 	bhi.w	80008ae <__udivmoddi4+0x2c6>
 80006bc:	1a84      	subs	r4, r0, r2
 80006be:	eb61 0303 	sbc.w	r3, r1, r3
 80006c2:	2001      	movs	r0, #1
 80006c4:	469e      	mov	lr, r3
 80006c6:	2d00      	cmp	r5, #0
 80006c8:	d0e0      	beq.n	800068c <__udivmoddi4+0xa4>
 80006ca:	e9c5 4e00 	strd	r4, lr, [r5]
 80006ce:	e7dd      	b.n	800068c <__udivmoddi4+0xa4>
 80006d0:	b902      	cbnz	r2, 80006d4 <__udivmoddi4+0xec>
 80006d2:	deff      	udf	#255	; 0xff
 80006d4:	fab2 f282 	clz	r2, r2
 80006d8:	2a00      	cmp	r2, #0
 80006da:	f040 8092 	bne.w	8000802 <__udivmoddi4+0x21a>
 80006de:	eba1 010c 	sub.w	r1, r1, ip
 80006e2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80006e6:	fa1f fe8c 	uxth.w	lr, ip
 80006ea:	2601      	movs	r6, #1
 80006ec:	0c20      	lsrs	r0, r4, #16
 80006ee:	fbb1 f3f7 	udiv	r3, r1, r7
 80006f2:	fb07 1113 	mls	r1, r7, r3, r1
 80006f6:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80006fa:	fb0e f003 	mul.w	r0, lr, r3
 80006fe:	4288      	cmp	r0, r1
 8000700:	d908      	bls.n	8000714 <__udivmoddi4+0x12c>
 8000702:	eb1c 0101 	adds.w	r1, ip, r1
 8000706:	f103 38ff 	add.w	r8, r3, #4294967295
 800070a:	d202      	bcs.n	8000712 <__udivmoddi4+0x12a>
 800070c:	4288      	cmp	r0, r1
 800070e:	f200 80cb 	bhi.w	80008a8 <__udivmoddi4+0x2c0>
 8000712:	4643      	mov	r3, r8
 8000714:	1a09      	subs	r1, r1, r0
 8000716:	b2a4      	uxth	r4, r4
 8000718:	fbb1 f0f7 	udiv	r0, r1, r7
 800071c:	fb07 1110 	mls	r1, r7, r0, r1
 8000720:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000724:	fb0e fe00 	mul.w	lr, lr, r0
 8000728:	45a6      	cmp	lr, r4
 800072a:	d908      	bls.n	800073e <__udivmoddi4+0x156>
 800072c:	eb1c 0404 	adds.w	r4, ip, r4
 8000730:	f100 31ff 	add.w	r1, r0, #4294967295
 8000734:	d202      	bcs.n	800073c <__udivmoddi4+0x154>
 8000736:	45a6      	cmp	lr, r4
 8000738:	f200 80bb 	bhi.w	80008b2 <__udivmoddi4+0x2ca>
 800073c:	4608      	mov	r0, r1
 800073e:	eba4 040e 	sub.w	r4, r4, lr
 8000742:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000746:	e79c      	b.n	8000682 <__udivmoddi4+0x9a>
 8000748:	f1c6 0720 	rsb	r7, r6, #32
 800074c:	40b3      	lsls	r3, r6
 800074e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000752:	ea4c 0c03 	orr.w	ip, ip, r3
 8000756:	fa20 f407 	lsr.w	r4, r0, r7
 800075a:	fa01 f306 	lsl.w	r3, r1, r6
 800075e:	431c      	orrs	r4, r3
 8000760:	40f9      	lsrs	r1, r7
 8000762:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000766:	fa00 f306 	lsl.w	r3, r0, r6
 800076a:	fbb1 f8f9 	udiv	r8, r1, r9
 800076e:	0c20      	lsrs	r0, r4, #16
 8000770:	fa1f fe8c 	uxth.w	lr, ip
 8000774:	fb09 1118 	mls	r1, r9, r8, r1
 8000778:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800077c:	fb08 f00e 	mul.w	r0, r8, lr
 8000780:	4288      	cmp	r0, r1
 8000782:	fa02 f206 	lsl.w	r2, r2, r6
 8000786:	d90b      	bls.n	80007a0 <__udivmoddi4+0x1b8>
 8000788:	eb1c 0101 	adds.w	r1, ip, r1
 800078c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000790:	f080 8088 	bcs.w	80008a4 <__udivmoddi4+0x2bc>
 8000794:	4288      	cmp	r0, r1
 8000796:	f240 8085 	bls.w	80008a4 <__udivmoddi4+0x2bc>
 800079a:	f1a8 0802 	sub.w	r8, r8, #2
 800079e:	4461      	add	r1, ip
 80007a0:	1a09      	subs	r1, r1, r0
 80007a2:	b2a4      	uxth	r4, r4
 80007a4:	fbb1 f0f9 	udiv	r0, r1, r9
 80007a8:	fb09 1110 	mls	r1, r9, r0, r1
 80007ac:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80007b0:	fb00 fe0e 	mul.w	lr, r0, lr
 80007b4:	458e      	cmp	lr, r1
 80007b6:	d908      	bls.n	80007ca <__udivmoddi4+0x1e2>
 80007b8:	eb1c 0101 	adds.w	r1, ip, r1
 80007bc:	f100 34ff 	add.w	r4, r0, #4294967295
 80007c0:	d26c      	bcs.n	800089c <__udivmoddi4+0x2b4>
 80007c2:	458e      	cmp	lr, r1
 80007c4:	d96a      	bls.n	800089c <__udivmoddi4+0x2b4>
 80007c6:	3802      	subs	r0, #2
 80007c8:	4461      	add	r1, ip
 80007ca:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80007ce:	fba0 9402 	umull	r9, r4, r0, r2
 80007d2:	eba1 010e 	sub.w	r1, r1, lr
 80007d6:	42a1      	cmp	r1, r4
 80007d8:	46c8      	mov	r8, r9
 80007da:	46a6      	mov	lr, r4
 80007dc:	d356      	bcc.n	800088c <__udivmoddi4+0x2a4>
 80007de:	d053      	beq.n	8000888 <__udivmoddi4+0x2a0>
 80007e0:	b15d      	cbz	r5, 80007fa <__udivmoddi4+0x212>
 80007e2:	ebb3 0208 	subs.w	r2, r3, r8
 80007e6:	eb61 010e 	sbc.w	r1, r1, lr
 80007ea:	fa01 f707 	lsl.w	r7, r1, r7
 80007ee:	fa22 f306 	lsr.w	r3, r2, r6
 80007f2:	40f1      	lsrs	r1, r6
 80007f4:	431f      	orrs	r7, r3
 80007f6:	e9c5 7100 	strd	r7, r1, [r5]
 80007fa:	2600      	movs	r6, #0
 80007fc:	4631      	mov	r1, r6
 80007fe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000802:	f1c2 0320 	rsb	r3, r2, #32
 8000806:	40d8      	lsrs	r0, r3
 8000808:	fa0c fc02 	lsl.w	ip, ip, r2
 800080c:	fa21 f303 	lsr.w	r3, r1, r3
 8000810:	4091      	lsls	r1, r2
 8000812:	4301      	orrs	r1, r0
 8000814:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000818:	fa1f fe8c 	uxth.w	lr, ip
 800081c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000820:	fb07 3610 	mls	r6, r7, r0, r3
 8000824:	0c0b      	lsrs	r3, r1, #16
 8000826:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 800082a:	fb00 f60e 	mul.w	r6, r0, lr
 800082e:	429e      	cmp	r6, r3
 8000830:	fa04 f402 	lsl.w	r4, r4, r2
 8000834:	d908      	bls.n	8000848 <__udivmoddi4+0x260>
 8000836:	eb1c 0303 	adds.w	r3, ip, r3
 800083a:	f100 38ff 	add.w	r8, r0, #4294967295
 800083e:	d22f      	bcs.n	80008a0 <__udivmoddi4+0x2b8>
 8000840:	429e      	cmp	r6, r3
 8000842:	d92d      	bls.n	80008a0 <__udivmoddi4+0x2b8>
 8000844:	3802      	subs	r0, #2
 8000846:	4463      	add	r3, ip
 8000848:	1b9b      	subs	r3, r3, r6
 800084a:	b289      	uxth	r1, r1
 800084c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000850:	fb07 3316 	mls	r3, r7, r6, r3
 8000854:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000858:	fb06 f30e 	mul.w	r3, r6, lr
 800085c:	428b      	cmp	r3, r1
 800085e:	d908      	bls.n	8000872 <__udivmoddi4+0x28a>
 8000860:	eb1c 0101 	adds.w	r1, ip, r1
 8000864:	f106 38ff 	add.w	r8, r6, #4294967295
 8000868:	d216      	bcs.n	8000898 <__udivmoddi4+0x2b0>
 800086a:	428b      	cmp	r3, r1
 800086c:	d914      	bls.n	8000898 <__udivmoddi4+0x2b0>
 800086e:	3e02      	subs	r6, #2
 8000870:	4461      	add	r1, ip
 8000872:	1ac9      	subs	r1, r1, r3
 8000874:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000878:	e738      	b.n	80006ec <__udivmoddi4+0x104>
 800087a:	462e      	mov	r6, r5
 800087c:	4628      	mov	r0, r5
 800087e:	e705      	b.n	800068c <__udivmoddi4+0xa4>
 8000880:	4606      	mov	r6, r0
 8000882:	e6e3      	b.n	800064c <__udivmoddi4+0x64>
 8000884:	4618      	mov	r0, r3
 8000886:	e6f8      	b.n	800067a <__udivmoddi4+0x92>
 8000888:	454b      	cmp	r3, r9
 800088a:	d2a9      	bcs.n	80007e0 <__udivmoddi4+0x1f8>
 800088c:	ebb9 0802 	subs.w	r8, r9, r2
 8000890:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000894:	3801      	subs	r0, #1
 8000896:	e7a3      	b.n	80007e0 <__udivmoddi4+0x1f8>
 8000898:	4646      	mov	r6, r8
 800089a:	e7ea      	b.n	8000872 <__udivmoddi4+0x28a>
 800089c:	4620      	mov	r0, r4
 800089e:	e794      	b.n	80007ca <__udivmoddi4+0x1e2>
 80008a0:	4640      	mov	r0, r8
 80008a2:	e7d1      	b.n	8000848 <__udivmoddi4+0x260>
 80008a4:	46d0      	mov	r8, sl
 80008a6:	e77b      	b.n	80007a0 <__udivmoddi4+0x1b8>
 80008a8:	3b02      	subs	r3, #2
 80008aa:	4461      	add	r1, ip
 80008ac:	e732      	b.n	8000714 <__udivmoddi4+0x12c>
 80008ae:	4630      	mov	r0, r6
 80008b0:	e709      	b.n	80006c6 <__udivmoddi4+0xde>
 80008b2:	4464      	add	r4, ip
 80008b4:	3802      	subs	r0, #2
 80008b6:	e742      	b.n	800073e <__udivmoddi4+0x156>

080008b8 <__aeabi_dmul>:
 80008b8:	b570      	push	{r4, r5, r6, lr}
 80008ba:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80008be:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80008c2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80008c6:	bf1d      	ittte	ne
 80008c8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008cc:	ea94 0f0c 	teqne	r4, ip
 80008d0:	ea95 0f0c 	teqne	r5, ip
 80008d4:	f000 f8de 	bleq	8000a94 <__aeabi_dmul+0x1dc>
 80008d8:	442c      	add	r4, r5
 80008da:	ea81 0603 	eor.w	r6, r1, r3
 80008de:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80008e2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80008e6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80008ea:	bf18      	it	ne
 80008ec:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80008f0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80008f4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80008f8:	d038      	beq.n	800096c <__aeabi_dmul+0xb4>
 80008fa:	fba0 ce02 	umull	ip, lr, r0, r2
 80008fe:	f04f 0500 	mov.w	r5, #0
 8000902:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000906:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800090a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800090e:	f04f 0600 	mov.w	r6, #0
 8000912:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000916:	f09c 0f00 	teq	ip, #0
 800091a:	bf18      	it	ne
 800091c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000920:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000924:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000928:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800092c:	d204      	bcs.n	8000938 <__aeabi_dmul+0x80>
 800092e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000932:	416d      	adcs	r5, r5
 8000934:	eb46 0606 	adc.w	r6, r6, r6
 8000938:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800093c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000940:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000944:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000948:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800094c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000950:	bf88      	it	hi
 8000952:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000956:	d81e      	bhi.n	8000996 <__aeabi_dmul+0xde>
 8000958:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800095c:	bf08      	it	eq
 800095e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000962:	f150 0000 	adcs.w	r0, r0, #0
 8000966:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800096a:	bd70      	pop	{r4, r5, r6, pc}
 800096c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000970:	ea46 0101 	orr.w	r1, r6, r1
 8000974:	ea40 0002 	orr.w	r0, r0, r2
 8000978:	ea81 0103 	eor.w	r1, r1, r3
 800097c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000980:	bfc2      	ittt	gt
 8000982:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000986:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800098a:	bd70      	popgt	{r4, r5, r6, pc}
 800098c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000990:	f04f 0e00 	mov.w	lr, #0
 8000994:	3c01      	subs	r4, #1
 8000996:	f300 80ab 	bgt.w	8000af0 <__aeabi_dmul+0x238>
 800099a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800099e:	bfde      	ittt	le
 80009a0:	2000      	movle	r0, #0
 80009a2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80009a6:	bd70      	pople	{r4, r5, r6, pc}
 80009a8:	f1c4 0400 	rsb	r4, r4, #0
 80009ac:	3c20      	subs	r4, #32
 80009ae:	da35      	bge.n	8000a1c <__aeabi_dmul+0x164>
 80009b0:	340c      	adds	r4, #12
 80009b2:	dc1b      	bgt.n	80009ec <__aeabi_dmul+0x134>
 80009b4:	f104 0414 	add.w	r4, r4, #20
 80009b8:	f1c4 0520 	rsb	r5, r4, #32
 80009bc:	fa00 f305 	lsl.w	r3, r0, r5
 80009c0:	fa20 f004 	lsr.w	r0, r0, r4
 80009c4:	fa01 f205 	lsl.w	r2, r1, r5
 80009c8:	ea40 0002 	orr.w	r0, r0, r2
 80009cc:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80009d0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80009d4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80009d8:	fa21 f604 	lsr.w	r6, r1, r4
 80009dc:	eb42 0106 	adc.w	r1, r2, r6
 80009e0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80009e4:	bf08      	it	eq
 80009e6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80009ea:	bd70      	pop	{r4, r5, r6, pc}
 80009ec:	f1c4 040c 	rsb	r4, r4, #12
 80009f0:	f1c4 0520 	rsb	r5, r4, #32
 80009f4:	fa00 f304 	lsl.w	r3, r0, r4
 80009f8:	fa20 f005 	lsr.w	r0, r0, r5
 80009fc:	fa01 f204 	lsl.w	r2, r1, r4
 8000a00:	ea40 0002 	orr.w	r0, r0, r2
 8000a04:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000a08:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000a0c:	f141 0100 	adc.w	r1, r1, #0
 8000a10:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000a14:	bf08      	it	eq
 8000a16:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000a1a:	bd70      	pop	{r4, r5, r6, pc}
 8000a1c:	f1c4 0520 	rsb	r5, r4, #32
 8000a20:	fa00 f205 	lsl.w	r2, r0, r5
 8000a24:	ea4e 0e02 	orr.w	lr, lr, r2
 8000a28:	fa20 f304 	lsr.w	r3, r0, r4
 8000a2c:	fa01 f205 	lsl.w	r2, r1, r5
 8000a30:	ea43 0302 	orr.w	r3, r3, r2
 8000a34:	fa21 f004 	lsr.w	r0, r1, r4
 8000a38:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000a3c:	fa21 f204 	lsr.w	r2, r1, r4
 8000a40:	ea20 0002 	bic.w	r0, r0, r2
 8000a44:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000a48:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000a4c:	bf08      	it	eq
 8000a4e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000a52:	bd70      	pop	{r4, r5, r6, pc}
 8000a54:	f094 0f00 	teq	r4, #0
 8000a58:	d10f      	bne.n	8000a7a <__aeabi_dmul+0x1c2>
 8000a5a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000a5e:	0040      	lsls	r0, r0, #1
 8000a60:	eb41 0101 	adc.w	r1, r1, r1
 8000a64:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000a68:	bf08      	it	eq
 8000a6a:	3c01      	subeq	r4, #1
 8000a6c:	d0f7      	beq.n	8000a5e <__aeabi_dmul+0x1a6>
 8000a6e:	ea41 0106 	orr.w	r1, r1, r6
 8000a72:	f095 0f00 	teq	r5, #0
 8000a76:	bf18      	it	ne
 8000a78:	4770      	bxne	lr
 8000a7a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000a7e:	0052      	lsls	r2, r2, #1
 8000a80:	eb43 0303 	adc.w	r3, r3, r3
 8000a84:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000a88:	bf08      	it	eq
 8000a8a:	3d01      	subeq	r5, #1
 8000a8c:	d0f7      	beq.n	8000a7e <__aeabi_dmul+0x1c6>
 8000a8e:	ea43 0306 	orr.w	r3, r3, r6
 8000a92:	4770      	bx	lr
 8000a94:	ea94 0f0c 	teq	r4, ip
 8000a98:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000a9c:	bf18      	it	ne
 8000a9e:	ea95 0f0c 	teqne	r5, ip
 8000aa2:	d00c      	beq.n	8000abe <__aeabi_dmul+0x206>
 8000aa4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000aa8:	bf18      	it	ne
 8000aaa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000aae:	d1d1      	bne.n	8000a54 <__aeabi_dmul+0x19c>
 8000ab0:	ea81 0103 	eor.w	r1, r1, r3
 8000ab4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000ab8:	f04f 0000 	mov.w	r0, #0
 8000abc:	bd70      	pop	{r4, r5, r6, pc}
 8000abe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000ac2:	bf06      	itte	eq
 8000ac4:	4610      	moveq	r0, r2
 8000ac6:	4619      	moveq	r1, r3
 8000ac8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000acc:	d019      	beq.n	8000b02 <__aeabi_dmul+0x24a>
 8000ace:	ea94 0f0c 	teq	r4, ip
 8000ad2:	d102      	bne.n	8000ada <__aeabi_dmul+0x222>
 8000ad4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000ad8:	d113      	bne.n	8000b02 <__aeabi_dmul+0x24a>
 8000ada:	ea95 0f0c 	teq	r5, ip
 8000ade:	d105      	bne.n	8000aec <__aeabi_dmul+0x234>
 8000ae0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000ae4:	bf1c      	itt	ne
 8000ae6:	4610      	movne	r0, r2
 8000ae8:	4619      	movne	r1, r3
 8000aea:	d10a      	bne.n	8000b02 <__aeabi_dmul+0x24a>
 8000aec:	ea81 0103 	eor.w	r1, r1, r3
 8000af0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000af4:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000af8:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000afc:	f04f 0000 	mov.w	r0, #0
 8000b00:	bd70      	pop	{r4, r5, r6, pc}
 8000b02:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000b06:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8000b0a:	bd70      	pop	{r4, r5, r6, pc}

08000b0c <__aeabi_idiv0>:
 8000b0c:	4770      	bx	lr
 8000b0e:	bf00      	nop

08000b10 <__aeabi_d2uiz>:
 8000b10:	004a      	lsls	r2, r1, #1
 8000b12:	d211      	bcs.n	8000b38 <__aeabi_d2uiz+0x28>
 8000b14:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b18:	d211      	bcs.n	8000b3e <__aeabi_d2uiz+0x2e>
 8000b1a:	d50d      	bpl.n	8000b38 <__aeabi_d2uiz+0x28>
 8000b1c:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b20:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b24:	d40e      	bmi.n	8000b44 <__aeabi_d2uiz+0x34>
 8000b26:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b2a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b2e:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b32:	fa23 f002 	lsr.w	r0, r3, r2
 8000b36:	4770      	bx	lr
 8000b38:	f04f 0000 	mov.w	r0, #0
 8000b3c:	4770      	bx	lr
 8000b3e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b42:	d102      	bne.n	8000b4a <__aeabi_d2uiz+0x3a>
 8000b44:	f04f 30ff 	mov.w	r0, #4294967295
 8000b48:	4770      	bx	lr
 8000b4a:	f04f 0000 	mov.w	r0, #0
 8000b4e:	4770      	bx	lr

08000b50 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8000b50:	b580      	push	{r7, lr}
 8000b52:	b082      	sub	sp, #8
 8000b54:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000b56:	4b0c      	ldr	r3, [pc, #48]	; (8000b88 <MX_DMA_Init+0x38>)
 8000b58:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000b5a:	4a0b      	ldr	r2, [pc, #44]	; (8000b88 <MX_DMA_Init+0x38>)
 8000b5c:	f043 0301 	orr.w	r3, r3, #1
 8000b60:	6493      	str	r3, [r2, #72]	; 0x48
 8000b62:	4b09      	ldr	r3, [pc, #36]	; (8000b88 <MX_DMA_Init+0x38>)
 8000b64:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000b66:	f003 0301 	and.w	r3, r3, #1
 8000b6a:	607b      	str	r3, [r7, #4]
 8000b6c:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel6_IRQn, 0, 0);
 8000b6e:	2200      	movs	r2, #0
 8000b70:	2100      	movs	r1, #0
 8000b72:	2010      	movs	r0, #16
 8000b74:	f001 fc13 	bl	800239e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel6_IRQn);
 8000b78:	2010      	movs	r0, #16
 8000b7a:	f001 fc2c 	bl	80023d6 <HAL_NVIC_EnableIRQ>

}
 8000b7e:	bf00      	nop
 8000b80:	3708      	adds	r7, #8
 8000b82:	46bd      	mov	sp, r7
 8000b84:	bd80      	pop	{r7, pc}
 8000b86:	bf00      	nop
 8000b88:	40021000 	.word	0x40021000

08000b8c <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000b8c:	b580      	push	{r7, lr}
 8000b8e:	b08a      	sub	sp, #40	; 0x28
 8000b90:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b92:	f107 0314 	add.w	r3, r7, #20
 8000b96:	2200      	movs	r2, #0
 8000b98:	601a      	str	r2, [r3, #0]
 8000b9a:	605a      	str	r2, [r3, #4]
 8000b9c:	609a      	str	r2, [r3, #8]
 8000b9e:	60da      	str	r2, [r3, #12]
 8000ba0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000ba2:	4b3a      	ldr	r3, [pc, #232]	; (8000c8c <MX_GPIO_Init+0x100>)
 8000ba4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ba6:	4a39      	ldr	r2, [pc, #228]	; (8000c8c <MX_GPIO_Init+0x100>)
 8000ba8:	f043 0304 	orr.w	r3, r3, #4
 8000bac:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000bae:	4b37      	ldr	r3, [pc, #220]	; (8000c8c <MX_GPIO_Init+0x100>)
 8000bb0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000bb2:	f003 0304 	and.w	r3, r3, #4
 8000bb6:	613b      	str	r3, [r7, #16]
 8000bb8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000bba:	4b34      	ldr	r3, [pc, #208]	; (8000c8c <MX_GPIO_Init+0x100>)
 8000bbc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000bbe:	4a33      	ldr	r2, [pc, #204]	; (8000c8c <MX_GPIO_Init+0x100>)
 8000bc0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000bc4:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000bc6:	4b31      	ldr	r3, [pc, #196]	; (8000c8c <MX_GPIO_Init+0x100>)
 8000bc8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000bca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000bce:	60fb      	str	r3, [r7, #12]
 8000bd0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000bd2:	4b2e      	ldr	r3, [pc, #184]	; (8000c8c <MX_GPIO_Init+0x100>)
 8000bd4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000bd6:	4a2d      	ldr	r2, [pc, #180]	; (8000c8c <MX_GPIO_Init+0x100>)
 8000bd8:	f043 0301 	orr.w	r3, r3, #1
 8000bdc:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000bde:	4b2b      	ldr	r3, [pc, #172]	; (8000c8c <MX_GPIO_Init+0x100>)
 8000be0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000be2:	f003 0301 	and.w	r3, r3, #1
 8000be6:	60bb      	str	r3, [r7, #8]
 8000be8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000bea:	4b28      	ldr	r3, [pc, #160]	; (8000c8c <MX_GPIO_Init+0x100>)
 8000bec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000bee:	4a27      	ldr	r2, [pc, #156]	; (8000c8c <MX_GPIO_Init+0x100>)
 8000bf0:	f043 0302 	orr.w	r3, r3, #2
 8000bf4:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000bf6:	4b25      	ldr	r3, [pc, #148]	; (8000c8c <MX_GPIO_Init+0x100>)
 8000bf8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000bfa:	f003 0302 	and.w	r3, r3, #2
 8000bfe:	607b      	str	r3, [r7, #4]
 8000c00:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000c02:	2200      	movs	r2, #0
 8000c04:	2120      	movs	r1, #32
 8000c06:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000c0a:	f002 f81f 	bl	8002c4c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, LED3_Pin|LED2_Pin|LED1_Pin, GPIO_PIN_RESET);
 8000c0e:	2200      	movs	r2, #0
 8000c10:	f44f 71b0 	mov.w	r1, #352	; 0x160
 8000c14:	481e      	ldr	r0, [pc, #120]	; (8000c90 <MX_GPIO_Init+0x104>)
 8000c16:	f002 f819 	bl	8002c4c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000c1a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000c1e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000c20:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8000c24:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c26:	2300      	movs	r3, #0
 8000c28:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000c2a:	f107 0314 	add.w	r3, r7, #20
 8000c2e:	4619      	mov	r1, r3
 8000c30:	4817      	ldr	r0, [pc, #92]	; (8000c90 <MX_GPIO_Init+0x104>)
 8000c32:	f001 fe61 	bl	80028f8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000c36:	2320      	movs	r3, #32
 8000c38:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c3a:	2301      	movs	r3, #1
 8000c3c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c3e:	2300      	movs	r3, #0
 8000c40:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c42:	2300      	movs	r3, #0
 8000c44:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000c46:	f107 0314 	add.w	r3, r7, #20
 8000c4a:	4619      	mov	r1, r3
 8000c4c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000c50:	f001 fe52 	bl	80028f8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = LED3_Pin|LED2_Pin|LED1_Pin;
 8000c54:	f44f 73b0 	mov.w	r3, #352	; 0x160
 8000c58:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c5a:	2301      	movs	r3, #1
 8000c5c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c5e:	2300      	movs	r3, #0
 8000c60:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c62:	2300      	movs	r3, #0
 8000c64:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000c66:	f107 0314 	add.w	r3, r7, #20
 8000c6a:	4619      	mov	r1, r3
 8000c6c:	4808      	ldr	r0, [pc, #32]	; (8000c90 <MX_GPIO_Init+0x104>)
 8000c6e:	f001 fe43 	bl	80028f8 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 1, 0);
 8000c72:	2200      	movs	r2, #0
 8000c74:	2101      	movs	r1, #1
 8000c76:	2028      	movs	r0, #40	; 0x28
 8000c78:	f001 fb91 	bl	800239e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000c7c:	2028      	movs	r0, #40	; 0x28
 8000c7e:	f001 fbaa 	bl	80023d6 <HAL_NVIC_EnableIRQ>

}
 8000c82:	bf00      	nop
 8000c84:	3728      	adds	r7, #40	; 0x28
 8000c86:	46bd      	mov	sp, r7
 8000c88:	bd80      	pop	{r7, pc}
 8000c8a:	bf00      	nop
 8000c8c:	40021000 	.word	0x40021000
 8000c90:	48000800 	.word	0x48000800

08000c94 <lwjson_get_val_string>:
 * \param[out]      str_len: Pointer to variable holding length of string.
 *                      Set to `NULL` if not used
 * \return          Pointer to string or `NULL` if invalid token type
 */
static inline const char*
lwjson_get_val_string(const lwjson_token_t* token, size_t* str_len) {
 8000c94:	b480      	push	{r7}
 8000c96:	b083      	sub	sp, #12
 8000c98:	af00      	add	r7, sp, #0
 8000c9a:	6078      	str	r0, [r7, #4]
 8000c9c:	6039      	str	r1, [r7, #0]
    if (token != NULL && token->type == LWJSON_TYPE_STRING) {
 8000c9e:	687b      	ldr	r3, [r7, #4]
 8000ca0:	2b00      	cmp	r3, #0
 8000ca2:	d00d      	beq.n	8000cc0 <lwjson_get_val_string+0x2c>
 8000ca4:	687b      	ldr	r3, [r7, #4]
 8000ca6:	791b      	ldrb	r3, [r3, #4]
 8000ca8:	2b00      	cmp	r3, #0
 8000caa:	d109      	bne.n	8000cc0 <lwjson_get_val_string+0x2c>
        if (str_len != NULL) {
 8000cac:	683b      	ldr	r3, [r7, #0]
 8000cae:	2b00      	cmp	r3, #0
 8000cb0:	d003      	beq.n	8000cba <lwjson_get_val_string+0x26>
            *str_len = token->u.str.token_value_len;
 8000cb2:	687b      	ldr	r3, [r7, #4]
 8000cb4:	695a      	ldr	r2, [r3, #20]
 8000cb6:	683b      	ldr	r3, [r7, #0]
 8000cb8:	601a      	str	r2, [r3, #0]
        }
        return token->u.str.token_value;
 8000cba:	687b      	ldr	r3, [r7, #4]
 8000cbc:	691b      	ldr	r3, [r3, #16]
 8000cbe:	e000      	b.n	8000cc2 <lwjson_get_val_string+0x2e>
    }
    return NULL;
 8000cc0:	2300      	movs	r3, #0
}
 8000cc2:	4618      	mov	r0, r3
 8000cc4:	370c      	adds	r7, #12
 8000cc6:	46bd      	mov	sp, r7
 8000cc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ccc:	4770      	bx	lr
	...

08000cd0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000cd0:	b580      	push	{r7, lr}
 8000cd2:	b084      	sub	sp, #16
 8000cd4:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000cd6:	f001 fa0b 	bl	80020f0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000cda:	f000 f8bf 	bl	8000e5c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000cde:	f7ff ff55 	bl	8000b8c <MX_GPIO_Init>
  MX_DMA_Init();
 8000ce2:	f7ff ff35 	bl	8000b50 <MX_DMA_Init>
  MX_USART2_UART_Init();
 8000ce6:	f000 f9b1 	bl	800104c <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  static lwjson_token_t tokens[128];
  static lwjson_t lwjson;

  char *str;
  size_t len = 0;
 8000cea:	2300      	movs	r3, #0
 8000cec:	607b      	str	r3, [r7, #4]

  lwjson_init(&lwjson, tokens, LWJSON_ARRAYSIZE(tokens));
 8000cee:	2280      	movs	r2, #128	; 0x80
 8000cf0:	494f      	ldr	r1, [pc, #316]	; (8000e30 <main+0x160>)
 8000cf2:	4850      	ldr	r0, [pc, #320]	; (8000e34 <main+0x164>)
 8000cf4:	f000 ff27 	bl	8001b46 <lwjson_init>

  HAL_UARTEx_ReceiveToIdle_DMA(&huart2, rx_buffer, 256);
 8000cf8:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000cfc:	494e      	ldr	r1, [pc, #312]	; (8000e38 <main+0x168>)
 8000cfe:	484f      	ldr	r0, [pc, #316]	; (8000e3c <main+0x16c>)
 8000d00:	f004 fd25 	bl	800574e <HAL_UARTEx_ReceiveToIdle_DMA>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  if (data_received == true)
 8000d04:	4b4e      	ldr	r3, [pc, #312]	; (8000e40 <main+0x170>)
 8000d06:	781b      	ldrb	r3, [r3, #0]
 8000d08:	2b00      	cmp	r3, #0
 8000d0a:	d0fb      	beq.n	8000d04 <main+0x34>
	  {
		  data_received = false;
 8000d0c:	4b4c      	ldr	r3, [pc, #304]	; (8000e40 <main+0x170>)
 8000d0e:	2200      	movs	r2, #0
 8000d10:	701a      	strb	r2, [r3, #0]

		  /* {"LED1":"ON","LED2":"ON","LED3":"ON"} */
		  /* {"LED1":"OFF","LED2":"OFF","LED3":"OFF"} */

		  if (lwjson_parse(&lwjson, (char*)rx_buffer) == lwjsonOK)
 8000d12:	4949      	ldr	r1, [pc, #292]	; (8000e38 <main+0x168>)
 8000d14:	4847      	ldr	r0, [pc, #284]	; (8000e34 <main+0x164>)
 8000d16:	f001 f997 	bl	8002048 <lwjson_parse>
 8000d1a:	4603      	mov	r3, r0
 8000d1c:	2b00      	cmp	r3, #0
 8000d1e:	d1f1      	bne.n	8000d04 <main+0x34>
		  {
			  const lwjson_token_t* t;

			  if ((t = lwjson_find(&lwjson, "LED1")) != NULL)
 8000d20:	4948      	ldr	r1, [pc, #288]	; (8000e44 <main+0x174>)
 8000d22:	4844      	ldr	r0, [pc, #272]	; (8000e34 <main+0x164>)
 8000d24:	f001 f9bf 	bl	80020a6 <lwjson_find>
 8000d28:	60f8      	str	r0, [r7, #12]
 8000d2a:	68fb      	ldr	r3, [r7, #12]
 8000d2c:	2b00      	cmp	r3, #0
 8000d2e:	d024      	beq.n	8000d7a <main+0xaa>
			  {
				  str = (char *)lwjson_get_val_string(t, &len);
 8000d30:	1d3b      	adds	r3, r7, #4
 8000d32:	4619      	mov	r1, r3
 8000d34:	68f8      	ldr	r0, [r7, #12]
 8000d36:	f7ff ffad 	bl	8000c94 <lwjson_get_val_string>
 8000d3a:	60b8      	str	r0, [r7, #8]

				  if (strncmp(str, "ON", len) == 0)
 8000d3c:	687b      	ldr	r3, [r7, #4]
 8000d3e:	461a      	mov	r2, r3
 8000d40:	4941      	ldr	r1, [pc, #260]	; (8000e48 <main+0x178>)
 8000d42:	68b8      	ldr	r0, [r7, #8]
 8000d44:	f004 fd8a 	bl	800585c <strncmp>
 8000d48:	4603      	mov	r3, r0
 8000d4a:	2b00      	cmp	r3, #0
 8000d4c:	d106      	bne.n	8000d5c <main+0x8c>
				  {
					  HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_SET);
 8000d4e:	2201      	movs	r2, #1
 8000d50:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000d54:	483d      	ldr	r0, [pc, #244]	; (8000e4c <main+0x17c>)
 8000d56:	f001 ff79 	bl	8002c4c <HAL_GPIO_WritePin>
 8000d5a:	e00e      	b.n	8000d7a <main+0xaa>
				  }
				  else if (strncmp(str, "OFF", len) == 0)
 8000d5c:	687b      	ldr	r3, [r7, #4]
 8000d5e:	461a      	mov	r2, r3
 8000d60:	493b      	ldr	r1, [pc, #236]	; (8000e50 <main+0x180>)
 8000d62:	68b8      	ldr	r0, [r7, #8]
 8000d64:	f004 fd7a 	bl	800585c <strncmp>
 8000d68:	4603      	mov	r3, r0
 8000d6a:	2b00      	cmp	r3, #0
 8000d6c:	d105      	bne.n	8000d7a <main+0xaa>
				  {
					  HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_RESET);
 8000d6e:	2200      	movs	r2, #0
 8000d70:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000d74:	4835      	ldr	r0, [pc, #212]	; (8000e4c <main+0x17c>)
 8000d76:	f001 ff69 	bl	8002c4c <HAL_GPIO_WritePin>
				  }
			  }

			  if ((t = lwjson_find(&lwjson, "LED2")) != NULL)
 8000d7a:	4936      	ldr	r1, [pc, #216]	; (8000e54 <main+0x184>)
 8000d7c:	482d      	ldr	r0, [pc, #180]	; (8000e34 <main+0x164>)
 8000d7e:	f001 f992 	bl	80020a6 <lwjson_find>
 8000d82:	60f8      	str	r0, [r7, #12]
 8000d84:	68fb      	ldr	r3, [r7, #12]
 8000d86:	2b00      	cmp	r3, #0
 8000d88:	d022      	beq.n	8000dd0 <main+0x100>
			  {
				  str = (char *)lwjson_get_val_string(t, &len);
 8000d8a:	1d3b      	adds	r3, r7, #4
 8000d8c:	4619      	mov	r1, r3
 8000d8e:	68f8      	ldr	r0, [r7, #12]
 8000d90:	f7ff ff80 	bl	8000c94 <lwjson_get_val_string>
 8000d94:	60b8      	str	r0, [r7, #8]

				  if (strncmp(str, "ON", len) == 0)
 8000d96:	687b      	ldr	r3, [r7, #4]
 8000d98:	461a      	mov	r2, r3
 8000d9a:	492b      	ldr	r1, [pc, #172]	; (8000e48 <main+0x178>)
 8000d9c:	68b8      	ldr	r0, [r7, #8]
 8000d9e:	f004 fd5d 	bl	800585c <strncmp>
 8000da2:	4603      	mov	r3, r0
 8000da4:	2b00      	cmp	r3, #0
 8000da6:	d105      	bne.n	8000db4 <main+0xe4>
				  {
					  HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, GPIO_PIN_SET);
 8000da8:	2201      	movs	r2, #1
 8000daa:	2140      	movs	r1, #64	; 0x40
 8000dac:	4827      	ldr	r0, [pc, #156]	; (8000e4c <main+0x17c>)
 8000dae:	f001 ff4d 	bl	8002c4c <HAL_GPIO_WritePin>
 8000db2:	e00d      	b.n	8000dd0 <main+0x100>
				  }
				  else if (strncmp(str, "OFF", len) == 0)
 8000db4:	687b      	ldr	r3, [r7, #4]
 8000db6:	461a      	mov	r2, r3
 8000db8:	4925      	ldr	r1, [pc, #148]	; (8000e50 <main+0x180>)
 8000dba:	68b8      	ldr	r0, [r7, #8]
 8000dbc:	f004 fd4e 	bl	800585c <strncmp>
 8000dc0:	4603      	mov	r3, r0
 8000dc2:	2b00      	cmp	r3, #0
 8000dc4:	d104      	bne.n	8000dd0 <main+0x100>
				  {
					  HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, GPIO_PIN_RESET);
 8000dc6:	2200      	movs	r2, #0
 8000dc8:	2140      	movs	r1, #64	; 0x40
 8000dca:	4820      	ldr	r0, [pc, #128]	; (8000e4c <main+0x17c>)
 8000dcc:	f001 ff3e 	bl	8002c4c <HAL_GPIO_WritePin>
				  }
			  }

			  if ((t = lwjson_find(&lwjson, "LED3")) != NULL)
 8000dd0:	4921      	ldr	r1, [pc, #132]	; (8000e58 <main+0x188>)
 8000dd2:	4818      	ldr	r0, [pc, #96]	; (8000e34 <main+0x164>)
 8000dd4:	f001 f967 	bl	80020a6 <lwjson_find>
 8000dd8:	60f8      	str	r0, [r7, #12]
 8000dda:	68fb      	ldr	r3, [r7, #12]
 8000ddc:	2b00      	cmp	r3, #0
 8000dde:	d022      	beq.n	8000e26 <main+0x156>
			  {
				  str = (char *)lwjson_get_val_string(t, &len);
 8000de0:	1d3b      	adds	r3, r7, #4
 8000de2:	4619      	mov	r1, r3
 8000de4:	68f8      	ldr	r0, [r7, #12]
 8000de6:	f7ff ff55 	bl	8000c94 <lwjson_get_val_string>
 8000dea:	60b8      	str	r0, [r7, #8]

				  if (strncmp(str, "ON", len) == 0)
 8000dec:	687b      	ldr	r3, [r7, #4]
 8000dee:	461a      	mov	r2, r3
 8000df0:	4915      	ldr	r1, [pc, #84]	; (8000e48 <main+0x178>)
 8000df2:	68b8      	ldr	r0, [r7, #8]
 8000df4:	f004 fd32 	bl	800585c <strncmp>
 8000df8:	4603      	mov	r3, r0
 8000dfa:	2b00      	cmp	r3, #0
 8000dfc:	d105      	bne.n	8000e0a <main+0x13a>
				  {
					  HAL_GPIO_WritePin(LED3_GPIO_Port, LED3_Pin, GPIO_PIN_SET);
 8000dfe:	2201      	movs	r2, #1
 8000e00:	2120      	movs	r1, #32
 8000e02:	4812      	ldr	r0, [pc, #72]	; (8000e4c <main+0x17c>)
 8000e04:	f001 ff22 	bl	8002c4c <HAL_GPIO_WritePin>
 8000e08:	e00d      	b.n	8000e26 <main+0x156>
				  }
				  else if (strncmp(str, "OFF", len) == 0)
 8000e0a:	687b      	ldr	r3, [r7, #4]
 8000e0c:	461a      	mov	r2, r3
 8000e0e:	4910      	ldr	r1, [pc, #64]	; (8000e50 <main+0x180>)
 8000e10:	68b8      	ldr	r0, [r7, #8]
 8000e12:	f004 fd23 	bl	800585c <strncmp>
 8000e16:	4603      	mov	r3, r0
 8000e18:	2b00      	cmp	r3, #0
 8000e1a:	d104      	bne.n	8000e26 <main+0x156>
				  {
					  HAL_GPIO_WritePin(LED3_GPIO_Port, LED3_Pin, GPIO_PIN_RESET);
 8000e1c:	2200      	movs	r2, #0
 8000e1e:	2120      	movs	r1, #32
 8000e20:	480a      	ldr	r0, [pc, #40]	; (8000e4c <main+0x17c>)
 8000e22:	f001 ff13 	bl	8002c4c <HAL_GPIO_WritePin>
				  }
			  }

			  lwjson_free(&lwjson);
 8000e26:	4803      	ldr	r0, [pc, #12]	; (8000e34 <main+0x164>)
 8000e28:	f001 f921 	bl	800206e <lwjson_free>
	  if (data_received == true)
 8000e2c:	e76a      	b.n	8000d04 <main+0x34>
 8000e2e:	bf00      	nop
 8000e30:	20000160 	.word	0x20000160
 8000e34:	20000130 	.word	0x20000130
 8000e38:	2000002c 	.word	0x2000002c
 8000e3c:	20000d60 	.word	0x20000d60
 8000e40:	2000012c 	.word	0x2000012c
 8000e44:	0800589c 	.word	0x0800589c
 8000e48:	080058a4 	.word	0x080058a4
 8000e4c:	48000800 	.word	0x48000800
 8000e50:	080058a8 	.word	0x080058a8
 8000e54:	080058ac 	.word	0x080058ac
 8000e58:	080058b4 	.word	0x080058b4

08000e5c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000e5c:	b580      	push	{r7, lr}
 8000e5e:	b096      	sub	sp, #88	; 0x58
 8000e60:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000e62:	f107 0314 	add.w	r3, r7, #20
 8000e66:	2244      	movs	r2, #68	; 0x44
 8000e68:	2100      	movs	r1, #0
 8000e6a:	4618      	mov	r0, r3
 8000e6c:	f004 fcee 	bl	800584c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000e70:	463b      	mov	r3, r7
 8000e72:	2200      	movs	r2, #0
 8000e74:	601a      	str	r2, [r3, #0]
 8000e76:	605a      	str	r2, [r3, #4]
 8000e78:	609a      	str	r2, [r3, #8]
 8000e7a:	60da      	str	r2, [r3, #12]
 8000e7c:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000e7e:	f44f 7000 	mov.w	r0, #512	; 0x200
 8000e82:	f001 ff2d 	bl	8002ce0 <HAL_PWREx_ControlVoltageScaling>
 8000e86:	4603      	mov	r3, r0
 8000e88:	2b00      	cmp	r3, #0
 8000e8a:	d001      	beq.n	8000e90 <SystemClock_Config+0x34>
  {
    Error_Handler();
 8000e8c:	f000 f85c 	bl	8000f48 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000e90:	2302      	movs	r3, #2
 8000e92:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000e94:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000e98:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000e9a:	2310      	movs	r3, #16
 8000e9c:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000e9e:	2302      	movs	r3, #2
 8000ea0:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000ea2:	2302      	movs	r3, #2
 8000ea4:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000ea6:	2301      	movs	r3, #1
 8000ea8:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 10;
 8000eaa:	230a      	movs	r3, #10
 8000eac:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8000eae:	2307      	movs	r3, #7
 8000eb0:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000eb2:	2302      	movs	r3, #2
 8000eb4:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000eb6:	2302      	movs	r3, #2
 8000eb8:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000eba:	f107 0314 	add.w	r3, r7, #20
 8000ebe:	4618      	mov	r0, r3
 8000ec0:	f001 ff64 	bl	8002d8c <HAL_RCC_OscConfig>
 8000ec4:	4603      	mov	r3, r0
 8000ec6:	2b00      	cmp	r3, #0
 8000ec8:	d001      	beq.n	8000ece <SystemClock_Config+0x72>
  {
    Error_Handler();
 8000eca:	f000 f83d 	bl	8000f48 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000ece:	230f      	movs	r3, #15
 8000ed0:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000ed2:	2303      	movs	r3, #3
 8000ed4:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000ed6:	2300      	movs	r3, #0
 8000ed8:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000eda:	2300      	movs	r3, #0
 8000edc:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000ede:	2300      	movs	r3, #0
 8000ee0:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000ee2:	463b      	mov	r3, r7
 8000ee4:	2104      	movs	r1, #4
 8000ee6:	4618      	mov	r0, r3
 8000ee8:	f002 fb2c 	bl	8003544 <HAL_RCC_ClockConfig>
 8000eec:	4603      	mov	r3, r0
 8000eee:	2b00      	cmp	r3, #0
 8000ef0:	d001      	beq.n	8000ef6 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8000ef2:	f000 f829 	bl	8000f48 <Error_Handler>
  }
}
 8000ef6:	bf00      	nop
 8000ef8:	3758      	adds	r7, #88	; 0x58
 8000efa:	46bd      	mov	sp, r7
 8000efc:	bd80      	pop	{r7, pc}
	...

08000f00 <HAL_UARTEx_RxEventCallback>:

/* USER CODE BEGIN 4 */
void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8000f00:	b580      	push	{r7, lr}
 8000f02:	b082      	sub	sp, #8
 8000f04:	af00      	add	r7, sp, #0
 8000f06:	6078      	str	r0, [r7, #4]
 8000f08:	460b      	mov	r3, r1
 8000f0a:	807b      	strh	r3, [r7, #2]
	if (huart->Instance == USART2)
 8000f0c:	687b      	ldr	r3, [r7, #4]
 8000f0e:	681b      	ldr	r3, [r3, #0]
 8000f10:	4a09      	ldr	r2, [pc, #36]	; (8000f38 <HAL_UARTEx_RxEventCallback+0x38>)
 8000f12:	4293      	cmp	r3, r2
 8000f14:	d10c      	bne.n	8000f30 <HAL_UARTEx_RxEventCallback+0x30>
	{
		rx_buffer[Size] = '\0';
 8000f16:	887b      	ldrh	r3, [r7, #2]
 8000f18:	4a08      	ldr	r2, [pc, #32]	; (8000f3c <HAL_UARTEx_RxEventCallback+0x3c>)
 8000f1a:	2100      	movs	r1, #0
 8000f1c:	54d1      	strb	r1, [r2, r3]
		data_received = true;
 8000f1e:	4b08      	ldr	r3, [pc, #32]	; (8000f40 <HAL_UARTEx_RxEventCallback+0x40>)
 8000f20:	2201      	movs	r2, #1
 8000f22:	701a      	strb	r2, [r3, #0]
		HAL_UARTEx_ReceiveToIdle_DMA(&huart2, rx_buffer, 256);
 8000f24:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000f28:	4904      	ldr	r1, [pc, #16]	; (8000f3c <HAL_UARTEx_RxEventCallback+0x3c>)
 8000f2a:	4806      	ldr	r0, [pc, #24]	; (8000f44 <HAL_UARTEx_RxEventCallback+0x44>)
 8000f2c:	f004 fc0f 	bl	800574e <HAL_UARTEx_ReceiveToIdle_DMA>
	}
}
 8000f30:	bf00      	nop
 8000f32:	3708      	adds	r7, #8
 8000f34:	46bd      	mov	sp, r7
 8000f36:	bd80      	pop	{r7, pc}
 8000f38:	40004400 	.word	0x40004400
 8000f3c:	2000002c 	.word	0x2000002c
 8000f40:	2000012c 	.word	0x2000012c
 8000f44:	20000d60 	.word	0x20000d60

08000f48 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000f48:	b480      	push	{r7}
 8000f4a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000f4c:	b672      	cpsid	i
}
 8000f4e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000f50:	e7fe      	b.n	8000f50 <Error_Handler+0x8>
	...

08000f54 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000f54:	b480      	push	{r7}
 8000f56:	b083      	sub	sp, #12
 8000f58:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000f5a:	4b0f      	ldr	r3, [pc, #60]	; (8000f98 <HAL_MspInit+0x44>)
 8000f5c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000f5e:	4a0e      	ldr	r2, [pc, #56]	; (8000f98 <HAL_MspInit+0x44>)
 8000f60:	f043 0301 	orr.w	r3, r3, #1
 8000f64:	6613      	str	r3, [r2, #96]	; 0x60
 8000f66:	4b0c      	ldr	r3, [pc, #48]	; (8000f98 <HAL_MspInit+0x44>)
 8000f68:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000f6a:	f003 0301 	and.w	r3, r3, #1
 8000f6e:	607b      	str	r3, [r7, #4]
 8000f70:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000f72:	4b09      	ldr	r3, [pc, #36]	; (8000f98 <HAL_MspInit+0x44>)
 8000f74:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000f76:	4a08      	ldr	r2, [pc, #32]	; (8000f98 <HAL_MspInit+0x44>)
 8000f78:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000f7c:	6593      	str	r3, [r2, #88]	; 0x58
 8000f7e:	4b06      	ldr	r3, [pc, #24]	; (8000f98 <HAL_MspInit+0x44>)
 8000f80:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000f82:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000f86:	603b      	str	r3, [r7, #0]
 8000f88:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000f8a:	bf00      	nop
 8000f8c:	370c      	adds	r7, #12
 8000f8e:	46bd      	mov	sp, r7
 8000f90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f94:	4770      	bx	lr
 8000f96:	bf00      	nop
 8000f98:	40021000 	.word	0x40021000

08000f9c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000f9c:	b480      	push	{r7}
 8000f9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000fa0:	e7fe      	b.n	8000fa0 <NMI_Handler+0x4>

08000fa2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000fa2:	b480      	push	{r7}
 8000fa4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000fa6:	e7fe      	b.n	8000fa6 <HardFault_Handler+0x4>

08000fa8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000fa8:	b480      	push	{r7}
 8000faa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000fac:	e7fe      	b.n	8000fac <MemManage_Handler+0x4>

08000fae <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000fae:	b480      	push	{r7}
 8000fb0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000fb2:	e7fe      	b.n	8000fb2 <BusFault_Handler+0x4>

08000fb4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000fb4:	b480      	push	{r7}
 8000fb6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000fb8:	e7fe      	b.n	8000fb8 <UsageFault_Handler+0x4>

08000fba <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000fba:	b480      	push	{r7}
 8000fbc:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000fbe:	bf00      	nop
 8000fc0:	46bd      	mov	sp, r7
 8000fc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fc6:	4770      	bx	lr

08000fc8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000fc8:	b480      	push	{r7}
 8000fca:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000fcc:	bf00      	nop
 8000fce:	46bd      	mov	sp, r7
 8000fd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fd4:	4770      	bx	lr

08000fd6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000fd6:	b480      	push	{r7}
 8000fd8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000fda:	bf00      	nop
 8000fdc:	46bd      	mov	sp, r7
 8000fde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fe2:	4770      	bx	lr

08000fe4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000fe4:	b580      	push	{r7, lr}
 8000fe6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000fe8:	f001 f8de 	bl	80021a8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000fec:	bf00      	nop
 8000fee:	bd80      	pop	{r7, pc}

08000ff0 <DMA1_Channel6_IRQHandler>:

/**
  * @brief This function handles DMA1 channel6 global interrupt.
  */
void DMA1_Channel6_IRQHandler(void)
{
 8000ff0:	b580      	push	{r7, lr}
 8000ff2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel6_IRQn 0 */

  /* USER CODE END DMA1_Channel6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 8000ff4:	4802      	ldr	r0, [pc, #8]	; (8001000 <DMA1_Channel6_IRQHandler+0x10>)
 8000ff6:	f001 fba0 	bl	800273a <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel6_IRQn 1 */

  /* USER CODE END DMA1_Channel6_IRQn 1 */
}
 8000ffa:	bf00      	nop
 8000ffc:	bd80      	pop	{r7, pc}
 8000ffe:	bf00      	nop
 8001000:	20000de4 	.word	0x20000de4

08001004 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8001004:	b580      	push	{r7, lr}
 8001006:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8001008:	4802      	ldr	r0, [pc, #8]	; (8001014 <USART2_IRQHandler+0x10>)
 800100a:	f003 f9c9 	bl	80043a0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 800100e:	bf00      	nop
 8001010:	bd80      	pop	{r7, pc}
 8001012:	bf00      	nop
 8001014:	20000d60 	.word	0x20000d60

08001018 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8001018:	b580      	push	{r7, lr}
 800101a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 800101c:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8001020:	f001 fe2c 	bl	8002c7c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8001024:	bf00      	nop
 8001026:	bd80      	pop	{r7, pc}

08001028 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8001028:	b480      	push	{r7}
 800102a:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 800102c:	4b06      	ldr	r3, [pc, #24]	; (8001048 <SystemInit+0x20>)
 800102e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001032:	4a05      	ldr	r2, [pc, #20]	; (8001048 <SystemInit+0x20>)
 8001034:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001038:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 800103c:	bf00      	nop
 800103e:	46bd      	mov	sp, r7
 8001040:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001044:	4770      	bx	lr
 8001046:	bf00      	nop
 8001048:	e000ed00 	.word	0xe000ed00

0800104c <MX_USART2_UART_Init>:
DMA_HandleTypeDef hdma_usart2_rx;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 800104c:	b580      	push	{r7, lr}
 800104e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001050:	4b14      	ldr	r3, [pc, #80]	; (80010a4 <MX_USART2_UART_Init+0x58>)
 8001052:	4a15      	ldr	r2, [pc, #84]	; (80010a8 <MX_USART2_UART_Init+0x5c>)
 8001054:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001056:	4b13      	ldr	r3, [pc, #76]	; (80010a4 <MX_USART2_UART_Init+0x58>)
 8001058:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800105c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800105e:	4b11      	ldr	r3, [pc, #68]	; (80010a4 <MX_USART2_UART_Init+0x58>)
 8001060:	2200      	movs	r2, #0
 8001062:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001064:	4b0f      	ldr	r3, [pc, #60]	; (80010a4 <MX_USART2_UART_Init+0x58>)
 8001066:	2200      	movs	r2, #0
 8001068:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800106a:	4b0e      	ldr	r3, [pc, #56]	; (80010a4 <MX_USART2_UART_Init+0x58>)
 800106c:	2200      	movs	r2, #0
 800106e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001070:	4b0c      	ldr	r3, [pc, #48]	; (80010a4 <MX_USART2_UART_Init+0x58>)
 8001072:	220c      	movs	r2, #12
 8001074:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001076:	4b0b      	ldr	r3, [pc, #44]	; (80010a4 <MX_USART2_UART_Init+0x58>)
 8001078:	2200      	movs	r2, #0
 800107a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800107c:	4b09      	ldr	r3, [pc, #36]	; (80010a4 <MX_USART2_UART_Init+0x58>)
 800107e:	2200      	movs	r2, #0
 8001080:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001082:	4b08      	ldr	r3, [pc, #32]	; (80010a4 <MX_USART2_UART_Init+0x58>)
 8001084:	2200      	movs	r2, #0
 8001086:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001088:	4b06      	ldr	r3, [pc, #24]	; (80010a4 <MX_USART2_UART_Init+0x58>)
 800108a:	2200      	movs	r2, #0
 800108c:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800108e:	4805      	ldr	r0, [pc, #20]	; (80010a4 <MX_USART2_UART_Init+0x58>)
 8001090:	f003 f938 	bl	8004304 <HAL_UART_Init>
 8001094:	4603      	mov	r3, r0
 8001096:	2b00      	cmp	r3, #0
 8001098:	d001      	beq.n	800109e <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 800109a:	f7ff ff55 	bl	8000f48 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800109e:	bf00      	nop
 80010a0:	bd80      	pop	{r7, pc}
 80010a2:	bf00      	nop
 80010a4:	20000d60 	.word	0x20000d60
 80010a8:	40004400 	.word	0x40004400

080010ac <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80010ac:	b580      	push	{r7, lr}
 80010ae:	b0ac      	sub	sp, #176	; 0xb0
 80010b0:	af00      	add	r7, sp, #0
 80010b2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010b4:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80010b8:	2200      	movs	r2, #0
 80010ba:	601a      	str	r2, [r3, #0]
 80010bc:	605a      	str	r2, [r3, #4]
 80010be:	609a      	str	r2, [r3, #8]
 80010c0:	60da      	str	r2, [r3, #12]
 80010c2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80010c4:	f107 0314 	add.w	r3, r7, #20
 80010c8:	2288      	movs	r2, #136	; 0x88
 80010ca:	2100      	movs	r1, #0
 80010cc:	4618      	mov	r0, r3
 80010ce:	f004 fbbd 	bl	800584c <memset>
  if(uartHandle->Instance==USART2)
 80010d2:	687b      	ldr	r3, [r7, #4]
 80010d4:	681b      	ldr	r3, [r3, #0]
 80010d6:	4a3a      	ldr	r2, [pc, #232]	; (80011c0 <HAL_UART_MspInit+0x114>)
 80010d8:	4293      	cmp	r3, r2
 80010da:	d16c      	bne.n	80011b6 <HAL_UART_MspInit+0x10a>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 80010dc:	2302      	movs	r3, #2
 80010de:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 80010e0:	2300      	movs	r3, #0
 80010e2:	653b      	str	r3, [r7, #80]	; 0x50
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80010e4:	f107 0314 	add.w	r3, r7, #20
 80010e8:	4618      	mov	r0, r3
 80010ea:	f002 fc4f 	bl	800398c <HAL_RCCEx_PeriphCLKConfig>
 80010ee:	4603      	mov	r3, r0
 80010f0:	2b00      	cmp	r3, #0
 80010f2:	d001      	beq.n	80010f8 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 80010f4:	f7ff ff28 	bl	8000f48 <Error_Handler>
    }

    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80010f8:	4b32      	ldr	r3, [pc, #200]	; (80011c4 <HAL_UART_MspInit+0x118>)
 80010fa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80010fc:	4a31      	ldr	r2, [pc, #196]	; (80011c4 <HAL_UART_MspInit+0x118>)
 80010fe:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001102:	6593      	str	r3, [r2, #88]	; 0x58
 8001104:	4b2f      	ldr	r3, [pc, #188]	; (80011c4 <HAL_UART_MspInit+0x118>)
 8001106:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001108:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800110c:	613b      	str	r3, [r7, #16]
 800110e:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001110:	4b2c      	ldr	r3, [pc, #176]	; (80011c4 <HAL_UART_MspInit+0x118>)
 8001112:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001114:	4a2b      	ldr	r2, [pc, #172]	; (80011c4 <HAL_UART_MspInit+0x118>)
 8001116:	f043 0301 	orr.w	r3, r3, #1
 800111a:	64d3      	str	r3, [r2, #76]	; 0x4c
 800111c:	4b29      	ldr	r3, [pc, #164]	; (80011c4 <HAL_UART_MspInit+0x118>)
 800111e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001120:	f003 0301 	and.w	r3, r3, #1
 8001124:	60fb      	str	r3, [r7, #12]
 8001126:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8001128:	230c      	movs	r3, #12
 800112a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800112e:	2302      	movs	r3, #2
 8001130:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001134:	2300      	movs	r3, #0
 8001136:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800113a:	2303      	movs	r3, #3
 800113c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001140:	2307      	movs	r3, #7
 8001142:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001146:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 800114a:	4619      	mov	r1, r3
 800114c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001150:	f001 fbd2 	bl	80028f8 <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_RX Init */
    hdma_usart2_rx.Instance = DMA1_Channel6;
 8001154:	4b1c      	ldr	r3, [pc, #112]	; (80011c8 <HAL_UART_MspInit+0x11c>)
 8001156:	4a1d      	ldr	r2, [pc, #116]	; (80011cc <HAL_UART_MspInit+0x120>)
 8001158:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Request = DMA_REQUEST_2;
 800115a:	4b1b      	ldr	r3, [pc, #108]	; (80011c8 <HAL_UART_MspInit+0x11c>)
 800115c:	2202      	movs	r2, #2
 800115e:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001160:	4b19      	ldr	r3, [pc, #100]	; (80011c8 <HAL_UART_MspInit+0x11c>)
 8001162:	2200      	movs	r2, #0
 8001164:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001166:	4b18      	ldr	r3, [pc, #96]	; (80011c8 <HAL_UART_MspInit+0x11c>)
 8001168:	2200      	movs	r2, #0
 800116a:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 800116c:	4b16      	ldr	r3, [pc, #88]	; (80011c8 <HAL_UART_MspInit+0x11c>)
 800116e:	2280      	movs	r2, #128	; 0x80
 8001170:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001172:	4b15      	ldr	r3, [pc, #84]	; (80011c8 <HAL_UART_MspInit+0x11c>)
 8001174:	2200      	movs	r2, #0
 8001176:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001178:	4b13      	ldr	r3, [pc, #76]	; (80011c8 <HAL_UART_MspInit+0x11c>)
 800117a:	2200      	movs	r2, #0
 800117c:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_NORMAL;
 800117e:	4b12      	ldr	r3, [pc, #72]	; (80011c8 <HAL_UART_MspInit+0x11c>)
 8001180:	2200      	movs	r2, #0
 8001182:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 8001184:	4b10      	ldr	r3, [pc, #64]	; (80011c8 <HAL_UART_MspInit+0x11c>)
 8001186:	2200      	movs	r2, #0
 8001188:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 800118a:	480f      	ldr	r0, [pc, #60]	; (80011c8 <HAL_UART_MspInit+0x11c>)
 800118c:	f001 f93e 	bl	800240c <HAL_DMA_Init>
 8001190:	4603      	mov	r3, r0
 8001192:	2b00      	cmp	r3, #0
 8001194:	d001      	beq.n	800119a <HAL_UART_MspInit+0xee>
    {
      Error_Handler();
 8001196:	f7ff fed7 	bl	8000f48 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart2_rx);
 800119a:	687b      	ldr	r3, [r7, #4]
 800119c:	4a0a      	ldr	r2, [pc, #40]	; (80011c8 <HAL_UART_MspInit+0x11c>)
 800119e:	671a      	str	r2, [r3, #112]	; 0x70
 80011a0:	4a09      	ldr	r2, [pc, #36]	; (80011c8 <HAL_UART_MspInit+0x11c>)
 80011a2:	687b      	ldr	r3, [r7, #4]
 80011a4:	6293      	str	r3, [r2, #40]	; 0x28

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 80011a6:	2200      	movs	r2, #0
 80011a8:	2100      	movs	r1, #0
 80011aa:	2026      	movs	r0, #38	; 0x26
 80011ac:	f001 f8f7 	bl	800239e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80011b0:	2026      	movs	r0, #38	; 0x26
 80011b2:	f001 f910 	bl	80023d6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 80011b6:	bf00      	nop
 80011b8:	37b0      	adds	r7, #176	; 0xb0
 80011ba:	46bd      	mov	sp, r7
 80011bc:	bd80      	pop	{r7, pc}
 80011be:	bf00      	nop
 80011c0:	40004400 	.word	0x40004400
 80011c4:	40021000 	.word	0x40021000
 80011c8:	20000de4 	.word	0x20000de4
 80011cc:	4002006c 	.word	0x4002006c

080011d0 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 80011d0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001208 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 80011d4:	f7ff ff28 	bl	8001028 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80011d8:	480c      	ldr	r0, [pc, #48]	; (800120c <LoopForever+0x6>)
  ldr r1, =_edata
 80011da:	490d      	ldr	r1, [pc, #52]	; (8001210 <LoopForever+0xa>)
  ldr r2, =_sidata
 80011dc:	4a0d      	ldr	r2, [pc, #52]	; (8001214 <LoopForever+0xe>)
  movs r3, #0
 80011de:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80011e0:	e002      	b.n	80011e8 <LoopCopyDataInit>

080011e2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80011e2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80011e4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80011e6:	3304      	adds	r3, #4

080011e8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80011e8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80011ea:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80011ec:	d3f9      	bcc.n	80011e2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80011ee:	4a0a      	ldr	r2, [pc, #40]	; (8001218 <LoopForever+0x12>)
  ldr r4, =_ebss
 80011f0:	4c0a      	ldr	r4, [pc, #40]	; (800121c <LoopForever+0x16>)
  movs r3, #0
 80011f2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80011f4:	e001      	b.n	80011fa <LoopFillZerobss>

080011f6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80011f6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80011f8:	3204      	adds	r2, #4

080011fa <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80011fa:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80011fc:	d3fb      	bcc.n	80011f6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80011fe:	f004 fb01 	bl	8005804 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001202:	f7ff fd65 	bl	8000cd0 <main>

08001206 <LoopForever>:

LoopForever:
    b LoopForever
 8001206:	e7fe      	b.n	8001206 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8001208:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 800120c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001210:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8001214:	0800592c 	.word	0x0800592c
  ldr r2, =_sbss
 8001218:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 800121c:	20000e30 	.word	0x20000e30

08001220 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001220:	e7fe      	b.n	8001220 <ADC1_2_IRQHandler>

08001222 <prv_alloc_token>:
 * \brief           Allocate new token for JSON block
 * \param[in]       lwobj: LwJSON instance
 * \return          Pointer to new token
 */
static lwjson_token_t*
prv_alloc_token(lwjson_t* lwobj) {
 8001222:	b580      	push	{r7, lr}
 8001224:	b082      	sub	sp, #8
 8001226:	af00      	add	r7, sp, #0
 8001228:	6078      	str	r0, [r7, #4]
    if (lwobj->next_free_token_pos < lwobj->tokens_len) {
 800122a:	687b      	ldr	r3, [r7, #4]
 800122c:	689a      	ldr	r2, [r3, #8]
 800122e:	687b      	ldr	r3, [r7, #4]
 8001230:	685b      	ldr	r3, [r3, #4]
 8001232:	429a      	cmp	r2, r3
 8001234:	d21a      	bcs.n	800126c <prv_alloc_token+0x4a>
        memset(&lwobj->tokens[lwobj->next_free_token_pos], 0x00, sizeof(*lwobj->tokens));
 8001236:	687b      	ldr	r3, [r7, #4]
 8001238:	6819      	ldr	r1, [r3, #0]
 800123a:	687b      	ldr	r3, [r7, #4]
 800123c:	689a      	ldr	r2, [r3, #8]
 800123e:	4613      	mov	r3, r2
 8001240:	005b      	lsls	r3, r3, #1
 8001242:	4413      	add	r3, r2
 8001244:	00db      	lsls	r3, r3, #3
 8001246:	440b      	add	r3, r1
 8001248:	2218      	movs	r2, #24
 800124a:	2100      	movs	r1, #0
 800124c:	4618      	mov	r0, r3
 800124e:	f004 fafd 	bl	800584c <memset>
        return &lwobj->tokens[lwobj->next_free_token_pos++];
 8001252:	687b      	ldr	r3, [r7, #4]
 8001254:	6819      	ldr	r1, [r3, #0]
 8001256:	687b      	ldr	r3, [r7, #4]
 8001258:	689a      	ldr	r2, [r3, #8]
 800125a:	1c50      	adds	r0, r2, #1
 800125c:	687b      	ldr	r3, [r7, #4]
 800125e:	6098      	str	r0, [r3, #8]
 8001260:	4613      	mov	r3, r2
 8001262:	005b      	lsls	r3, r3, #1
 8001264:	4413      	add	r3, r2
 8001266:	00db      	lsls	r3, r3, #3
 8001268:	440b      	add	r3, r1
 800126a:	e000      	b.n	800126e <prv_alloc_token+0x4c>
    }
    return NULL;
 800126c:	2300      	movs	r3, #0
}
 800126e:	4618      	mov	r0, r3
 8001270:	3708      	adds	r7, #8
 8001272:	46bd      	mov	sp, r7
 8001274:	bd80      	pop	{r7, pc}

08001276 <prv_skip_blank>:
 * \brief           Skip all characters that are considered *blank* as per RFC4627
 * \param[in,out]   pobj: Pointer to text that is modified on success
 * \return          \ref lwjsonOK on success, member of \ref lwjsonr_t otherwise
 */
static lwjsonr_t
prv_skip_blank(lwjson_int_str_t* pobj) {
 8001276:	b480      	push	{r7}
 8001278:	b083      	sub	sp, #12
 800127a:	af00      	add	r7, sp, #0
 800127c:	6078      	str	r0, [r7, #4]
    while (pobj->p != NULL && *pobj->p != '\0' && (size_t)(pobj->p - pobj->start) < pobj->len) {
 800127e:	e01d      	b.n	80012bc <prv_skip_blank+0x46>
        if (*pobj->p == ' ' || *pobj->p == '\t' || *pobj->p == '\r' || *pobj->p == '\n' || *pobj->p == '\f') {
 8001280:	687b      	ldr	r3, [r7, #4]
 8001282:	689b      	ldr	r3, [r3, #8]
 8001284:	781b      	ldrb	r3, [r3, #0]
 8001286:	2b20      	cmp	r3, #32
 8001288:	d013      	beq.n	80012b2 <prv_skip_blank+0x3c>
 800128a:	687b      	ldr	r3, [r7, #4]
 800128c:	689b      	ldr	r3, [r3, #8]
 800128e:	781b      	ldrb	r3, [r3, #0]
 8001290:	2b09      	cmp	r3, #9
 8001292:	d00e      	beq.n	80012b2 <prv_skip_blank+0x3c>
 8001294:	687b      	ldr	r3, [r7, #4]
 8001296:	689b      	ldr	r3, [r3, #8]
 8001298:	781b      	ldrb	r3, [r3, #0]
 800129a:	2b0d      	cmp	r3, #13
 800129c:	d009      	beq.n	80012b2 <prv_skip_blank+0x3c>
 800129e:	687b      	ldr	r3, [r7, #4]
 80012a0:	689b      	ldr	r3, [r3, #8]
 80012a2:	781b      	ldrb	r3, [r3, #0]
 80012a4:	2b0a      	cmp	r3, #10
 80012a6:	d004      	beq.n	80012b2 <prv_skip_blank+0x3c>
 80012a8:	687b      	ldr	r3, [r7, #4]
 80012aa:	689b      	ldr	r3, [r3, #8]
 80012ac:	781b      	ldrb	r3, [r3, #0]
 80012ae:	2b0c      	cmp	r3, #12
 80012b0:	d117      	bne.n	80012e2 <prv_skip_blank+0x6c>
            ++pobj->p;
 80012b2:	687b      	ldr	r3, [r7, #4]
 80012b4:	689b      	ldr	r3, [r3, #8]
 80012b6:	1c5a      	adds	r2, r3, #1
 80012b8:	687b      	ldr	r3, [r7, #4]
 80012ba:	609a      	str	r2, [r3, #8]
    while (pobj->p != NULL && *pobj->p != '\0' && (size_t)(pobj->p - pobj->start) < pobj->len) {
 80012bc:	687b      	ldr	r3, [r7, #4]
 80012be:	689b      	ldr	r3, [r3, #8]
 80012c0:	2b00      	cmp	r3, #0
 80012c2:	d00e      	beq.n	80012e2 <prv_skip_blank+0x6c>
 80012c4:	687b      	ldr	r3, [r7, #4]
 80012c6:	689b      	ldr	r3, [r3, #8]
 80012c8:	781b      	ldrb	r3, [r3, #0]
 80012ca:	2b00      	cmp	r3, #0
 80012cc:	d009      	beq.n	80012e2 <prv_skip_blank+0x6c>
 80012ce:	687b      	ldr	r3, [r7, #4]
 80012d0:	689a      	ldr	r2, [r3, #8]
 80012d2:	687b      	ldr	r3, [r7, #4]
 80012d4:	681b      	ldr	r3, [r3, #0]
 80012d6:	1ad3      	subs	r3, r2, r3
 80012d8:	461a      	mov	r2, r3
 80012da:	687b      	ldr	r3, [r7, #4]
 80012dc:	685b      	ldr	r3, [r3, #4]
 80012de:	429a      	cmp	r2, r3
 80012e0:	d3ce      	bcc.n	8001280 <prv_skip_blank+0xa>
#endif /* LWJSON_CFG_COMMENTS */
        } else {
            break;
        }
    }
    if (pobj->p != NULL && *pobj->p != '\0' && (size_t)(pobj->p - pobj->start) < pobj->len) {
 80012e2:	687b      	ldr	r3, [r7, #4]
 80012e4:	689b      	ldr	r3, [r3, #8]
 80012e6:	2b00      	cmp	r3, #0
 80012e8:	d010      	beq.n	800130c <prv_skip_blank+0x96>
 80012ea:	687b      	ldr	r3, [r7, #4]
 80012ec:	689b      	ldr	r3, [r3, #8]
 80012ee:	781b      	ldrb	r3, [r3, #0]
 80012f0:	2b00      	cmp	r3, #0
 80012f2:	d00b      	beq.n	800130c <prv_skip_blank+0x96>
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	689a      	ldr	r2, [r3, #8]
 80012f8:	687b      	ldr	r3, [r7, #4]
 80012fa:	681b      	ldr	r3, [r3, #0]
 80012fc:	1ad3      	subs	r3, r2, r3
 80012fe:	461a      	mov	r2, r3
 8001300:	687b      	ldr	r3, [r7, #4]
 8001302:	685b      	ldr	r3, [r3, #4]
 8001304:	429a      	cmp	r2, r3
 8001306:	d201      	bcs.n	800130c <prv_skip_blank+0x96>
        return lwjsonOK;
 8001308:	2300      	movs	r3, #0
 800130a:	e000      	b.n	800130e <prv_skip_blank+0x98>
    }
    return lwjsonERRJSON;
 800130c:	2302      	movs	r3, #2
}
 800130e:	4618      	mov	r0, r3
 8001310:	370c      	adds	r7, #12
 8001312:	46bd      	mov	sp, r7
 8001314:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001318:	4770      	bx	lr
	...

0800131c <prv_parse_string>:
 * \param[out]      pout: Pointer to pointer to string that is set where string starts
 * \param[out]      poutlen: Length of string in units of characters is stored here
 * \return          \ref lwjsonOK on success, member of \ref lwjsonr_t otherwise
 */
static lwjsonr_t
prv_parse_string(lwjson_int_str_t* pobj, const char** pout, size_t* poutlen) {
 800131c:	b580      	push	{r7, lr}
 800131e:	b088      	sub	sp, #32
 8001320:	af00      	add	r7, sp, #0
 8001322:	60f8      	str	r0, [r7, #12]
 8001324:	60b9      	str	r1, [r7, #8]
 8001326:	607a      	str	r2, [r7, #4]
    lwjsonr_t res;
    size_t len = 0;
 8001328:	2300      	movs	r3, #0
 800132a:	61fb      	str	r3, [r7, #28]

    if ((res = prv_skip_blank(pobj)) != lwjsonOK) {
 800132c:	68f8      	ldr	r0, [r7, #12]
 800132e:	f7ff ffa2 	bl	8001276 <prv_skip_blank>
 8001332:	4603      	mov	r3, r0
 8001334:	75fb      	strb	r3, [r7, #23]
 8001336:	7dfb      	ldrb	r3, [r7, #23]
 8001338:	2b00      	cmp	r3, #0
 800133a:	d001      	beq.n	8001340 <prv_parse_string+0x24>
        return res;
 800133c:	7dfb      	ldrb	r3, [r7, #23]
 800133e:	e0cf      	b.n	80014e0 <prv_parse_string+0x1c4>
    }
    if (*pobj->p++ != '"') {
 8001340:	68fb      	ldr	r3, [r7, #12]
 8001342:	689b      	ldr	r3, [r3, #8]
 8001344:	1c59      	adds	r1, r3, #1
 8001346:	68fa      	ldr	r2, [r7, #12]
 8001348:	6091      	str	r1, [r2, #8]
 800134a:	781b      	ldrb	r3, [r3, #0]
 800134c:	2b22      	cmp	r3, #34	; 0x22
 800134e:	d001      	beq.n	8001354 <prv_parse_string+0x38>
        return lwjsonERRJSON;
 8001350:	2302      	movs	r3, #2
 8001352:	e0c5      	b.n	80014e0 <prv_parse_string+0x1c4>
    }
    *pout = pobj->p;
 8001354:	68fb      	ldr	r3, [r7, #12]
 8001356:	689a      	ldr	r2, [r3, #8]
 8001358:	68bb      	ldr	r3, [r7, #8]
 800135a:	601a      	str	r2, [r3, #0]
    /* Parse string but take care of escape characters */
    for (;; ++pobj->p, ++len) {
        if (pobj->p == NULL || *pobj->p == '\0' || (size_t)(pobj->p - pobj->start) >= pobj->len) {
 800135c:	68fb      	ldr	r3, [r7, #12]
 800135e:	689b      	ldr	r3, [r3, #8]
 8001360:	2b00      	cmp	r3, #0
 8001362:	d00e      	beq.n	8001382 <prv_parse_string+0x66>
 8001364:	68fb      	ldr	r3, [r7, #12]
 8001366:	689b      	ldr	r3, [r3, #8]
 8001368:	781b      	ldrb	r3, [r3, #0]
 800136a:	2b00      	cmp	r3, #0
 800136c:	d009      	beq.n	8001382 <prv_parse_string+0x66>
 800136e:	68fb      	ldr	r3, [r7, #12]
 8001370:	689a      	ldr	r2, [r3, #8]
 8001372:	68fb      	ldr	r3, [r7, #12]
 8001374:	681b      	ldr	r3, [r3, #0]
 8001376:	1ad3      	subs	r3, r2, r3
 8001378:	461a      	mov	r2, r3
 800137a:	68fb      	ldr	r3, [r7, #12]
 800137c:	685b      	ldr	r3, [r3, #4]
 800137e:	429a      	cmp	r2, r3
 8001380:	d301      	bcc.n	8001386 <prv_parse_string+0x6a>
            return lwjsonERRJSON;
 8001382:	2302      	movs	r3, #2
 8001384:	e0ac      	b.n	80014e0 <prv_parse_string+0x1c4>
        }
        /* Check special characters */
        if (*pobj->p == '\\') {
 8001386:	68fb      	ldr	r3, [r7, #12]
 8001388:	689b      	ldr	r3, [r3, #8]
 800138a:	781b      	ldrb	r3, [r3, #0]
 800138c:	2b5c      	cmp	r3, #92	; 0x5c
 800138e:	f040 808d 	bne.w	80014ac <prv_parse_string+0x190>
            ++pobj->p;
 8001392:	68fb      	ldr	r3, [r7, #12]
 8001394:	689b      	ldr	r3, [r3, #8]
 8001396:	1c5a      	adds	r2, r3, #1
 8001398:	68fb      	ldr	r3, [r7, #12]
 800139a:	609a      	str	r2, [r3, #8]
            ++len;
 800139c:	69fb      	ldr	r3, [r7, #28]
 800139e:	3301      	adds	r3, #1
 80013a0:	61fb      	str	r3, [r7, #28]
            switch (*pobj->p) {
 80013a2:	68fb      	ldr	r3, [r7, #12]
 80013a4:	689b      	ldr	r3, [r3, #8]
 80013a6:	781b      	ldrb	r3, [r3, #0]
 80013a8:	2b75      	cmp	r3, #117	; 0x75
 80013aa:	dc7d      	bgt.n	80014a8 <prv_parse_string+0x18c>
 80013ac:	2b5c      	cmp	r3, #92	; 0x5c
 80013ae:	da06      	bge.n	80013be <prv_parse_string+0xa2>
 80013b0:	2b22      	cmp	r3, #34	; 0x22
 80013b2:	f000 808b 	beq.w	80014cc <prv_parse_string+0x1b0>
 80013b6:	2b2f      	cmp	r3, #47	; 0x2f
 80013b8:	f000 8088 	beq.w	80014cc <prv_parse_string+0x1b0>
 80013bc:	e074      	b.n	80014a8 <prv_parse_string+0x18c>
 80013be:	3b5c      	subs	r3, #92	; 0x5c
 80013c0:	2b19      	cmp	r3, #25
 80013c2:	d871      	bhi.n	80014a8 <prv_parse_string+0x18c>
 80013c4:	a201      	add	r2, pc, #4	; (adr r2, 80013cc <prv_parse_string+0xb0>)
 80013c6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80013ca:	bf00      	nop
 80013cc:	080014cd 	.word	0x080014cd
 80013d0:	080014a9 	.word	0x080014a9
 80013d4:	080014a9 	.word	0x080014a9
 80013d8:	080014a9 	.word	0x080014a9
 80013dc:	080014a9 	.word	0x080014a9
 80013e0:	080014a9 	.word	0x080014a9
 80013e4:	080014cd 	.word	0x080014cd
 80013e8:	080014a9 	.word	0x080014a9
 80013ec:	080014a9 	.word	0x080014a9
 80013f0:	080014a9 	.word	0x080014a9
 80013f4:	080014cd 	.word	0x080014cd
 80013f8:	080014a9 	.word	0x080014a9
 80013fc:	080014a9 	.word	0x080014a9
 8001400:	080014a9 	.word	0x080014a9
 8001404:	080014a9 	.word	0x080014a9
 8001408:	080014a9 	.word	0x080014a9
 800140c:	080014a9 	.word	0x080014a9
 8001410:	080014a9 	.word	0x080014a9
 8001414:	080014cd 	.word	0x080014cd
 8001418:	080014a9 	.word	0x080014a9
 800141c:	080014a9 	.word	0x080014a9
 8001420:	080014a9 	.word	0x080014a9
 8001424:	080014cd 	.word	0x080014cd
 8001428:	080014a9 	.word	0x080014a9
 800142c:	080014cd 	.word	0x080014cd
 8001430:	08001435 	.word	0x08001435
                case 'n':
                case 'r':
                case 't':
                    break;
                case 'u':
                    ++pobj->p;
 8001434:	68fb      	ldr	r3, [r7, #12]
 8001436:	689b      	ldr	r3, [r3, #8]
 8001438:	1c5a      	adds	r2, r3, #1
 800143a:	68fb      	ldr	r3, [r7, #12]
 800143c:	609a      	str	r2, [r3, #8]
                    for (size_t i = 0; i < 4; ++i, ++len) {
 800143e:	2300      	movs	r3, #0
 8001440:	61bb      	str	r3, [r7, #24]
 8001442:	e02d      	b.n	80014a0 <prv_parse_string+0x184>
                        if (!((*pobj->p >= '0' && *pobj->p <= '9') || (*pobj->p >= 'a' && *pobj->p <= 'f')
 8001444:	68fb      	ldr	r3, [r7, #12]
 8001446:	689b      	ldr	r3, [r3, #8]
 8001448:	781b      	ldrb	r3, [r3, #0]
 800144a:	2b2f      	cmp	r3, #47	; 0x2f
 800144c:	d904      	bls.n	8001458 <prv_parse_string+0x13c>
 800144e:	68fb      	ldr	r3, [r7, #12]
 8001450:	689b      	ldr	r3, [r3, #8]
 8001452:	781b      	ldrb	r3, [r3, #0]
 8001454:	2b39      	cmp	r3, #57	; 0x39
 8001456:	d915      	bls.n	8001484 <prv_parse_string+0x168>
 8001458:	68fb      	ldr	r3, [r7, #12]
 800145a:	689b      	ldr	r3, [r3, #8]
 800145c:	781b      	ldrb	r3, [r3, #0]
 800145e:	2b60      	cmp	r3, #96	; 0x60
 8001460:	d904      	bls.n	800146c <prv_parse_string+0x150>
 8001462:	68fb      	ldr	r3, [r7, #12]
 8001464:	689b      	ldr	r3, [r3, #8]
 8001466:	781b      	ldrb	r3, [r3, #0]
 8001468:	2b66      	cmp	r3, #102	; 0x66
 800146a:	d90b      	bls.n	8001484 <prv_parse_string+0x168>
                              || (*pobj->p >= 'A' && *pobj->p <= 'F'))) {
 800146c:	68fb      	ldr	r3, [r7, #12]
 800146e:	689b      	ldr	r3, [r3, #8]
 8001470:	781b      	ldrb	r3, [r3, #0]
                        if (!((*pobj->p >= '0' && *pobj->p <= '9') || (*pobj->p >= 'a' && *pobj->p <= 'f')
 8001472:	2b40      	cmp	r3, #64	; 0x40
 8001474:	d904      	bls.n	8001480 <prv_parse_string+0x164>
                              || (*pobj->p >= 'A' && *pobj->p <= 'F'))) {
 8001476:	68fb      	ldr	r3, [r7, #12]
 8001478:	689b      	ldr	r3, [r3, #8]
 800147a:	781b      	ldrb	r3, [r3, #0]
 800147c:	2b46      	cmp	r3, #70	; 0x46
 800147e:	d901      	bls.n	8001484 <prv_parse_string+0x168>
                            return lwjsonERRJSON;
 8001480:	2302      	movs	r3, #2
 8001482:	e02d      	b.n	80014e0 <prv_parse_string+0x1c4>
                        }
                        if (i < 3) {
 8001484:	69bb      	ldr	r3, [r7, #24]
 8001486:	2b02      	cmp	r3, #2
 8001488:	d804      	bhi.n	8001494 <prv_parse_string+0x178>
                            ++pobj->p;
 800148a:	68fb      	ldr	r3, [r7, #12]
 800148c:	689b      	ldr	r3, [r3, #8]
 800148e:	1c5a      	adds	r2, r3, #1
 8001490:	68fb      	ldr	r3, [r7, #12]
 8001492:	609a      	str	r2, [r3, #8]
                    for (size_t i = 0; i < 4; ++i, ++len) {
 8001494:	69bb      	ldr	r3, [r7, #24]
 8001496:	3301      	adds	r3, #1
 8001498:	61bb      	str	r3, [r7, #24]
 800149a:	69fb      	ldr	r3, [r7, #28]
 800149c:	3301      	adds	r3, #1
 800149e:	61fb      	str	r3, [r7, #28]
 80014a0:	69bb      	ldr	r3, [r7, #24]
 80014a2:	2b03      	cmp	r3, #3
 80014a4:	d9ce      	bls.n	8001444 <prv_parse_string+0x128>
                        }
                    }
                    break;
 80014a6:	e012      	b.n	80014ce <prv_parse_string+0x1b2>
                default:
                    return lwjsonERRJSON;
 80014a8:	2302      	movs	r3, #2
 80014aa:	e019      	b.n	80014e0 <prv_parse_string+0x1c4>
            }
        } else if (*pobj->p == '"') {
 80014ac:	68fb      	ldr	r3, [r7, #12]
 80014ae:	689b      	ldr	r3, [r3, #8]
 80014b0:	781b      	ldrb	r3, [r3, #0]
 80014b2:	2b22      	cmp	r3, #34	; 0x22
 80014b4:	d10b      	bne.n	80014ce <prv_parse_string+0x1b2>
            ++pobj->p;
 80014b6:	68fb      	ldr	r3, [r7, #12]
 80014b8:	689b      	ldr	r3, [r3, #8]
 80014ba:	1c5a      	adds	r2, r3, #1
 80014bc:	68fb      	ldr	r3, [r7, #12]
 80014be:	609a      	str	r2, [r3, #8]
            break;
 80014c0:	bf00      	nop
        }
    }
    *poutlen = len;
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	69fa      	ldr	r2, [r7, #28]
 80014c6:	601a      	str	r2, [r3, #0]
    return res;
 80014c8:	7dfb      	ldrb	r3, [r7, #23]
 80014ca:	e009      	b.n	80014e0 <prv_parse_string+0x1c4>
                    break;
 80014cc:	bf00      	nop
    for (;; ++pobj->p, ++len) {
 80014ce:	68fb      	ldr	r3, [r7, #12]
 80014d0:	689b      	ldr	r3, [r3, #8]
 80014d2:	1c5a      	adds	r2, r3, #1
 80014d4:	68fb      	ldr	r3, [r7, #12]
 80014d6:	609a      	str	r2, [r3, #8]
 80014d8:	69fb      	ldr	r3, [r7, #28]
 80014da:	3301      	adds	r3, #1
 80014dc:	61fb      	str	r3, [r7, #28]
        if (pobj->p == NULL || *pobj->p == '\0' || (size_t)(pobj->p - pobj->start) >= pobj->len) {
 80014de:	e73d      	b.n	800135c <prv_parse_string+0x40>
}
 80014e0:	4618      	mov	r0, r3
 80014e2:	3720      	adds	r7, #32
 80014e4:	46bd      	mov	sp, r7
 80014e6:	bd80      	pop	{r7, pc}

080014e8 <prv_parse_property_name>:
 * \param[in,out]   pobj: Pointer to text that is modified on success
 * \param[out]      t: Token instance to write property name to
 * \return          \ref lwjsonOK on success, member of \ref lwjsonr_t otherwise
 */
static lwjsonr_t
prv_parse_property_name(lwjson_int_str_t* pobj, lwjson_token_t* t) {
 80014e8:	b580      	push	{r7, lr}
 80014ea:	b084      	sub	sp, #16
 80014ec:	af00      	add	r7, sp, #0
 80014ee:	6078      	str	r0, [r7, #4]
 80014f0:	6039      	str	r1, [r7, #0]
    lwjsonr_t res;

    /* Parse property string first */
    if ((res = prv_parse_string(pobj, &t->token_name, &t->token_name_len)) != lwjsonOK) {
 80014f2:	683b      	ldr	r3, [r7, #0]
 80014f4:	f103 0108 	add.w	r1, r3, #8
 80014f8:	683b      	ldr	r3, [r7, #0]
 80014fa:	330c      	adds	r3, #12
 80014fc:	461a      	mov	r2, r3
 80014fe:	6878      	ldr	r0, [r7, #4]
 8001500:	f7ff ff0c 	bl	800131c <prv_parse_string>
 8001504:	4603      	mov	r3, r0
 8001506:	73fb      	strb	r3, [r7, #15]
 8001508:	7bfb      	ldrb	r3, [r7, #15]
 800150a:	2b00      	cmp	r3, #0
 800150c:	d001      	beq.n	8001512 <prv_parse_property_name+0x2a>
        return res;
 800150e:	7bfb      	ldrb	r3, [r7, #15]
 8001510:	e01e      	b.n	8001550 <prv_parse_property_name+0x68>
    }
    /* Skip any spaces */
    if ((res = prv_skip_blank(pobj)) != lwjsonOK) {
 8001512:	6878      	ldr	r0, [r7, #4]
 8001514:	f7ff feaf 	bl	8001276 <prv_skip_blank>
 8001518:	4603      	mov	r3, r0
 800151a:	73fb      	strb	r3, [r7, #15]
 800151c:	7bfb      	ldrb	r3, [r7, #15]
 800151e:	2b00      	cmp	r3, #0
 8001520:	d001      	beq.n	8001526 <prv_parse_property_name+0x3e>
        return res;
 8001522:	7bfb      	ldrb	r3, [r7, #15]
 8001524:	e014      	b.n	8001550 <prv_parse_property_name+0x68>
    }
    /* Must continue with colon */
    if (*pobj->p++ != ':') {
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	689b      	ldr	r3, [r3, #8]
 800152a:	1c59      	adds	r1, r3, #1
 800152c:	687a      	ldr	r2, [r7, #4]
 800152e:	6091      	str	r1, [r2, #8]
 8001530:	781b      	ldrb	r3, [r3, #0]
 8001532:	2b3a      	cmp	r3, #58	; 0x3a
 8001534:	d001      	beq.n	800153a <prv_parse_property_name+0x52>
        return lwjsonERRJSON;
 8001536:	2302      	movs	r3, #2
 8001538:	e00a      	b.n	8001550 <prv_parse_property_name+0x68>
    }
    /* Skip any spaces */
    if ((res = prv_skip_blank(pobj)) != lwjsonOK) {
 800153a:	6878      	ldr	r0, [r7, #4]
 800153c:	f7ff fe9b 	bl	8001276 <prv_skip_blank>
 8001540:	4603      	mov	r3, r0
 8001542:	73fb      	strb	r3, [r7, #15]
 8001544:	7bfb      	ldrb	r3, [r7, #15]
 8001546:	2b00      	cmp	r3, #0
 8001548:	d001      	beq.n	800154e <prv_parse_property_name+0x66>
        return res;
 800154a:	7bfb      	ldrb	r3, [r7, #15]
 800154c:	e000      	b.n	8001550 <prv_parse_property_name+0x68>
    }
    return lwjsonOK;
 800154e:	2300      	movs	r3, #0
}
 8001550:	4618      	mov	r0, r3
 8001552:	3710      	adds	r7, #16
 8001554:	46bd      	mov	sp, r7
 8001556:	bd80      	pop	{r7, pc}

08001558 <prv_parse_number>:
 * \param[out]      fout: Pointer to output real-type variable. Used if type is REAL.
 * \param[out]      iout: Pointer to output int-type variable. Used if type is INT.
 * \return          \ref lwjsonOK on success, member of \ref lwjsonr_t otherwise
 */
static lwjsonr_t
prv_parse_number(lwjson_int_str_t* pobj, lwjson_type_t* tout, lwjson_real_t* fout, lwjson_int_t* iout) {
 8001558:	b580      	push	{r7, lr}
 800155a:	b08a      	sub	sp, #40	; 0x28
 800155c:	af00      	add	r7, sp, #0
 800155e:	60f8      	str	r0, [r7, #12]
 8001560:	60b9      	str	r1, [r7, #8]
 8001562:	607a      	str	r2, [r7, #4]
 8001564:	603b      	str	r3, [r7, #0]
    lwjsonr_t res;
    uint8_t is_minus;
    lwjson_real_t num;
    lwjson_type_t type = LWJSON_TYPE_NUM_INT;
 8001566:	2301      	movs	r3, #1
 8001568:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

    if ((res = prv_skip_blank(pobj)) != lwjsonOK) {
 800156c:	68f8      	ldr	r0, [r7, #12]
 800156e:	f7ff fe82 	bl	8001276 <prv_skip_blank>
 8001572:	4603      	mov	r3, r0
 8001574:	74fb      	strb	r3, [r7, #19]
 8001576:	7cfb      	ldrb	r3, [r7, #19]
 8001578:	2b00      	cmp	r3, #0
 800157a:	d001      	beq.n	8001580 <prv_parse_number+0x28>
        return res;
 800157c:	7cfb      	ldrb	r3, [r7, #19]
 800157e:	e158      	b.n	8001832 <prv_parse_number+0x2da>
    }
    if (*pobj->p == '\0' || (size_t)(pobj->p - pobj->start) >= pobj->len) {
 8001580:	68fb      	ldr	r3, [r7, #12]
 8001582:	689b      	ldr	r3, [r3, #8]
 8001584:	781b      	ldrb	r3, [r3, #0]
 8001586:	2b00      	cmp	r3, #0
 8001588:	d009      	beq.n	800159e <prv_parse_number+0x46>
 800158a:	68fb      	ldr	r3, [r7, #12]
 800158c:	689a      	ldr	r2, [r3, #8]
 800158e:	68fb      	ldr	r3, [r7, #12]
 8001590:	681b      	ldr	r3, [r3, #0]
 8001592:	1ad3      	subs	r3, r2, r3
 8001594:	461a      	mov	r2, r3
 8001596:	68fb      	ldr	r3, [r7, #12]
 8001598:	685b      	ldr	r3, [r3, #4]
 800159a:	429a      	cmp	r2, r3
 800159c:	d301      	bcc.n	80015a2 <prv_parse_number+0x4a>
        return lwjsonERRJSON;
 800159e:	2302      	movs	r3, #2
 80015a0:	e147      	b.n	8001832 <prv_parse_number+0x2da>
    }
    is_minus = *pobj->p == '-' ? (++pobj->p, 1) : 0;
 80015a2:	68fb      	ldr	r3, [r7, #12]
 80015a4:	689b      	ldr	r3, [r3, #8]
 80015a6:	781b      	ldrb	r3, [r3, #0]
 80015a8:	2b2d      	cmp	r3, #45	; 0x2d
 80015aa:	d106      	bne.n	80015ba <prv_parse_number+0x62>
 80015ac:	68fb      	ldr	r3, [r7, #12]
 80015ae:	689b      	ldr	r3, [r3, #8]
 80015b0:	1c5a      	adds	r2, r3, #1
 80015b2:	68fb      	ldr	r3, [r7, #12]
 80015b4:	609a      	str	r2, [r3, #8]
 80015b6:	2301      	movs	r3, #1
 80015b8:	e000      	b.n	80015bc <prv_parse_number+0x64>
 80015ba:	2300      	movs	r3, #0
 80015bc:	74bb      	strb	r3, [r7, #18]
    if (*pobj->p == '\0'                    /* Invalid string */
 80015be:	68fb      	ldr	r3, [r7, #12]
 80015c0:	689b      	ldr	r3, [r3, #8]
 80015c2:	781b      	ldrb	r3, [r3, #0]
 80015c4:	2b00      	cmp	r3, #0
 80015c6:	d01a      	beq.n	80015fe <prv_parse_number+0xa6>
        || *pobj->p < '0' || *pobj->p > '9' /* Character outside number range */
 80015c8:	68fb      	ldr	r3, [r7, #12]
 80015ca:	689b      	ldr	r3, [r3, #8]
 80015cc:	781b      	ldrb	r3, [r3, #0]
 80015ce:	2b2f      	cmp	r3, #47	; 0x2f
 80015d0:	d915      	bls.n	80015fe <prv_parse_number+0xa6>
 80015d2:	68fb      	ldr	r3, [r7, #12]
 80015d4:	689b      	ldr	r3, [r3, #8]
 80015d6:	781b      	ldrb	r3, [r3, #0]
 80015d8:	2b39      	cmp	r3, #57	; 0x39
 80015da:	d810      	bhi.n	80015fe <prv_parse_number+0xa6>
        || (*pobj->p == '0'
 80015dc:	68fb      	ldr	r3, [r7, #12]
 80015de:	689b      	ldr	r3, [r3, #8]
 80015e0:	781b      	ldrb	r3, [r3, #0]
 80015e2:	2b30      	cmp	r3, #48	; 0x30
 80015e4:	d10d      	bne.n	8001602 <prv_parse_number+0xaa>
            && (pobj->p[1] < '0' && pobj->p[1] > '9'))) { /* Number starts with 0 but not followed by dot */
 80015e6:	68fb      	ldr	r3, [r7, #12]
 80015e8:	689b      	ldr	r3, [r3, #8]
 80015ea:	3301      	adds	r3, #1
 80015ec:	781b      	ldrb	r3, [r3, #0]
 80015ee:	2b2f      	cmp	r3, #47	; 0x2f
 80015f0:	d807      	bhi.n	8001602 <prv_parse_number+0xaa>
 80015f2:	68fb      	ldr	r3, [r7, #12]
 80015f4:	689b      	ldr	r3, [r3, #8]
 80015f6:	3301      	adds	r3, #1
 80015f8:	781b      	ldrb	r3, [r3, #0]
 80015fa:	2b39      	cmp	r3, #57	; 0x39
 80015fc:	d901      	bls.n	8001602 <prv_parse_number+0xaa>
        return lwjsonERRJSON;
 80015fe:	2302      	movs	r3, #2
 8001600:	e117      	b.n	8001832 <prv_parse_number+0x2da>
    }

    /* Parse number */
    for (num = 0; *pobj->p >= '0' && *pobj->p <= '9'; ++pobj->p) {
 8001602:	f04f 0300 	mov.w	r3, #0
 8001606:	627b      	str	r3, [r7, #36]	; 0x24
 8001608:	e016      	b.n	8001638 <prv_parse_number+0xe0>
        num = num * 10 + (*pobj->p - '0');
 800160a:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 800160e:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8001612:	ee27 7a87 	vmul.f32	s14, s15, s14
 8001616:	68fb      	ldr	r3, [r7, #12]
 8001618:	689b      	ldr	r3, [r3, #8]
 800161a:	781b      	ldrb	r3, [r3, #0]
 800161c:	3b30      	subs	r3, #48	; 0x30
 800161e:	ee07 3a90 	vmov	s15, r3
 8001622:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001626:	ee77 7a27 	vadd.f32	s15, s14, s15
 800162a:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
    for (num = 0; *pobj->p >= '0' && *pobj->p <= '9'; ++pobj->p) {
 800162e:	68fb      	ldr	r3, [r7, #12]
 8001630:	689b      	ldr	r3, [r3, #8]
 8001632:	1c5a      	adds	r2, r3, #1
 8001634:	68fb      	ldr	r3, [r7, #12]
 8001636:	609a      	str	r2, [r3, #8]
 8001638:	68fb      	ldr	r3, [r7, #12]
 800163a:	689b      	ldr	r3, [r3, #8]
 800163c:	781b      	ldrb	r3, [r3, #0]
 800163e:	2b2f      	cmp	r3, #47	; 0x2f
 8001640:	d904      	bls.n	800164c <prv_parse_number+0xf4>
 8001642:	68fb      	ldr	r3, [r7, #12]
 8001644:	689b      	ldr	r3, [r3, #8]
 8001646:	781b      	ldrb	r3, [r3, #0]
 8001648:	2b39      	cmp	r3, #57	; 0x39
 800164a:	d9de      	bls.n	800160a <prv_parse_number+0xb2>
    }
    if (pobj->p != NULL && *pobj->p == '.') { /* Number has exponent */
 800164c:	68fb      	ldr	r3, [r7, #12]
 800164e:	689b      	ldr	r3, [r3, #8]
 8001650:	2b00      	cmp	r3, #0
 8001652:	d054      	beq.n	80016fe <prv_parse_number+0x1a6>
 8001654:	68fb      	ldr	r3, [r7, #12]
 8001656:	689b      	ldr	r3, [r3, #8]
 8001658:	781b      	ldrb	r3, [r3, #0]
 800165a:	2b2e      	cmp	r3, #46	; 0x2e
 800165c:	d14f      	bne.n	80016fe <prv_parse_number+0x1a6>
        lwjson_real_t exp, dec_num;

        type = LWJSON_TYPE_NUM_REAL;            /* Format is real */
 800165e:	2302      	movs	r3, #2
 8001660:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        ++pobj->p;                              /* Ignore comma character */
 8001664:	68fb      	ldr	r3, [r7, #12]
 8001666:	689b      	ldr	r3, [r3, #8]
 8001668:	1c5a      	adds	r2, r3, #1
 800166a:	68fb      	ldr	r3, [r7, #12]
 800166c:	609a      	str	r2, [r3, #8]
        if (*pobj->p < '0' || *pobj->p > '9') { /* Must be followed by number characters */
 800166e:	68fb      	ldr	r3, [r7, #12]
 8001670:	689b      	ldr	r3, [r3, #8]
 8001672:	781b      	ldrb	r3, [r3, #0]
 8001674:	2b2f      	cmp	r3, #47	; 0x2f
 8001676:	d904      	bls.n	8001682 <prv_parse_number+0x12a>
 8001678:	68fb      	ldr	r3, [r7, #12]
 800167a:	689b      	ldr	r3, [r3, #8]
 800167c:	781b      	ldrb	r3, [r3, #0]
 800167e:	2b39      	cmp	r3, #57	; 0x39
 8001680:	d901      	bls.n	8001686 <prv_parse_number+0x12e>
            return lwjsonERRJSON;
 8001682:	2302      	movs	r3, #2
 8001684:	e0d5      	b.n	8001832 <prv_parse_number+0x2da>
        }
        /* Get number after decimal point */
        for (exp = 1, dec_num = 0; *pobj->p >= '0' && *pobj->p <= '9'; ++pobj->p, exp *= 10) {
 8001686:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 800168a:	61fb      	str	r3, [r7, #28]
 800168c:	f04f 0300 	mov.w	r3, #0
 8001690:	61bb      	str	r3, [r7, #24]
 8001692:	e01e      	b.n	80016d2 <prv_parse_number+0x17a>
            dec_num = dec_num * 10 + (*pobj->p - '0');
 8001694:	edd7 7a06 	vldr	s15, [r7, #24]
 8001698:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 800169c:	ee27 7a87 	vmul.f32	s14, s15, s14
 80016a0:	68fb      	ldr	r3, [r7, #12]
 80016a2:	689b      	ldr	r3, [r3, #8]
 80016a4:	781b      	ldrb	r3, [r3, #0]
 80016a6:	3b30      	subs	r3, #48	; 0x30
 80016a8:	ee07 3a90 	vmov	s15, r3
 80016ac:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80016b0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80016b4:	edc7 7a06 	vstr	s15, [r7, #24]
        for (exp = 1, dec_num = 0; *pobj->p >= '0' && *pobj->p <= '9'; ++pobj->p, exp *= 10) {
 80016b8:	68fb      	ldr	r3, [r7, #12]
 80016ba:	689b      	ldr	r3, [r3, #8]
 80016bc:	1c5a      	adds	r2, r3, #1
 80016be:	68fb      	ldr	r3, [r7, #12]
 80016c0:	609a      	str	r2, [r3, #8]
 80016c2:	edd7 7a07 	vldr	s15, [r7, #28]
 80016c6:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 80016ca:	ee67 7a87 	vmul.f32	s15, s15, s14
 80016ce:	edc7 7a07 	vstr	s15, [r7, #28]
 80016d2:	68fb      	ldr	r3, [r7, #12]
 80016d4:	689b      	ldr	r3, [r3, #8]
 80016d6:	781b      	ldrb	r3, [r3, #0]
 80016d8:	2b2f      	cmp	r3, #47	; 0x2f
 80016da:	d904      	bls.n	80016e6 <prv_parse_number+0x18e>
 80016dc:	68fb      	ldr	r3, [r7, #12]
 80016de:	689b      	ldr	r3, [r3, #8]
 80016e0:	781b      	ldrb	r3, [r3, #0]
 80016e2:	2b39      	cmp	r3, #57	; 0x39
 80016e4:	d9d6      	bls.n	8001694 <prv_parse_number+0x13c>
        }
        num += dec_num / exp; /* Add decimal part to number */
 80016e6:	edd7 6a06 	vldr	s13, [r7, #24]
 80016ea:	ed97 7a07 	vldr	s14, [r7, #28]
 80016ee:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80016f2:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 80016f6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80016fa:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
    }
    if (pobj->p != NULL && (*pobj->p == 'e' || *pobj->p == 'E')) { /* Engineering mode */
 80016fe:	68fb      	ldr	r3, [r7, #12]
 8001700:	689b      	ldr	r3, [r3, #8]
 8001702:	2b00      	cmp	r3, #0
 8001704:	d074      	beq.n	80017f0 <prv_parse_number+0x298>
 8001706:	68fb      	ldr	r3, [r7, #12]
 8001708:	689b      	ldr	r3, [r3, #8]
 800170a:	781b      	ldrb	r3, [r3, #0]
 800170c:	2b65      	cmp	r3, #101	; 0x65
 800170e:	d004      	beq.n	800171a <prv_parse_number+0x1c2>
 8001710:	68fb      	ldr	r3, [r7, #12]
 8001712:	689b      	ldr	r3, [r3, #8]
 8001714:	781b      	ldrb	r3, [r3, #0]
 8001716:	2b45      	cmp	r3, #69	; 0x45
 8001718:	d16a      	bne.n	80017f0 <prv_parse_number+0x298>
        uint8_t is_minus_exp;
        int exp_cnt;

        type = LWJSON_TYPE_NUM_REAL;                         /* Format is real */
 800171a:	2302      	movs	r3, #2
 800171c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        ++pobj->p;                                           /* Ignore enginnering sing part */
 8001720:	68fb      	ldr	r3, [r7, #12]
 8001722:	689b      	ldr	r3, [r3, #8]
 8001724:	1c5a      	adds	r2, r3, #1
 8001726:	68fb      	ldr	r3, [r7, #12]
 8001728:	609a      	str	r2, [r3, #8]
        is_minus_exp = *pobj->p == '-' ? (++pobj->p, 1) : 0; /* Check if negative */
 800172a:	68fb      	ldr	r3, [r7, #12]
 800172c:	689b      	ldr	r3, [r3, #8]
 800172e:	781b      	ldrb	r3, [r3, #0]
 8001730:	2b2d      	cmp	r3, #45	; 0x2d
 8001732:	d106      	bne.n	8001742 <prv_parse_number+0x1ea>
 8001734:	68fb      	ldr	r3, [r7, #12]
 8001736:	689b      	ldr	r3, [r3, #8]
 8001738:	1c5a      	adds	r2, r3, #1
 800173a:	68fb      	ldr	r3, [r7, #12]
 800173c:	609a      	str	r2, [r3, #8]
 800173e:	2301      	movs	r3, #1
 8001740:	e000      	b.n	8001744 <prv_parse_number+0x1ec>
 8001742:	2300      	movs	r3, #0
 8001744:	747b      	strb	r3, [r7, #17]
        if (*pobj->p == '+') {                               /* Optional '+' is possible too */
 8001746:	68fb      	ldr	r3, [r7, #12]
 8001748:	689b      	ldr	r3, [r3, #8]
 800174a:	781b      	ldrb	r3, [r3, #0]
 800174c:	2b2b      	cmp	r3, #43	; 0x2b
 800174e:	d104      	bne.n	800175a <prv_parse_number+0x202>
            ++pobj->p;
 8001750:	68fb      	ldr	r3, [r7, #12]
 8001752:	689b      	ldr	r3, [r3, #8]
 8001754:	1c5a      	adds	r2, r3, #1
 8001756:	68fb      	ldr	r3, [r7, #12]
 8001758:	609a      	str	r2, [r3, #8]
        }
        if (*pobj->p < '0' || *pobj->p > '9') { /* Must be followed by number characters */
 800175a:	68fb      	ldr	r3, [r7, #12]
 800175c:	689b      	ldr	r3, [r3, #8]
 800175e:	781b      	ldrb	r3, [r3, #0]
 8001760:	2b2f      	cmp	r3, #47	; 0x2f
 8001762:	d904      	bls.n	800176e <prv_parse_number+0x216>
 8001764:	68fb      	ldr	r3, [r7, #12]
 8001766:	689b      	ldr	r3, [r3, #8]
 8001768:	781b      	ldrb	r3, [r3, #0]
 800176a:	2b39      	cmp	r3, #57	; 0x39
 800176c:	d901      	bls.n	8001772 <prv_parse_number+0x21a>
            return lwjsonERRJSON;
 800176e:	2302      	movs	r3, #2
 8001770:	e05f      	b.n	8001832 <prv_parse_number+0x2da>
        }

        /* Parse exponent number */
        for (exp_cnt = 0; *pobj->p >= '0' && *pobj->p <= '9'; ++pobj->p) {
 8001772:	2300      	movs	r3, #0
 8001774:	617b      	str	r3, [r7, #20]
 8001776:	e010      	b.n	800179a <prv_parse_number+0x242>
            exp_cnt = exp_cnt * 10 + (*pobj->p - '0');
 8001778:	697a      	ldr	r2, [r7, #20]
 800177a:	4613      	mov	r3, r2
 800177c:	009b      	lsls	r3, r3, #2
 800177e:	4413      	add	r3, r2
 8001780:	005b      	lsls	r3, r3, #1
 8001782:	461a      	mov	r2, r3
 8001784:	68fb      	ldr	r3, [r7, #12]
 8001786:	689b      	ldr	r3, [r3, #8]
 8001788:	781b      	ldrb	r3, [r3, #0]
 800178a:	3b30      	subs	r3, #48	; 0x30
 800178c:	4413      	add	r3, r2
 800178e:	617b      	str	r3, [r7, #20]
        for (exp_cnt = 0; *pobj->p >= '0' && *pobj->p <= '9'; ++pobj->p) {
 8001790:	68fb      	ldr	r3, [r7, #12]
 8001792:	689b      	ldr	r3, [r3, #8]
 8001794:	1c5a      	adds	r2, r3, #1
 8001796:	68fb      	ldr	r3, [r7, #12]
 8001798:	609a      	str	r2, [r3, #8]
 800179a:	68fb      	ldr	r3, [r7, #12]
 800179c:	689b      	ldr	r3, [r3, #8]
 800179e:	781b      	ldrb	r3, [r3, #0]
 80017a0:	2b2f      	cmp	r3, #47	; 0x2f
 80017a2:	d904      	bls.n	80017ae <prv_parse_number+0x256>
 80017a4:	68fb      	ldr	r3, [r7, #12]
 80017a6:	689b      	ldr	r3, [r3, #8]
 80017a8:	781b      	ldrb	r3, [r3, #0]
 80017aa:	2b39      	cmp	r3, #57	; 0x39
 80017ac:	d9e4      	bls.n	8001778 <prv_parse_number+0x220>
        }
        /* Calculate new value for exponent 10^exponent */
        if (is_minus_exp) {
 80017ae:	7c7b      	ldrb	r3, [r7, #17]
 80017b0:	2b00      	cmp	r3, #0
 80017b2:	d01a      	beq.n	80017ea <prv_parse_number+0x292>
            for (; exp_cnt > 0; num /= 10, --exp_cnt) {}
 80017b4:	e00a      	b.n	80017cc <prv_parse_number+0x274>
 80017b6:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 80017ba:	eef2 6a04 	vmov.f32	s13, #36	; 0x41200000  10.0
 80017be:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80017c2:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
 80017c6:	697b      	ldr	r3, [r7, #20]
 80017c8:	3b01      	subs	r3, #1
 80017ca:	617b      	str	r3, [r7, #20]
 80017cc:	697b      	ldr	r3, [r7, #20]
 80017ce:	2b00      	cmp	r3, #0
 80017d0:	dcf1      	bgt.n	80017b6 <prv_parse_number+0x25e>
 80017d2:	e00d      	b.n	80017f0 <prv_parse_number+0x298>
        } else {
            for (; exp_cnt > 0; num *= 10, --exp_cnt) {}
 80017d4:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 80017d8:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 80017dc:	ee67 7a87 	vmul.f32	s15, s15, s14
 80017e0:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
 80017e4:	697b      	ldr	r3, [r7, #20]
 80017e6:	3b01      	subs	r3, #1
 80017e8:	617b      	str	r3, [r7, #20]
 80017ea:	697b      	ldr	r3, [r7, #20]
 80017ec:	2b00      	cmp	r3, #0
 80017ee:	dcf1      	bgt.n	80017d4 <prv_parse_number+0x27c>
        }
    }
    if (is_minus) {
 80017f0:	7cbb      	ldrb	r3, [r7, #18]
 80017f2:	2b00      	cmp	r3, #0
 80017f4:	d005      	beq.n	8001802 <prv_parse_number+0x2aa>
        num = -num;
 80017f6:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 80017fa:	eef1 7a67 	vneg.f32	s15, s15
 80017fe:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
    }

    /* Write output values */
    if (tout != NULL) {
 8001802:	68bb      	ldr	r3, [r7, #8]
 8001804:	2b00      	cmp	r3, #0
 8001806:	d003      	beq.n	8001810 <prv_parse_number+0x2b8>
        *tout = type;
 8001808:	68bb      	ldr	r3, [r7, #8]
 800180a:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 800180e:	701a      	strb	r2, [r3, #0]
    }
    if (type == LWJSON_TYPE_NUM_INT) {
 8001810:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8001814:	2b01      	cmp	r3, #1
 8001816:	d108      	bne.n	800182a <prv_parse_number+0x2d2>
        *iout = (lwjson_int_t)num;
 8001818:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800181a:	f7fe feb1 	bl	8000580 <__aeabi_f2lz>
 800181e:	4602      	mov	r2, r0
 8001820:	460b      	mov	r3, r1
 8001822:	6839      	ldr	r1, [r7, #0]
 8001824:	e9c1 2300 	strd	r2, r3, [r1]
 8001828:	e002      	b.n	8001830 <prv_parse_number+0x2d8>
    } else {
        *fout = num;
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800182e:	601a      	str	r2, [r3, #0]
    }
    return lwjsonOK;
 8001830:	2300      	movs	r3, #0
}
 8001832:	4618      	mov	r0, r3
 8001834:	3728      	adds	r7, #40	; 0x28
 8001836:	46bd      	mov	sp, r7
 8001838:	bd80      	pop	{r7, pc}

0800183a <prv_create_path_segment>:
 * \param[out]      olen: Pointer to variable to write length of segment
 * \param[out]      is_last: Pointer to write if this is last segment
 * \return          `1` on success, `0` otherwise
 */
static uint8_t
prv_create_path_segment(const char** p, const char** opath, size_t* olen, uint8_t* is_last) {
 800183a:	b480      	push	{r7}
 800183c:	b087      	sub	sp, #28
 800183e:	af00      	add	r7, sp, #0
 8001840:	60f8      	str	r0, [r7, #12]
 8001842:	60b9      	str	r1, [r7, #8]
 8001844:	607a      	str	r2, [r7, #4]
 8001846:	603b      	str	r3, [r7, #0]
    const char* s = *p;
 8001848:	68fb      	ldr	r3, [r7, #12]
 800184a:	681b      	ldr	r3, [r3, #0]
 800184c:	617b      	str	r3, [r7, #20]

    *is_last = 0;
 800184e:	683b      	ldr	r3, [r7, #0]
 8001850:	2200      	movs	r2, #0
 8001852:	701a      	strb	r2, [r3, #0]
    *opath = NULL;
 8001854:	68bb      	ldr	r3, [r7, #8]
 8001856:	2200      	movs	r2, #0
 8001858:	601a      	str	r2, [r3, #0]
    *olen = 0;
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	2200      	movs	r2, #0
 800185e:	601a      	str	r2, [r3, #0]

    /* Check input path */
    if (s == NULL || *s == '\0') {
 8001860:	697b      	ldr	r3, [r7, #20]
 8001862:	2b00      	cmp	r3, #0
 8001864:	d003      	beq.n	800186e <prv_create_path_segment+0x34>
 8001866:	697b      	ldr	r3, [r7, #20]
 8001868:	781b      	ldrb	r3, [r3, #0]
 800186a:	2b00      	cmp	r3, #0
 800186c:	d104      	bne.n	8001878 <prv_create_path_segment+0x3e>
        *is_last = 1;
 800186e:	683b      	ldr	r3, [r7, #0]
 8001870:	2201      	movs	r2, #1
 8001872:	701a      	strb	r2, [r3, #0]
        return 0;
 8001874:	2300      	movs	r3, #0
 8001876:	e04c      	b.n	8001912 <prv_create_path_segment+0xd8>
    /*
     * Path must be one of:
     * - literal text
     * - "#" followed by dot "."
     */
    if (*s == '#') {
 8001878:	697b      	ldr	r3, [r7, #20]
 800187a:	781b      	ldrb	r3, [r3, #0]
 800187c:	2b23      	cmp	r3, #35	; 0x23
 800187e:	d125      	bne.n	80018cc <prv_create_path_segment+0x92>
        *opath = s;
 8001880:	68bb      	ldr	r3, [r7, #8]
 8001882:	697a      	ldr	r2, [r7, #20]
 8001884:	601a      	str	r2, [r3, #0]
        for (*olen = 0;; ++s, ++(*olen)) {
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	2200      	movs	r2, #0
 800188a:	601a      	str	r2, [r3, #0]
            if (*s == '.') {
 800188c:	697b      	ldr	r3, [r7, #20]
 800188e:	781b      	ldrb	r3, [r3, #0]
 8001890:	2b2e      	cmp	r3, #46	; 0x2e
 8001892:	d103      	bne.n	800189c <prv_create_path_segment+0x62>
                ++s;
 8001894:	697b      	ldr	r3, [r7, #20]
 8001896:	3301      	adds	r3, #1
 8001898:	617b      	str	r3, [r7, #20]
                break;
 800189a:	e013      	b.n	80018c4 <prv_create_path_segment+0x8a>
            } else if (*s == '\0') {
 800189c:	697b      	ldr	r3, [r7, #20]
 800189e:	781b      	ldrb	r3, [r3, #0]
 80018a0:	2b00      	cmp	r3, #0
 80018a2:	d105      	bne.n	80018b0 <prv_create_path_segment+0x76>
                if (*olen == 1) {
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	681b      	ldr	r3, [r3, #0]
 80018a8:	2b01      	cmp	r3, #1
 80018aa:	d10a      	bne.n	80018c2 <prv_create_path_segment+0x88>
                    return 0;
 80018ac:	2300      	movs	r3, #0
 80018ae:	e030      	b.n	8001912 <prv_create_path_segment+0xd8>
        for (*olen = 0;; ++s, ++(*olen)) {
 80018b0:	697b      	ldr	r3, [r7, #20]
 80018b2:	3301      	adds	r3, #1
 80018b4:	617b      	str	r3, [r7, #20]
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	681b      	ldr	r3, [r3, #0]
 80018ba:	1c5a      	adds	r2, r3, #1
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	601a      	str	r2, [r3, #0]
            if (*s == '.') {
 80018c0:	e7e4      	b.n	800188c <prv_create_path_segment+0x52>
                } else {
                    break;
 80018c2:	bf00      	nop
                }
            }
        }
        *p = s;
 80018c4:	68fb      	ldr	r3, [r7, #12]
 80018c6:	697a      	ldr	r2, [r7, #20]
 80018c8:	601a      	str	r2, [r3, #0]
 80018ca:	e01a      	b.n	8001902 <prv_create_path_segment+0xc8>
    } else {
        *opath = s;
 80018cc:	68bb      	ldr	r3, [r7, #8]
 80018ce:	697a      	ldr	r2, [r7, #20]
 80018d0:	601a      	str	r2, [r3, #0]
        for (*olen = 0; *s != '\0' && *s != '.'; ++(*olen), ++s) {}
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	2200      	movs	r2, #0
 80018d6:	601a      	str	r2, [r3, #0]
 80018d8:	e007      	b.n	80018ea <prv_create_path_segment+0xb0>
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	681b      	ldr	r3, [r3, #0]
 80018de:	1c5a      	adds	r2, r3, #1
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	601a      	str	r2, [r3, #0]
 80018e4:	697b      	ldr	r3, [r7, #20]
 80018e6:	3301      	adds	r3, #1
 80018e8:	617b      	str	r3, [r7, #20]
 80018ea:	697b      	ldr	r3, [r7, #20]
 80018ec:	781b      	ldrb	r3, [r3, #0]
 80018ee:	2b00      	cmp	r3, #0
 80018f0:	d003      	beq.n	80018fa <prv_create_path_segment+0xc0>
 80018f2:	697b      	ldr	r3, [r7, #20]
 80018f4:	781b      	ldrb	r3, [r3, #0]
 80018f6:	2b2e      	cmp	r3, #46	; 0x2e
 80018f8:	d1ef      	bne.n	80018da <prv_create_path_segment+0xa0>
        *p = s + 1;
 80018fa:	697b      	ldr	r3, [r7, #20]
 80018fc:	1c5a      	adds	r2, r3, #1
 80018fe:	68fb      	ldr	r3, [r7, #12]
 8001900:	601a      	str	r2, [r3, #0]
    }
    if (*s == '\0') {
 8001902:	697b      	ldr	r3, [r7, #20]
 8001904:	781b      	ldrb	r3, [r3, #0]
 8001906:	2b00      	cmp	r3, #0
 8001908:	d102      	bne.n	8001910 <prv_create_path_segment+0xd6>
        *is_last = 1;
 800190a:	683b      	ldr	r3, [r7, #0]
 800190c:	2201      	movs	r2, #1
 800190e:	701a      	strb	r2, [r3, #0]
    }
    return 1;
 8001910:	2301      	movs	r3, #1
}
 8001912:	4618      	mov	r0, r3
 8001914:	371c      	adds	r7, #28
 8001916:	46bd      	mov	sp, r7
 8001918:	f85d 7b04 	ldr.w	r7, [sp], #4
 800191c:	4770      	bx	lr

0800191e <prv_find>:
 * \param[in]       parent: Parent token of type \ref LWJSON_TYPE_ARRAY or LWJSON_TYPE_OBJECT
 * \param[in]       path: Path to search for starting this token further
 * \return          Found token on success, `NULL` otherwise
 */
static const lwjson_token_t*
prv_find(const lwjson_token_t* parent, const char* path) {
 800191e:	b580      	push	{r7, lr}
 8001920:	b08e      	sub	sp, #56	; 0x38
 8001922:	af00      	add	r7, sp, #0
 8001924:	6078      	str	r0, [r7, #4]
 8001926:	6039      	str	r1, [r7, #0]
    const char* segment;
    size_t segment_len;
    uint8_t is_last, result;

    /* Get path segments */
    if ((result = prv_create_path_segment(&path, &segment, &segment_len, &is_last)) != 0) {
 8001928:	f107 030f 	add.w	r3, r7, #15
 800192c:	f107 0210 	add.w	r2, r7, #16
 8001930:	f107 0114 	add.w	r1, r7, #20
 8001934:	4638      	mov	r0, r7
 8001936:	f7ff ff80 	bl	800183a <prv_create_path_segment>
 800193a:	4603      	mov	r3, r0
 800193c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8001940:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8001944:	2b00      	cmp	r3, #0
 8001946:	f000 809a 	beq.w	8001a7e <prv_find+0x160>
        /* Check if detected an array request */
        if (*segment == '#') {
 800194a:	697b      	ldr	r3, [r7, #20]
 800194c:	781b      	ldrb	r3, [r3, #0]
 800194e:	2b23      	cmp	r3, #35	; 0x23
 8001950:	d166      	bne.n	8001a20 <prv_find+0x102>
            /* Parent must be array */
            if (parent->type != LWJSON_TYPE_ARRAY) {
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	791b      	ldrb	r3, [r3, #4]
 8001956:	2b04      	cmp	r3, #4
 8001958:	d001      	beq.n	800195e <prv_find+0x40>
                return NULL;
 800195a:	2300      	movs	r3, #0
 800195c:	e090      	b.n	8001a80 <prv_find+0x162>
            }

            /* Check if index requested */
            if (segment_len > 1) {
 800195e:	693b      	ldr	r3, [r7, #16]
 8001960:	2b01      	cmp	r3, #1
 8001962:	d947      	bls.n	80019f4 <prv_find+0xd6>
                const lwjson_token_t* t;
                size_t index = 0;
 8001964:	2300      	movs	r3, #0
 8001966:	633b      	str	r3, [r7, #48]	; 0x30

                /* Parse number */
                for (size_t i = 1; i < segment_len; ++i) {
 8001968:	2301      	movs	r3, #1
 800196a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800196c:	e01d      	b.n	80019aa <prv_find+0x8c>
                    if (segment[i] < '0' || segment[i] > '9') {
 800196e:	697a      	ldr	r2, [r7, #20]
 8001970:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001972:	4413      	add	r3, r2
 8001974:	781b      	ldrb	r3, [r3, #0]
 8001976:	2b2f      	cmp	r3, #47	; 0x2f
 8001978:	d905      	bls.n	8001986 <prv_find+0x68>
 800197a:	697a      	ldr	r2, [r7, #20]
 800197c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800197e:	4413      	add	r3, r2
 8001980:	781b      	ldrb	r3, [r3, #0]
 8001982:	2b39      	cmp	r3, #57	; 0x39
 8001984:	d901      	bls.n	800198a <prv_find+0x6c>
                        return NULL;
 8001986:	2300      	movs	r3, #0
 8001988:	e07a      	b.n	8001a80 <prv_find+0x162>
                    } else {
                        index = index * 10 + (segment[i] - '0');
 800198a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800198c:	4613      	mov	r3, r2
 800198e:	009b      	lsls	r3, r3, #2
 8001990:	4413      	add	r3, r2
 8001992:	005b      	lsls	r3, r3, #1
 8001994:	4619      	mov	r1, r3
 8001996:	697a      	ldr	r2, [r7, #20]
 8001998:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800199a:	4413      	add	r3, r2
 800199c:	781b      	ldrb	r3, [r3, #0]
 800199e:	440b      	add	r3, r1
 80019a0:	3b30      	subs	r3, #48	; 0x30
 80019a2:	633b      	str	r3, [r7, #48]	; 0x30
                for (size_t i = 1; i < segment_len; ++i) {
 80019a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80019a6:	3301      	adds	r3, #1
 80019a8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80019aa:	693b      	ldr	r3, [r7, #16]
 80019ac:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80019ae:	429a      	cmp	r2, r3
 80019b0:	d3dd      	bcc.n	800196e <prv_find+0x50>
                    }
                }

                /* Start from beginning */
                for (t = parent->u.first_child; t != NULL && index > 0; t = t->next, --index) {}
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	691b      	ldr	r3, [r3, #16]
 80019b6:	637b      	str	r3, [r7, #52]	; 0x34
 80019b8:	e005      	b.n	80019c6 <prv_find+0xa8>
 80019ba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80019bc:	681b      	ldr	r3, [r3, #0]
 80019be:	637b      	str	r3, [r7, #52]	; 0x34
 80019c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80019c2:	3b01      	subs	r3, #1
 80019c4:	633b      	str	r3, [r7, #48]	; 0x30
 80019c6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80019c8:	2b00      	cmp	r3, #0
 80019ca:	d002      	beq.n	80019d2 <prv_find+0xb4>
 80019cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80019ce:	2b00      	cmp	r3, #0
 80019d0:	d1f3      	bne.n	80019ba <prv_find+0x9c>
                if (t != NULL) {
 80019d2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80019d4:	2b00      	cmp	r3, #0
 80019d6:	d00b      	beq.n	80019f0 <prv_find+0xd2>
                    if (is_last) {
 80019d8:	7bfb      	ldrb	r3, [r7, #15]
 80019da:	2b00      	cmp	r3, #0
 80019dc:	d001      	beq.n	80019e2 <prv_find+0xc4>
                        return t;
 80019de:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80019e0:	e04e      	b.n	8001a80 <prv_find+0x162>
                    } else {
                        return prv_find(t, path);
 80019e2:	683b      	ldr	r3, [r7, #0]
 80019e4:	4619      	mov	r1, r3
 80019e6:	6b78      	ldr	r0, [r7, #52]	; 0x34
 80019e8:	f7ff ff99 	bl	800191e <prv_find>
 80019ec:	4603      	mov	r3, r0
 80019ee:	e047      	b.n	8001a80 <prv_find+0x162>
                    }
                }
                return NULL;
 80019f0:	2300      	movs	r3, #0
 80019f2:	e045      	b.n	8001a80 <prv_find+0x162>
            }

            /* Scan all indexes and get first match */
            for (const lwjson_token_t *tmp_t, *t = parent->u.first_child; t != NULL; t = t->next) {
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	691b      	ldr	r3, [r3, #16]
 80019f8:	62bb      	str	r3, [r7, #40]	; 0x28
 80019fa:	e00d      	b.n	8001a18 <prv_find+0xfa>
                if ((tmp_t = prv_find(t, path)) != NULL) {
 80019fc:	683b      	ldr	r3, [r7, #0]
 80019fe:	4619      	mov	r1, r3
 8001a00:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8001a02:	f7ff ff8c 	bl	800191e <prv_find>
 8001a06:	61b8      	str	r0, [r7, #24]
 8001a08:	69bb      	ldr	r3, [r7, #24]
 8001a0a:	2b00      	cmp	r3, #0
 8001a0c:	d001      	beq.n	8001a12 <prv_find+0xf4>
                    return tmp_t;
 8001a0e:	69bb      	ldr	r3, [r7, #24]
 8001a10:	e036      	b.n	8001a80 <prv_find+0x162>
            for (const lwjson_token_t *tmp_t, *t = parent->u.first_child; t != NULL; t = t->next) {
 8001a12:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001a14:	681b      	ldr	r3, [r3, #0]
 8001a16:	62bb      	str	r3, [r7, #40]	; 0x28
 8001a18:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001a1a:	2b00      	cmp	r3, #0
 8001a1c:	d1ee      	bne.n	80019fc <prv_find+0xde>
 8001a1e:	e02e      	b.n	8001a7e <prv_find+0x160>
                }
            }
        } else {
            if (parent->type != LWJSON_TYPE_OBJECT) {
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	791b      	ldrb	r3, [r3, #4]
 8001a24:	2b03      	cmp	r3, #3
 8001a26:	d001      	beq.n	8001a2c <prv_find+0x10e>
                return NULL;
 8001a28:	2300      	movs	r3, #0
 8001a2a:	e029      	b.n	8001a80 <prv_find+0x162>
            }
            for (const lwjson_token_t* t = parent->u.first_child; t != NULL; t = t->next) {
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	691b      	ldr	r3, [r3, #16]
 8001a30:	627b      	str	r3, [r7, #36]	; 0x24
 8001a32:	e021      	b.n	8001a78 <prv_find+0x15a>
                if (t->token_name_len == segment_len && !strncmp(t->token_name, segment, segment_len)) {
 8001a34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a36:	68da      	ldr	r2, [r3, #12]
 8001a38:	693b      	ldr	r3, [r7, #16]
 8001a3a:	429a      	cmp	r2, r3
 8001a3c:	d119      	bne.n	8001a72 <prv_find+0x154>
 8001a3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a40:	689b      	ldr	r3, [r3, #8]
 8001a42:	6979      	ldr	r1, [r7, #20]
 8001a44:	693a      	ldr	r2, [r7, #16]
 8001a46:	4618      	mov	r0, r3
 8001a48:	f003 ff08 	bl	800585c <strncmp>
 8001a4c:	4603      	mov	r3, r0
 8001a4e:	2b00      	cmp	r3, #0
 8001a50:	d10f      	bne.n	8001a72 <prv_find+0x154>
                    const lwjson_token_t* tmp_t;
                    if (is_last) {
 8001a52:	7bfb      	ldrb	r3, [r7, #15]
 8001a54:	2b00      	cmp	r3, #0
 8001a56:	d001      	beq.n	8001a5c <prv_find+0x13e>
                        return t;
 8001a58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a5a:	e011      	b.n	8001a80 <prv_find+0x162>
                    }
                    if ((tmp_t = prv_find(t, path)) != NULL) {
 8001a5c:	683b      	ldr	r3, [r7, #0]
 8001a5e:	4619      	mov	r1, r3
 8001a60:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8001a62:	f7ff ff5c 	bl	800191e <prv_find>
 8001a66:	61f8      	str	r0, [r7, #28]
 8001a68:	69fb      	ldr	r3, [r7, #28]
 8001a6a:	2b00      	cmp	r3, #0
 8001a6c:	d001      	beq.n	8001a72 <prv_find+0x154>
                        return tmp_t;
 8001a6e:	69fb      	ldr	r3, [r7, #28]
 8001a70:	e006      	b.n	8001a80 <prv_find+0x162>
            for (const lwjson_token_t* t = parent->u.first_child; t != NULL; t = t->next) {
 8001a72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a74:	681b      	ldr	r3, [r3, #0]
 8001a76:	627b      	str	r3, [r7, #36]	; 0x24
 8001a78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a7a:	2b00      	cmp	r3, #0
 8001a7c:	d1da      	bne.n	8001a34 <prv_find+0x116>
                    }
                }
            }
        }
    }
    return NULL;
 8001a7e:	2300      	movs	r3, #0
}
 8001a80:	4618      	mov	r0, r3
 8001a82:	3738      	adds	r7, #56	; 0x38
 8001a84:	46bd      	mov	sp, r7
 8001a86:	bd80      	pop	{r7, pc}

08001a88 <prv_check_valid_char_after_open_bracket>:
 * \param[in,out]   pobj: JSON string
 * \param[in]       t: Token to check for type
 * \return          \ref lwjsonOK on success, member of \ref lwjsonr_t otherwise
 */
static inline lwjsonr_t
prv_check_valid_char_after_open_bracket(lwjson_int_str_t* pobj, lwjson_token_t* t) {
 8001a88:	b580      	push	{r7, lr}
 8001a8a:	b084      	sub	sp, #16
 8001a8c:	af00      	add	r7, sp, #0
 8001a8e:	6078      	str	r0, [r7, #4]
 8001a90:	6039      	str	r1, [r7, #0]
    lwjsonr_t res;

    /* Check next character after object open */
    if ((res = prv_skip_blank(pobj)) != lwjsonOK) {
 8001a92:	6878      	ldr	r0, [r7, #4]
 8001a94:	f7ff fbef 	bl	8001276 <prv_skip_blank>
 8001a98:	4603      	mov	r3, r0
 8001a9a:	73fb      	strb	r3, [r7, #15]
 8001a9c:	7bfb      	ldrb	r3, [r7, #15]
 8001a9e:	2b00      	cmp	r3, #0
 8001aa0:	d001      	beq.n	8001aa6 <prv_check_valid_char_after_open_bracket+0x1e>
        return res;
 8001aa2:	7bfb      	ldrb	r3, [r7, #15]
 8001aa4:	e04b      	b.n	8001b3e <prv_check_valid_char_after_open_bracket+0xb6>
    }
    if (*pobj->p == '\0' || (t->type == LWJSON_TYPE_OBJECT && (*pobj->p != '"' && *pobj->p != '}'))
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	689b      	ldr	r3, [r3, #8]
 8001aaa:	781b      	ldrb	r3, [r3, #0]
 8001aac:	2b00      	cmp	r3, #0
 8001aae:	d043      	beq.n	8001b38 <prv_check_valid_char_after_open_bracket+0xb0>
 8001ab0:	683b      	ldr	r3, [r7, #0]
 8001ab2:	791b      	ldrb	r3, [r3, #4]
 8001ab4:	2b03      	cmp	r3, #3
 8001ab6:	d109      	bne.n	8001acc <prv_check_valid_char_after_open_bracket+0x44>
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	689b      	ldr	r3, [r3, #8]
 8001abc:	781b      	ldrb	r3, [r3, #0]
 8001abe:	2b22      	cmp	r3, #34	; 0x22
 8001ac0:	d004      	beq.n	8001acc <prv_check_valid_char_after_open_bracket+0x44>
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	689b      	ldr	r3, [r3, #8]
 8001ac6:	781b      	ldrb	r3, [r3, #0]
 8001ac8:	2b7d      	cmp	r3, #125	; 0x7d
 8001aca:	d135      	bne.n	8001b38 <prv_check_valid_char_after_open_bracket+0xb0>
        || (t->type == LWJSON_TYPE_ARRAY
 8001acc:	683b      	ldr	r3, [r7, #0]
 8001ace:	791b      	ldrb	r3, [r3, #4]
 8001ad0:	2b04      	cmp	r3, #4
 8001ad2:	d133      	bne.n	8001b3c <prv_check_valid_char_after_open_bracket+0xb4>
            && (*pobj->p != '"' && *pobj->p != ']' && *pobj->p != '[' && *pobj->p != '{' && *pobj->p != '-'
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	689b      	ldr	r3, [r3, #8]
 8001ad8:	781b      	ldrb	r3, [r3, #0]
 8001ada:	2b22      	cmp	r3, #34	; 0x22
 8001adc:	d02e      	beq.n	8001b3c <prv_check_valid_char_after_open_bracket+0xb4>
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	689b      	ldr	r3, [r3, #8]
 8001ae2:	781b      	ldrb	r3, [r3, #0]
 8001ae4:	2b5d      	cmp	r3, #93	; 0x5d
 8001ae6:	d029      	beq.n	8001b3c <prv_check_valid_char_after_open_bracket+0xb4>
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	689b      	ldr	r3, [r3, #8]
 8001aec:	781b      	ldrb	r3, [r3, #0]
 8001aee:	2b5b      	cmp	r3, #91	; 0x5b
 8001af0:	d024      	beq.n	8001b3c <prv_check_valid_char_after_open_bracket+0xb4>
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	689b      	ldr	r3, [r3, #8]
 8001af6:	781b      	ldrb	r3, [r3, #0]
 8001af8:	2b7b      	cmp	r3, #123	; 0x7b
 8001afa:	d01f      	beq.n	8001b3c <prv_check_valid_char_after_open_bracket+0xb4>
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	689b      	ldr	r3, [r3, #8]
 8001b00:	781b      	ldrb	r3, [r3, #0]
 8001b02:	2b2d      	cmp	r3, #45	; 0x2d
 8001b04:	d01a      	beq.n	8001b3c <prv_check_valid_char_after_open_bracket+0xb4>
                && (*pobj->p < '0' || *pobj->p > '9') && *pobj->p != 't' && *pobj->p != 'n' && *pobj->p != 'f'))) {
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	689b      	ldr	r3, [r3, #8]
 8001b0a:	781b      	ldrb	r3, [r3, #0]
 8001b0c:	2b2f      	cmp	r3, #47	; 0x2f
 8001b0e:	d904      	bls.n	8001b1a <prv_check_valid_char_after_open_bracket+0x92>
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	689b      	ldr	r3, [r3, #8]
 8001b14:	781b      	ldrb	r3, [r3, #0]
 8001b16:	2b39      	cmp	r3, #57	; 0x39
 8001b18:	d910      	bls.n	8001b3c <prv_check_valid_char_after_open_bracket+0xb4>
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	689b      	ldr	r3, [r3, #8]
 8001b1e:	781b      	ldrb	r3, [r3, #0]
 8001b20:	2b74      	cmp	r3, #116	; 0x74
 8001b22:	d00b      	beq.n	8001b3c <prv_check_valid_char_after_open_bracket+0xb4>
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	689b      	ldr	r3, [r3, #8]
 8001b28:	781b      	ldrb	r3, [r3, #0]
 8001b2a:	2b6e      	cmp	r3, #110	; 0x6e
 8001b2c:	d006      	beq.n	8001b3c <prv_check_valid_char_after_open_bracket+0xb4>
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	689b      	ldr	r3, [r3, #8]
 8001b32:	781b      	ldrb	r3, [r3, #0]
 8001b34:	2b66      	cmp	r3, #102	; 0x66
 8001b36:	d001      	beq.n	8001b3c <prv_check_valid_char_after_open_bracket+0xb4>
        res = lwjsonERRJSON;
 8001b38:	2302      	movs	r3, #2
 8001b3a:	73fb      	strb	r3, [r7, #15]
    }
    return res;
 8001b3c:	7bfb      	ldrb	r3, [r7, #15]
}
 8001b3e:	4618      	mov	r0, r3
 8001b40:	3710      	adds	r7, #16
 8001b42:	46bd      	mov	sp, r7
 8001b44:	bd80      	pop	{r7, pc}

08001b46 <lwjson_init>:
 * \param[in]       tokens: Pointer to array of tokens used for parsing
 * \param[in]       tokens_len: Number of tokens
 * \return          \ref lwjsonOK on success, member of \ref lwjsonr_t otherwise
 */
lwjsonr_t
lwjson_init(lwjson_t* lwobj, lwjson_token_t* tokens, size_t tokens_len) {
 8001b46:	b580      	push	{r7, lr}
 8001b48:	b084      	sub	sp, #16
 8001b4a:	af00      	add	r7, sp, #0
 8001b4c:	60f8      	str	r0, [r7, #12]
 8001b4e:	60b9      	str	r1, [r7, #8]
 8001b50:	607a      	str	r2, [r7, #4]
    memset(lwobj, 0x00, sizeof(*lwobj));
 8001b52:	2230      	movs	r2, #48	; 0x30
 8001b54:	2100      	movs	r1, #0
 8001b56:	68f8      	ldr	r0, [r7, #12]
 8001b58:	f003 fe78 	bl	800584c <memset>
    memset(tokens, 0x00, sizeof(*tokens) * tokens_len);
 8001b5c:	687a      	ldr	r2, [r7, #4]
 8001b5e:	4613      	mov	r3, r2
 8001b60:	005b      	lsls	r3, r3, #1
 8001b62:	4413      	add	r3, r2
 8001b64:	00db      	lsls	r3, r3, #3
 8001b66:	461a      	mov	r2, r3
 8001b68:	2100      	movs	r1, #0
 8001b6a:	68b8      	ldr	r0, [r7, #8]
 8001b6c:	f003 fe6e 	bl	800584c <memset>
    lwobj->tokens = tokens;
 8001b70:	68fb      	ldr	r3, [r7, #12]
 8001b72:	68ba      	ldr	r2, [r7, #8]
 8001b74:	601a      	str	r2, [r3, #0]
    lwobj->tokens_len = tokens_len;
 8001b76:	68fb      	ldr	r3, [r7, #12]
 8001b78:	687a      	ldr	r2, [r7, #4]
 8001b7a:	605a      	str	r2, [r3, #4]
    lwobj->first_token.type = LWJSON_TYPE_OBJECT;
 8001b7c:	68fb      	ldr	r3, [r7, #12]
 8001b7e:	2203      	movs	r2, #3
 8001b80:	751a      	strb	r2, [r3, #20]
    return lwjsonOK;
 8001b82:	2300      	movs	r3, #0
}
 8001b84:	4618      	mov	r0, r3
 8001b86:	3710      	adds	r7, #16
 8001b88:	46bd      	mov	sp, r7
 8001b8a:	bd80      	pop	{r7, pc}

08001b8c <lwjson_parse_ex>:
 * \param[in]       json_data: JSON string to parse
 * \param[in]       jsonČlen: JSON data length
 * \return          \ref lwjsonOK on success, member of \ref lwjsonr_t otherwise
 */
lwjsonr_t
lwjson_parse_ex(lwjson_t* lwobj, const void* json_data, size_t json_len) {
 8001b8c:	b580      	push	{r7, lr}
 8001b8e:	b08c      	sub	sp, #48	; 0x30
 8001b90:	af00      	add	r7, sp, #0
 8001b92:	60f8      	str	r0, [r7, #12]
 8001b94:	60b9      	str	r1, [r7, #8]
 8001b96:	607a      	str	r2, [r7, #4]
    lwjsonr_t res = lwjsonOK;
 8001b98:	2300      	movs	r3, #0
 8001b9a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    lwjson_token_t *t, *to;
    lwjson_int_str_t pobj = {.start = json_data, .len = json_len, .p = json_data};
 8001b9e:	68bb      	ldr	r3, [r7, #8]
 8001ba0:	613b      	str	r3, [r7, #16]
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	617b      	str	r3, [r7, #20]
 8001ba6:	68bb      	ldr	r3, [r7, #8]
 8001ba8:	61bb      	str	r3, [r7, #24]

    /* Check input parameters */
    if (lwobj == NULL || json_data == NULL || json_len == 0) {
 8001baa:	68fb      	ldr	r3, [r7, #12]
 8001bac:	2b00      	cmp	r3, #0
 8001bae:	d005      	beq.n	8001bbc <lwjson_parse_ex+0x30>
 8001bb0:	68bb      	ldr	r3, [r7, #8]
 8001bb2:	2b00      	cmp	r3, #0
 8001bb4:	d002      	beq.n	8001bbc <lwjson_parse_ex+0x30>
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	2b00      	cmp	r3, #0
 8001bba:	d103      	bne.n	8001bc4 <lwjson_parse_ex+0x38>
        res = lwjsonERRPAR;
 8001bbc:	2304      	movs	r3, #4
 8001bbe:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
        goto ret;
 8001bc2:	e22a      	b.n	800201a <lwjson_parse_ex+0x48e>
    }

    /* set first token */
    to = &lwobj->first_token;
 8001bc4:	68fb      	ldr	r3, [r7, #12]
 8001bc6:	3310      	adds	r3, #16
 8001bc8:	62bb      	str	r3, [r7, #40]	; 0x28

    /* values from very beginning */
    lwobj->flags.parsed = 0;
 8001bca:	68fa      	ldr	r2, [r7, #12]
 8001bcc:	f892 3028 	ldrb.w	r3, [r2, #40]	; 0x28
 8001bd0:	f36f 0300 	bfc	r3, #0, #1
 8001bd4:	f882 3028 	strb.w	r3, [r2, #40]	; 0x28
    lwobj->next_free_token_pos = 0;
 8001bd8:	68fb      	ldr	r3, [r7, #12]
 8001bda:	2200      	movs	r2, #0
 8001bdc:	609a      	str	r2, [r3, #8]
    memset(to, 0x00, sizeof(*to));
 8001bde:	2218      	movs	r2, #24
 8001be0:	2100      	movs	r1, #0
 8001be2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8001be4:	f003 fe32 	bl	800584c <memset>

    /* First parse */
    if ((res = prv_skip_blank(&pobj)) != lwjsonOK) {
 8001be8:	f107 0310 	add.w	r3, r7, #16
 8001bec:	4618      	mov	r0, r3
 8001bee:	f7ff fb42 	bl	8001276 <prv_skip_blank>
 8001bf2:	4603      	mov	r3, r0
 8001bf4:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8001bf8:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8001bfc:	2b00      	cmp	r3, #0
 8001bfe:	f040 81fd 	bne.w	8001ffc <lwjson_parse_ex+0x470>
        goto ret;
    }
    if (*pobj.p == '{') {
 8001c02:	69bb      	ldr	r3, [r7, #24]
 8001c04:	781b      	ldrb	r3, [r3, #0]
 8001c06:	2b7b      	cmp	r3, #123	; 0x7b
 8001c08:	d103      	bne.n	8001c12 <lwjson_parse_ex+0x86>
        to->type = LWJSON_TYPE_OBJECT;
 8001c0a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001c0c:	2203      	movs	r2, #3
 8001c0e:	711a      	strb	r2, [r3, #4]
 8001c10:	e00b      	b.n	8001c2a <lwjson_parse_ex+0x9e>
    } else if (*pobj.p == '[') {
 8001c12:	69bb      	ldr	r3, [r7, #24]
 8001c14:	781b      	ldrb	r3, [r3, #0]
 8001c16:	2b5b      	cmp	r3, #91	; 0x5b
 8001c18:	d103      	bne.n	8001c22 <lwjson_parse_ex+0x96>
        to->type = LWJSON_TYPE_ARRAY;
 8001c1a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001c1c:	2204      	movs	r2, #4
 8001c1e:	711a      	strb	r2, [r3, #4]
 8001c20:	e003      	b.n	8001c2a <lwjson_parse_ex+0x9e>
    } else {
        res = lwjsonERRJSON;
 8001c22:	2302      	movs	r3, #2
 8001c24:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
        goto ret;
 8001c28:	e1f7      	b.n	800201a <lwjson_parse_ex+0x48e>
    }
    ++pobj.p;
 8001c2a:	69bb      	ldr	r3, [r7, #24]
 8001c2c:	3301      	adds	r3, #1
 8001c2e:	61bb      	str	r3, [r7, #24]
    if ((res = prv_check_valid_char_after_open_bracket(&pobj, to)) != lwjsonOK) {
 8001c30:	f107 0310 	add.w	r3, r7, #16
 8001c34:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001c36:	4618      	mov	r0, r3
 8001c38:	f7ff ff26 	bl	8001a88 <prv_check_valid_char_after_open_bracket>
 8001c3c:	4603      	mov	r3, r0
 8001c3e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8001c42:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8001c46:	2b00      	cmp	r3, #0
 8001c48:	f040 81da 	bne.w	8002000 <lwjson_parse_ex+0x474>
        goto ret;
    }

    /* Process all characters as indicated by input user */
    while (pobj.p != NULL && *pobj.p != '\0' && (size_t)(pobj.p - pobj.start) < pobj.len) {
 8001c4c:	e1a1      	b.n	8001f92 <lwjson_parse_ex+0x406>
        /* Filter out blanks */
        if ((res = prv_skip_blank(&pobj)) != lwjsonOK) {
 8001c4e:	f107 0310 	add.w	r3, r7, #16
 8001c52:	4618      	mov	r0, r3
 8001c54:	f7ff fb0f 	bl	8001276 <prv_skip_blank>
 8001c58:	4603      	mov	r3, r0
 8001c5a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8001c5e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8001c62:	2b00      	cmp	r3, #0
 8001c64:	f040 81ce 	bne.w	8002004 <lwjson_parse_ex+0x478>
            goto ret;
        }
        if (*pobj.p == ',') {
 8001c68:	69bb      	ldr	r3, [r7, #24]
 8001c6a:	781b      	ldrb	r3, [r3, #0]
 8001c6c:	2b2c      	cmp	r3, #44	; 0x2c
 8001c6e:	d103      	bne.n	8001c78 <lwjson_parse_ex+0xec>
            ++pobj.p;
 8001c70:	69bb      	ldr	r3, [r7, #24]
 8001c72:	3301      	adds	r3, #1
 8001c74:	61bb      	str	r3, [r7, #24]
            continue;
 8001c76:	e18c      	b.n	8001f92 <lwjson_parse_ex+0x406>
        }

        /* Check if end of object or array*/
        if (*pobj.p == (to->type == LWJSON_TYPE_OBJECT ? '}' : ']')) {
 8001c78:	69bb      	ldr	r3, [r7, #24]
 8001c7a:	781b      	ldrb	r3, [r3, #0]
 8001c7c:	461a      	mov	r2, r3
 8001c7e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001c80:	791b      	ldrb	r3, [r3, #4]
 8001c82:	2b03      	cmp	r3, #3
 8001c84:	d101      	bne.n	8001c8a <lwjson_parse_ex+0xfe>
 8001c86:	237d      	movs	r3, #125	; 0x7d
 8001c88:	e000      	b.n	8001c8c <lwjson_parse_ex+0x100>
 8001c8a:	235d      	movs	r3, #93	; 0x5d
 8001c8c:	4293      	cmp	r3, r2
 8001c8e:	d126      	bne.n	8001cde <lwjson_parse_ex+0x152>
            lwjson_token_t* parent = to->next;
 8001c90:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001c92:	681b      	ldr	r3, [r3, #0]
 8001c94:	61fb      	str	r3, [r7, #28]
            to->next = NULL;
 8001c96:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001c98:	2200      	movs	r2, #0
 8001c9a:	601a      	str	r2, [r3, #0]
            ++pobj.p;
 8001c9c:	69bb      	ldr	r3, [r7, #24]
 8001c9e:	3301      	adds	r3, #1
 8001ca0:	61bb      	str	r3, [r7, #24]

            /* End of string if to == NULL (no parent), check if properly terminated */
            if ((to = parent) == NULL) {
 8001ca2:	69fb      	ldr	r3, [r7, #28]
 8001ca4:	62bb      	str	r3, [r7, #40]	; 0x28
 8001ca6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001ca8:	2b00      	cmp	r3, #0
 8001caa:	f040 8172 	bne.w	8001f92 <lwjson_parse_ex+0x406>
                prv_skip_blank(&pobj);
 8001cae:	f107 0310 	add.w	r3, r7, #16
 8001cb2:	4618      	mov	r0, r3
 8001cb4:	f7ff fadf 	bl	8001276 <prv_skip_blank>
                res = (pobj.p == NULL || *pobj.p == '\0' || (size_t)(pobj.p - pobj.start) == pobj.len) ? lwjsonOK
 8001cb8:	69bb      	ldr	r3, [r7, #24]
                                                                                                       : lwjsonERR;
 8001cba:	2b00      	cmp	r3, #0
 8001cbc:	d00b      	beq.n	8001cd6 <lwjson_parse_ex+0x14a>
                res = (pobj.p == NULL || *pobj.p == '\0' || (size_t)(pobj.p - pobj.start) == pobj.len) ? lwjsonOK
 8001cbe:	69bb      	ldr	r3, [r7, #24]
 8001cc0:	781b      	ldrb	r3, [r3, #0]
 8001cc2:	2b00      	cmp	r3, #0
 8001cc4:	d007      	beq.n	8001cd6 <lwjson_parse_ex+0x14a>
 8001cc6:	69ba      	ldr	r2, [r7, #24]
 8001cc8:	693b      	ldr	r3, [r7, #16]
 8001cca:	1ad3      	subs	r3, r2, r3
 8001ccc:	697a      	ldr	r2, [r7, #20]
                                                                                                       : lwjsonERR;
 8001cce:	4293      	cmp	r3, r2
 8001cd0:	d001      	beq.n	8001cd6 <lwjson_parse_ex+0x14a>
 8001cd2:	2301      	movs	r3, #1
 8001cd4:	e000      	b.n	8001cd8 <lwjson_parse_ex+0x14c>
 8001cd6:	2300      	movs	r3, #0
                res = (pobj.p == NULL || *pobj.p == '\0' || (size_t)(pobj.p - pobj.start) == pobj.len) ? lwjsonOK
 8001cd8:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
                goto ret;
 8001cdc:	e19d      	b.n	800201a <lwjson_parse_ex+0x48e>
            }
            continue;
        }

        /* Allocate new token */
        if ((t = prv_alloc_token(lwobj)) == NULL) {
 8001cde:	68f8      	ldr	r0, [r7, #12]
 8001ce0:	f7ff fa9f 	bl	8001222 <prv_alloc_token>
 8001ce4:	6238      	str	r0, [r7, #32]
 8001ce6:	6a3b      	ldr	r3, [r7, #32]
 8001ce8:	2b00      	cmp	r3, #0
 8001cea:	d103      	bne.n	8001cf4 <lwjson_parse_ex+0x168>
            res = lwjsonERRMEM;
 8001cec:	2303      	movs	r3, #3
 8001cee:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
            goto ret;
 8001cf2:	e192      	b.n	800201a <lwjson_parse_ex+0x48e>
        }

        /* If object type is not array, first thing is property that starts with quotes */
        if (to->type != LWJSON_TYPE_ARRAY) {
 8001cf4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001cf6:	791b      	ldrb	r3, [r3, #4]
 8001cf8:	2b04      	cmp	r3, #4
 8001cfa:	d015      	beq.n	8001d28 <lwjson_parse_ex+0x19c>
            if (*pobj.p != '"') {
 8001cfc:	69bb      	ldr	r3, [r7, #24]
 8001cfe:	781b      	ldrb	r3, [r3, #0]
 8001d00:	2b22      	cmp	r3, #34	; 0x22
 8001d02:	d003      	beq.n	8001d0c <lwjson_parse_ex+0x180>
                res = lwjsonERRJSON;
 8001d04:	2302      	movs	r3, #2
 8001d06:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
                goto ret;
 8001d0a:	e186      	b.n	800201a <lwjson_parse_ex+0x48e>
            }
            if ((res = prv_parse_property_name(&pobj, t)) != lwjsonOK) {
 8001d0c:	f107 0310 	add.w	r3, r7, #16
 8001d10:	6a39      	ldr	r1, [r7, #32]
 8001d12:	4618      	mov	r0, r3
 8001d14:	f7ff fbe8 	bl	80014e8 <prv_parse_property_name>
 8001d18:	4603      	mov	r3, r0
 8001d1a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8001d1e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8001d22:	2b00      	cmp	r3, #0
 8001d24:	f040 8170 	bne.w	8002008 <lwjson_parse_ex+0x47c>
                goto ret;
            }
        }

        /* Add element to linked list */
        if (to->u.first_child == NULL) {
 8001d28:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001d2a:	691b      	ldr	r3, [r3, #16]
 8001d2c:	2b00      	cmp	r3, #0
 8001d2e:	d103      	bne.n	8001d38 <lwjson_parse_ex+0x1ac>
            to->u.first_child = t;
 8001d30:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001d32:	6a3a      	ldr	r2, [r7, #32]
 8001d34:	611a      	str	r2, [r3, #16]
 8001d36:	e00d      	b.n	8001d54 <lwjson_parse_ex+0x1c8>
        } else {
            lwjson_token_t* c;
            for (c = to->u.first_child; c->next != NULL; c = c->next) {}
 8001d38:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001d3a:	691b      	ldr	r3, [r3, #16]
 8001d3c:	627b      	str	r3, [r7, #36]	; 0x24
 8001d3e:	e002      	b.n	8001d46 <lwjson_parse_ex+0x1ba>
 8001d40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d42:	681b      	ldr	r3, [r3, #0]
 8001d44:	627b      	str	r3, [r7, #36]	; 0x24
 8001d46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d48:	681b      	ldr	r3, [r3, #0]
 8001d4a:	2b00      	cmp	r3, #0
 8001d4c:	d1f8      	bne.n	8001d40 <lwjson_parse_ex+0x1b4>
            c->next = t;
 8001d4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d50:	6a3a      	ldr	r2, [r7, #32]
 8001d52:	601a      	str	r2, [r3, #0]
        }

        /* Check next character to process */
        switch (*pobj.p) {
 8001d54:	69bb      	ldr	r3, [r7, #24]
 8001d56:	781b      	ldrb	r3, [r3, #0]
 8001d58:	2b22      	cmp	r3, #34	; 0x22
 8001d5a:	d071      	beq.n	8001e40 <lwjson_parse_ex+0x2b4>
 8001d5c:	2b22      	cmp	r3, #34	; 0x22
 8001d5e:	f2c0 80c2 	blt.w	8001ee6 <lwjson_parse_ex+0x35a>
 8001d62:	2b7b      	cmp	r3, #123	; 0x7b
 8001d64:	f300 80bf 	bgt.w	8001ee6 <lwjson_parse_ex+0x35a>
 8001d68:	2b5b      	cmp	r3, #91	; 0x5b
 8001d6a:	f2c0 80bc 	blt.w	8001ee6 <lwjson_parse_ex+0x35a>
 8001d6e:	3b5b      	subs	r3, #91	; 0x5b
 8001d70:	2b20      	cmp	r3, #32
 8001d72:	f200 80b8 	bhi.w	8001ee6 <lwjson_parse_ex+0x35a>
 8001d76:	a201      	add	r2, pc, #4	; (adr r2, 8001d7c <lwjson_parse_ex+0x1f0>)
 8001d78:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001d7c:	08001e01 	.word	0x08001e01
 8001d80:	08001ee7 	.word	0x08001ee7
 8001d84:	08001ee7 	.word	0x08001ee7
 8001d88:	08001ee7 	.word	0x08001ee7
 8001d8c:	08001ee7 	.word	0x08001ee7
 8001d90:	08001ee7 	.word	0x08001ee7
 8001d94:	08001ee7 	.word	0x08001ee7
 8001d98:	08001ee7 	.word	0x08001ee7
 8001d9c:	08001ee7 	.word	0x08001ee7
 8001da0:	08001ee7 	.word	0x08001ee7
 8001da4:	08001ee7 	.word	0x08001ee7
 8001da8:	08001e97 	.word	0x08001e97
 8001dac:	08001ee7 	.word	0x08001ee7
 8001db0:	08001ee7 	.word	0x08001ee7
 8001db4:	08001ee7 	.word	0x08001ee7
 8001db8:	08001ee7 	.word	0x08001ee7
 8001dbc:	08001ee7 	.word	0x08001ee7
 8001dc0:	08001ee7 	.word	0x08001ee7
 8001dc4:	08001ee7 	.word	0x08001ee7
 8001dc8:	08001ebf 	.word	0x08001ebf
 8001dcc:	08001ee7 	.word	0x08001ee7
 8001dd0:	08001ee7 	.word	0x08001ee7
 8001dd4:	08001ee7 	.word	0x08001ee7
 8001dd8:	08001ee7 	.word	0x08001ee7
 8001ddc:	08001ee7 	.word	0x08001ee7
 8001de0:	08001e6f 	.word	0x08001e6f
 8001de4:	08001ee7 	.word	0x08001ee7
 8001de8:	08001ee7 	.word	0x08001ee7
 8001dec:	08001ee7 	.word	0x08001ee7
 8001df0:	08001ee7 	.word	0x08001ee7
 8001df4:	08001ee7 	.word	0x08001ee7
 8001df8:	08001ee7 	.word	0x08001ee7
 8001dfc:	08001e01 	.word	0x08001e01
            case '{':
            case '[':
                t->type = *pobj.p == '{' ? LWJSON_TYPE_OBJECT : LWJSON_TYPE_ARRAY;
 8001e00:	69bb      	ldr	r3, [r7, #24]
 8001e02:	781b      	ldrb	r3, [r3, #0]
 8001e04:	2b7b      	cmp	r3, #123	; 0x7b
 8001e06:	d101      	bne.n	8001e0c <lwjson_parse_ex+0x280>
 8001e08:	2203      	movs	r2, #3
 8001e0a:	e000      	b.n	8001e0e <lwjson_parse_ex+0x282>
 8001e0c:	2204      	movs	r2, #4
 8001e0e:	6a3b      	ldr	r3, [r7, #32]
 8001e10:	711a      	strb	r2, [r3, #4]
                ++pobj.p;
 8001e12:	69bb      	ldr	r3, [r7, #24]
 8001e14:	3301      	adds	r3, #1
 8001e16:	61bb      	str	r3, [r7, #24]
                if ((res = prv_check_valid_char_after_open_bracket(&pobj, t)) != lwjsonOK) {
 8001e18:	f107 0310 	add.w	r3, r7, #16
 8001e1c:	6a39      	ldr	r1, [r7, #32]
 8001e1e:	4618      	mov	r0, r3
 8001e20:	f7ff fe32 	bl	8001a88 <prv_check_valid_char_after_open_bracket>
 8001e24:	4603      	mov	r3, r0
 8001e26:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8001e2a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8001e2e:	2b00      	cmp	r3, #0
 8001e30:	f040 80ec 	bne.w	800200c <lwjson_parse_ex+0x480>
                    goto ret;
                }
                t->next = to; /* Temporary saved as parent object */
 8001e34:	6a3b      	ldr	r3, [r7, #32]
 8001e36:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001e38:	601a      	str	r2, [r3, #0]
                to = t;
 8001e3a:	6a3b      	ldr	r3, [r7, #32]
 8001e3c:	62bb      	str	r3, [r7, #40]	; 0x28
                break;
 8001e3e:	e075      	b.n	8001f2c <lwjson_parse_ex+0x3a0>
            case '"':
                if ((res = prv_parse_string(&pobj, &t->u.str.token_value, &t->u.str.token_value_len)) == lwjsonOK) {
 8001e40:	6a3b      	ldr	r3, [r7, #32]
 8001e42:	f103 0110 	add.w	r1, r3, #16
 8001e46:	6a3b      	ldr	r3, [r7, #32]
 8001e48:	f103 0214 	add.w	r2, r3, #20
 8001e4c:	f107 0310 	add.w	r3, r7, #16
 8001e50:	4618      	mov	r0, r3
 8001e52:	f7ff fa63 	bl	800131c <prv_parse_string>
 8001e56:	4603      	mov	r3, r0
 8001e58:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8001e5c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8001e60:	2b00      	cmp	r3, #0
 8001e62:	f040 80d5 	bne.w	8002010 <lwjson_parse_ex+0x484>
                    t->type = LWJSON_TYPE_STRING;
 8001e66:	6a3b      	ldr	r3, [r7, #32]
 8001e68:	2200      	movs	r2, #0
 8001e6a:	711a      	strb	r2, [r3, #4]
                } else {
                    goto ret;
                }
                break;
 8001e6c:	e05e      	b.n	8001f2c <lwjson_parse_ex+0x3a0>
            case 't':
                /* RFC4627 is lower-case only */
                if (strncmp(pobj.p, "true", 4) == 0) {
 8001e6e:	69bb      	ldr	r3, [r7, #24]
 8001e70:	2204      	movs	r2, #4
 8001e72:	4972      	ldr	r1, [pc, #456]	; (800203c <lwjson_parse_ex+0x4b0>)
 8001e74:	4618      	mov	r0, r3
 8001e76:	f003 fcf1 	bl	800585c <strncmp>
 8001e7a:	4603      	mov	r3, r0
 8001e7c:	2b00      	cmp	r3, #0
 8001e7e:	d106      	bne.n	8001e8e <lwjson_parse_ex+0x302>
                    t->type = LWJSON_TYPE_TRUE;
 8001e80:	6a3b      	ldr	r3, [r7, #32]
 8001e82:	2205      	movs	r2, #5
 8001e84:	711a      	strb	r2, [r3, #4]
                    pobj.p += 4;
 8001e86:	69bb      	ldr	r3, [r7, #24]
 8001e88:	3304      	adds	r3, #4
 8001e8a:	61bb      	str	r3, [r7, #24]
                } else {
                    res = lwjsonERRJSON;
                    goto ret;
                }
                break;
 8001e8c:	e04e      	b.n	8001f2c <lwjson_parse_ex+0x3a0>
                    res = lwjsonERRJSON;
 8001e8e:	2302      	movs	r3, #2
 8001e90:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
                    goto ret;
 8001e94:	e0c1      	b.n	800201a <lwjson_parse_ex+0x48e>
            case 'f':
                /* RFC4627 is lower-case only */
                if (strncmp(pobj.p, "false", 5) == 0) {
 8001e96:	69bb      	ldr	r3, [r7, #24]
 8001e98:	2205      	movs	r2, #5
 8001e9a:	4969      	ldr	r1, [pc, #420]	; (8002040 <lwjson_parse_ex+0x4b4>)
 8001e9c:	4618      	mov	r0, r3
 8001e9e:	f003 fcdd 	bl	800585c <strncmp>
 8001ea2:	4603      	mov	r3, r0
 8001ea4:	2b00      	cmp	r3, #0
 8001ea6:	d106      	bne.n	8001eb6 <lwjson_parse_ex+0x32a>
                    t->type = LWJSON_TYPE_FALSE;
 8001ea8:	6a3b      	ldr	r3, [r7, #32]
 8001eaa:	2206      	movs	r2, #6
 8001eac:	711a      	strb	r2, [r3, #4]
                    pobj.p += 5;
 8001eae:	69bb      	ldr	r3, [r7, #24]
 8001eb0:	3305      	adds	r3, #5
 8001eb2:	61bb      	str	r3, [r7, #24]
                } else {
                    res = lwjsonERRJSON;
                    goto ret;
                }
                break;
 8001eb4:	e03a      	b.n	8001f2c <lwjson_parse_ex+0x3a0>
                    res = lwjsonERRJSON;
 8001eb6:	2302      	movs	r3, #2
 8001eb8:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
                    goto ret;
 8001ebc:	e0ad      	b.n	800201a <lwjson_parse_ex+0x48e>
            case 'n':
                /* RFC4627 is lower-case only */
                if (strncmp(pobj.p, "null", 4) == 0) {
 8001ebe:	69bb      	ldr	r3, [r7, #24]
 8001ec0:	2204      	movs	r2, #4
 8001ec2:	4960      	ldr	r1, [pc, #384]	; (8002044 <lwjson_parse_ex+0x4b8>)
 8001ec4:	4618      	mov	r0, r3
 8001ec6:	f003 fcc9 	bl	800585c <strncmp>
 8001eca:	4603      	mov	r3, r0
 8001ecc:	2b00      	cmp	r3, #0
 8001ece:	d106      	bne.n	8001ede <lwjson_parse_ex+0x352>
                    t->type = LWJSON_TYPE_NULL;
 8001ed0:	6a3b      	ldr	r3, [r7, #32]
 8001ed2:	2207      	movs	r2, #7
 8001ed4:	711a      	strb	r2, [r3, #4]
                    pobj.p += 4;
 8001ed6:	69bb      	ldr	r3, [r7, #24]
 8001ed8:	3304      	adds	r3, #4
 8001eda:	61bb      	str	r3, [r7, #24]
                } else {
                    res = lwjsonERRJSON;
                    goto ret;
                }
                break;
 8001edc:	e026      	b.n	8001f2c <lwjson_parse_ex+0x3a0>
                    res = lwjsonERRJSON;
 8001ede:	2302      	movs	r3, #2
 8001ee0:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
                    goto ret;
 8001ee4:	e099      	b.n	800201a <lwjson_parse_ex+0x48e>
            default:
                if (*pobj.p == '-' || (*pobj.p >= '0' && *pobj.p <= '9')) {
 8001ee6:	69bb      	ldr	r3, [r7, #24]
 8001ee8:	781b      	ldrb	r3, [r3, #0]
 8001eea:	2b2d      	cmp	r3, #45	; 0x2d
 8001eec:	d007      	beq.n	8001efe <lwjson_parse_ex+0x372>
 8001eee:	69bb      	ldr	r3, [r7, #24]
 8001ef0:	781b      	ldrb	r3, [r3, #0]
 8001ef2:	2b2f      	cmp	r3, #47	; 0x2f
 8001ef4:	d915      	bls.n	8001f22 <lwjson_parse_ex+0x396>
 8001ef6:	69bb      	ldr	r3, [r7, #24]
 8001ef8:	781b      	ldrb	r3, [r3, #0]
 8001efa:	2b39      	cmp	r3, #57	; 0x39
 8001efc:	d811      	bhi.n	8001f22 <lwjson_parse_ex+0x396>
                    if (prv_parse_number(&pobj, &t->type, &t->u.num_real, &t->u.num_int) != lwjsonOK) {
 8001efe:	6a3b      	ldr	r3, [r7, #32]
 8001f00:	1d19      	adds	r1, r3, #4
 8001f02:	6a3b      	ldr	r3, [r7, #32]
 8001f04:	f103 0210 	add.w	r2, r3, #16
 8001f08:	6a3b      	ldr	r3, [r7, #32]
 8001f0a:	3310      	adds	r3, #16
 8001f0c:	f107 0010 	add.w	r0, r7, #16
 8001f10:	f7ff fb22 	bl	8001558 <prv_parse_number>
 8001f14:	4603      	mov	r3, r0
 8001f16:	2b00      	cmp	r3, #0
 8001f18:	d007      	beq.n	8001f2a <lwjson_parse_ex+0x39e>
                        res = lwjsonERRJSON;
 8001f1a:	2302      	movs	r3, #2
 8001f1c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
                        goto ret;
 8001f20:	e07b      	b.n	800201a <lwjson_parse_ex+0x48e>
                    }
                } else {
                    res = lwjsonERRJSON;
 8001f22:	2302      	movs	r3, #2
 8001f24:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
                    goto ret;
 8001f28:	e077      	b.n	800201a <lwjson_parse_ex+0x48e>
                }
                break;
 8001f2a:	bf00      	nop
        }

        /* Below code is used to check characters after valid tokens */
        if (t->type == LWJSON_TYPE_ARRAY || t->type == LWJSON_TYPE_OBJECT) {
 8001f2c:	6a3b      	ldr	r3, [r7, #32]
 8001f2e:	791b      	ldrb	r3, [r3, #4]
 8001f30:	2b04      	cmp	r3, #4
 8001f32:	d02e      	beq.n	8001f92 <lwjson_parse_ex+0x406>
 8001f34:	6a3b      	ldr	r3, [r7, #32]
 8001f36:	791b      	ldrb	r3, [r3, #4]
 8001f38:	2b03      	cmp	r3, #3
 8001f3a:	d100      	bne.n	8001f3e <lwjson_parse_ex+0x3b2>
            continue;
 8001f3c:	e029      	b.n	8001f92 <lwjson_parse_ex+0x406>
         * blank characters, followed by one of below options:
         *  - Comma separator for next token
         *  - End of array indication
         *  - End of object indication
         */
        if ((res = prv_skip_blank(&pobj)) != lwjsonOK) {
 8001f3e:	f107 0310 	add.w	r3, r7, #16
 8001f42:	4618      	mov	r0, r3
 8001f44:	f7ff f997 	bl	8001276 <prv_skip_blank>
 8001f48:	4603      	mov	r3, r0
 8001f4a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8001f4e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8001f52:	2b00      	cmp	r3, #0
 8001f54:	d15e      	bne.n	8002014 <lwjson_parse_ex+0x488>
            goto ret;
        }
        /* Check if valid string is availabe after */
        if (pobj.p == NULL || *pobj.p == '\0' || (*pobj.p != ',' && *pobj.p != ']' && *pobj.p != '}')) {
 8001f56:	69bb      	ldr	r3, [r7, #24]
 8001f58:	2b00      	cmp	r3, #0
 8001f5a:	d00f      	beq.n	8001f7c <lwjson_parse_ex+0x3f0>
 8001f5c:	69bb      	ldr	r3, [r7, #24]
 8001f5e:	781b      	ldrb	r3, [r3, #0]
 8001f60:	2b00      	cmp	r3, #0
 8001f62:	d00b      	beq.n	8001f7c <lwjson_parse_ex+0x3f0>
 8001f64:	69bb      	ldr	r3, [r7, #24]
 8001f66:	781b      	ldrb	r3, [r3, #0]
 8001f68:	2b2c      	cmp	r3, #44	; 0x2c
 8001f6a:	d00b      	beq.n	8001f84 <lwjson_parse_ex+0x3f8>
 8001f6c:	69bb      	ldr	r3, [r7, #24]
 8001f6e:	781b      	ldrb	r3, [r3, #0]
 8001f70:	2b5d      	cmp	r3, #93	; 0x5d
 8001f72:	d007      	beq.n	8001f84 <lwjson_parse_ex+0x3f8>
 8001f74:	69bb      	ldr	r3, [r7, #24]
 8001f76:	781b      	ldrb	r3, [r3, #0]
 8001f78:	2b7d      	cmp	r3, #125	; 0x7d
 8001f7a:	d003      	beq.n	8001f84 <lwjson_parse_ex+0x3f8>
            res = lwjsonERRJSON;
 8001f7c:	2302      	movs	r3, #2
 8001f7e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
            goto ret;
 8001f82:	e04a      	b.n	800201a <lwjson_parse_ex+0x48e>
        } else if (*pobj.p == ',') { /* Check to advance to next token immediatey */
 8001f84:	69bb      	ldr	r3, [r7, #24]
 8001f86:	781b      	ldrb	r3, [r3, #0]
 8001f88:	2b2c      	cmp	r3, #44	; 0x2c
 8001f8a:	d102      	bne.n	8001f92 <lwjson_parse_ex+0x406>
            ++pobj.p;
 8001f8c:	69bb      	ldr	r3, [r7, #24]
 8001f8e:	3301      	adds	r3, #1
 8001f90:	61bb      	str	r3, [r7, #24]
    while (pobj.p != NULL && *pobj.p != '\0' && (size_t)(pobj.p - pobj.start) < pobj.len) {
 8001f92:	69bb      	ldr	r3, [r7, #24]
 8001f94:	2b00      	cmp	r3, #0
 8001f96:	d00b      	beq.n	8001fb0 <lwjson_parse_ex+0x424>
 8001f98:	69bb      	ldr	r3, [r7, #24]
 8001f9a:	781b      	ldrb	r3, [r3, #0]
 8001f9c:	2b00      	cmp	r3, #0
 8001f9e:	d007      	beq.n	8001fb0 <lwjson_parse_ex+0x424>
 8001fa0:	69ba      	ldr	r2, [r7, #24]
 8001fa2:	693b      	ldr	r3, [r7, #16]
 8001fa4:	1ad3      	subs	r3, r2, r3
 8001fa6:	461a      	mov	r2, r3
 8001fa8:	697b      	ldr	r3, [r7, #20]
 8001faa:	429a      	cmp	r2, r3
 8001fac:	f4ff ae4f 	bcc.w	8001c4e <lwjson_parse_ex+0xc2>
        }
    }
    if (to != &lwobj->first_token || (to != NULL && to->next != NULL)) {
 8001fb0:	68fb      	ldr	r3, [r7, #12]
 8001fb2:	3310      	adds	r3, #16
 8001fb4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001fb6:	429a      	cmp	r2, r3
 8001fb8:	d106      	bne.n	8001fc8 <lwjson_parse_ex+0x43c>
 8001fba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001fbc:	2b00      	cmp	r3, #0
 8001fbe:	d008      	beq.n	8001fd2 <lwjson_parse_ex+0x446>
 8001fc0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001fc2:	681b      	ldr	r3, [r3, #0]
 8001fc4:	2b00      	cmp	r3, #0
 8001fc6:	d004      	beq.n	8001fd2 <lwjson_parse_ex+0x446>
        res = lwjsonERRJSON;
 8001fc8:	2302      	movs	r3, #2
 8001fca:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
        to = NULL;
 8001fce:	2300      	movs	r3, #0
 8001fd0:	62bb      	str	r3, [r7, #40]	; 0x28
    }
    if (to != NULL) {
 8001fd2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001fd4:	2b00      	cmp	r3, #0
 8001fd6:	d01f      	beq.n	8002018 <lwjson_parse_ex+0x48c>
        if (to->type != LWJSON_TYPE_ARRAY && to->type != LWJSON_TYPE_OBJECT) {
 8001fd8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001fda:	791b      	ldrb	r3, [r3, #4]
 8001fdc:	2b04      	cmp	r3, #4
 8001fde:	d006      	beq.n	8001fee <lwjson_parse_ex+0x462>
 8001fe0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001fe2:	791b      	ldrb	r3, [r3, #4]
 8001fe4:	2b03      	cmp	r3, #3
 8001fe6:	d002      	beq.n	8001fee <lwjson_parse_ex+0x462>
            res = lwjsonERRJSON;
 8001fe8:	2302      	movs	r3, #2
 8001fea:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
        }
        to->token_name = NULL;
 8001fee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001ff0:	2200      	movs	r2, #0
 8001ff2:	609a      	str	r2, [r3, #8]
        to->token_name_len = 0;
 8001ff4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001ff6:	2200      	movs	r2, #0
 8001ff8:	60da      	str	r2, [r3, #12]
 8001ffa:	e00e      	b.n	800201a <lwjson_parse_ex+0x48e>
        goto ret;
 8001ffc:	bf00      	nop
 8001ffe:	e00c      	b.n	800201a <lwjson_parse_ex+0x48e>
        goto ret;
 8002000:	bf00      	nop
 8002002:	e00a      	b.n	800201a <lwjson_parse_ex+0x48e>
            goto ret;
 8002004:	bf00      	nop
 8002006:	e008      	b.n	800201a <lwjson_parse_ex+0x48e>
                goto ret;
 8002008:	bf00      	nop
 800200a:	e006      	b.n	800201a <lwjson_parse_ex+0x48e>
                    goto ret;
 800200c:	bf00      	nop
 800200e:	e004      	b.n	800201a <lwjson_parse_ex+0x48e>
                    goto ret;
 8002010:	bf00      	nop
 8002012:	e002      	b.n	800201a <lwjson_parse_ex+0x48e>
            goto ret;
 8002014:	bf00      	nop
 8002016:	e000      	b.n	800201a <lwjson_parse_ex+0x48e>
    }
ret:
 8002018:	bf00      	nop
    if (res == lwjsonOK) {
 800201a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800201e:	2b00      	cmp	r3, #0
 8002020:	d106      	bne.n	8002030 <lwjson_parse_ex+0x4a4>
        lwobj->flags.parsed = 1;
 8002022:	68fa      	ldr	r2, [r7, #12]
 8002024:	f892 3028 	ldrb.w	r3, [r2, #40]	; 0x28
 8002028:	f043 0301 	orr.w	r3, r3, #1
 800202c:	f882 3028 	strb.w	r3, [r2, #40]	; 0x28
    }
    return res;
 8002030:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8002034:	4618      	mov	r0, r3
 8002036:	3730      	adds	r7, #48	; 0x30
 8002038:	46bd      	mov	sp, r7
 800203a:	bd80      	pop	{r7, pc}
 800203c:	080058bc 	.word	0x080058bc
 8002040:	080058c4 	.word	0x080058c4
 8002044:	080058cc 	.word	0x080058cc

08002048 <lwjson_parse>:
 * \param[in,out]   lwobj: LwJSON instance
 * \param[in]       json_str: JSON string to parse
 * \return          \ref lwjsonOK on success, member of \ref lwjsonr_t otherwise
 */
lwjsonr_t
lwjson_parse(lwjson_t* lwobj, const char* json_str) {
 8002048:	b580      	push	{r7, lr}
 800204a:	b082      	sub	sp, #8
 800204c:	af00      	add	r7, sp, #0
 800204e:	6078      	str	r0, [r7, #4]
 8002050:	6039      	str	r1, [r7, #0]
    return lwjson_parse_ex(lwobj, json_str, strlen(json_str));
 8002052:	6838      	ldr	r0, [r7, #0]
 8002054:	f7fe f8b8 	bl	80001c8 <strlen>
 8002058:	4603      	mov	r3, r0
 800205a:	461a      	mov	r2, r3
 800205c:	6839      	ldr	r1, [r7, #0]
 800205e:	6878      	ldr	r0, [r7, #4]
 8002060:	f7ff fd94 	bl	8001b8c <lwjson_parse_ex>
 8002064:	4603      	mov	r3, r0
}
 8002066:	4618      	mov	r0, r3
 8002068:	3708      	adds	r7, #8
 800206a:	46bd      	mov	sp, r7
 800206c:	bd80      	pop	{r7, pc}

0800206e <lwjson_free>:
 * \brief           Free token instances (specially used in case of dynamic memory allocation)
 * \param[in,out]   lwobj: LwJSON instance
 * \return          \ref lwjsonOK on success, member of \ref lwjsonr_t otherwise
 */
lwjsonr_t
lwjson_free(lwjson_t* lwobj) {
 800206e:	b580      	push	{r7, lr}
 8002070:	b082      	sub	sp, #8
 8002072:	af00      	add	r7, sp, #0
 8002074:	6078      	str	r0, [r7, #4]
    memset(lwobj->tokens, 0x00, sizeof(*lwobj->tokens) * lwobj->tokens_len);
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	6818      	ldr	r0, [r3, #0]
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	685a      	ldr	r2, [r3, #4]
 800207e:	4613      	mov	r3, r2
 8002080:	005b      	lsls	r3, r3, #1
 8002082:	4413      	add	r3, r2
 8002084:	00db      	lsls	r3, r3, #3
 8002086:	461a      	mov	r2, r3
 8002088:	2100      	movs	r1, #0
 800208a:	f003 fbdf 	bl	800584c <memset>
    lwobj->flags.parsed = 0;
 800208e:	687a      	ldr	r2, [r7, #4]
 8002090:	f892 3028 	ldrb.w	r3, [r2, #40]	; 0x28
 8002094:	f36f 0300 	bfc	r3, #0, #1
 8002098:	f882 3028 	strb.w	r3, [r2, #40]	; 0x28
    return lwjsonOK;
 800209c:	2300      	movs	r3, #0
}
 800209e:	4618      	mov	r0, r3
 80020a0:	3708      	adds	r7, #8
 80020a2:	46bd      	mov	sp, r7
 80020a4:	bd80      	pop	{r7, pc}

080020a6 <lwjson_find>:
 * \param[in]       lwobj: JSON instance with parsed JSON string
 * \param[in]       path: Path with dot-separated entries to search for the JSON key to return
 * \return          Pointer to found token on success, `NULL` if token cannot be found
 */
const lwjson_token_t*
lwjson_find(lwjson_t* lwobj, const char* path) {
 80020a6:	b580      	push	{r7, lr}
 80020a8:	b082      	sub	sp, #8
 80020aa:	af00      	add	r7, sp, #0
 80020ac:	6078      	str	r0, [r7, #4]
 80020ae:	6039      	str	r1, [r7, #0]
    if (lwobj == NULL || !lwobj->flags.parsed || path == NULL) {
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	2b00      	cmp	r3, #0
 80020b4:	d00a      	beq.n	80020cc <lwjson_find+0x26>
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80020bc:	f003 0301 	and.w	r3, r3, #1
 80020c0:	b2db      	uxtb	r3, r3
 80020c2:	2b00      	cmp	r3, #0
 80020c4:	d002      	beq.n	80020cc <lwjson_find+0x26>
 80020c6:	683b      	ldr	r3, [r7, #0]
 80020c8:	2b00      	cmp	r3, #0
 80020ca:	d101      	bne.n	80020d0 <lwjson_find+0x2a>
        return NULL;
 80020cc:	2300      	movs	r3, #0
 80020ce:	e00b      	b.n	80020e8 <lwjson_find+0x42>
    }
    return prv_find(lwjson_get_first_token(lwobj), path);
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	2b00      	cmp	r3, #0
 80020d4:	d002      	beq.n	80020dc <lwjson_find+0x36>
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	3310      	adds	r3, #16
 80020da:	e000      	b.n	80020de <lwjson_find+0x38>
 80020dc:	2300      	movs	r3, #0
 80020de:	6839      	ldr	r1, [r7, #0]
 80020e0:	4618      	mov	r0, r3
 80020e2:	f7ff fc1c 	bl	800191e <prv_find>
 80020e6:	4603      	mov	r3, r0
}
 80020e8:	4618      	mov	r0, r3
 80020ea:	3708      	adds	r7, #8
 80020ec:	46bd      	mov	sp, r7
 80020ee:	bd80      	pop	{r7, pc}

080020f0 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80020f0:	b580      	push	{r7, lr}
 80020f2:	b082      	sub	sp, #8
 80020f4:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80020f6:	2300      	movs	r3, #0
 80020f8:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80020fa:	4b0c      	ldr	r3, [pc, #48]	; (800212c <HAL_Init+0x3c>)
 80020fc:	681b      	ldr	r3, [r3, #0]
 80020fe:	4a0b      	ldr	r2, [pc, #44]	; (800212c <HAL_Init+0x3c>)
 8002100:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002104:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002106:	2003      	movs	r0, #3
 8002108:	f000 f93e 	bl	8002388 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800210c:	2000      	movs	r0, #0
 800210e:	f000 f80f 	bl	8002130 <HAL_InitTick>
 8002112:	4603      	mov	r3, r0
 8002114:	2b00      	cmp	r3, #0
 8002116:	d002      	beq.n	800211e <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8002118:	2301      	movs	r3, #1
 800211a:	71fb      	strb	r3, [r7, #7]
 800211c:	e001      	b.n	8002122 <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 800211e:	f7fe ff19 	bl	8000f54 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8002122:	79fb      	ldrb	r3, [r7, #7]
}
 8002124:	4618      	mov	r0, r3
 8002126:	3708      	adds	r7, #8
 8002128:	46bd      	mov	sp, r7
 800212a:	bd80      	pop	{r7, pc}
 800212c:	40022000 	.word	0x40022000

08002130 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002130:	b580      	push	{r7, lr}
 8002132:	b084      	sub	sp, #16
 8002134:	af00      	add	r7, sp, #0
 8002136:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8002138:	2300      	movs	r3, #0
 800213a:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 800213c:	4b17      	ldr	r3, [pc, #92]	; (800219c <HAL_InitTick+0x6c>)
 800213e:	781b      	ldrb	r3, [r3, #0]
 8002140:	2b00      	cmp	r3, #0
 8002142:	d023      	beq.n	800218c <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8002144:	4b16      	ldr	r3, [pc, #88]	; (80021a0 <HAL_InitTick+0x70>)
 8002146:	681a      	ldr	r2, [r3, #0]
 8002148:	4b14      	ldr	r3, [pc, #80]	; (800219c <HAL_InitTick+0x6c>)
 800214a:	781b      	ldrb	r3, [r3, #0]
 800214c:	4619      	mov	r1, r3
 800214e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002152:	fbb3 f3f1 	udiv	r3, r3, r1
 8002156:	fbb2 f3f3 	udiv	r3, r2, r3
 800215a:	4618      	mov	r0, r3
 800215c:	f000 f949 	bl	80023f2 <HAL_SYSTICK_Config>
 8002160:	4603      	mov	r3, r0
 8002162:	2b00      	cmp	r3, #0
 8002164:	d10f      	bne.n	8002186 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	2b0f      	cmp	r3, #15
 800216a:	d809      	bhi.n	8002180 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800216c:	2200      	movs	r2, #0
 800216e:	6879      	ldr	r1, [r7, #4]
 8002170:	f04f 30ff 	mov.w	r0, #4294967295
 8002174:	f000 f913 	bl	800239e <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8002178:	4a0a      	ldr	r2, [pc, #40]	; (80021a4 <HAL_InitTick+0x74>)
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	6013      	str	r3, [r2, #0]
 800217e:	e007      	b.n	8002190 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8002180:	2301      	movs	r3, #1
 8002182:	73fb      	strb	r3, [r7, #15]
 8002184:	e004      	b.n	8002190 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8002186:	2301      	movs	r3, #1
 8002188:	73fb      	strb	r3, [r7, #15]
 800218a:	e001      	b.n	8002190 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 800218c:	2301      	movs	r3, #1
 800218e:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8002190:	7bfb      	ldrb	r3, [r7, #15]
}
 8002192:	4618      	mov	r0, r3
 8002194:	3710      	adds	r7, #16
 8002196:	46bd      	mov	sp, r7
 8002198:	bd80      	pop	{r7, pc}
 800219a:	bf00      	nop
 800219c:	20000008 	.word	0x20000008
 80021a0:	20000000 	.word	0x20000000
 80021a4:	20000004 	.word	0x20000004

080021a8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80021a8:	b480      	push	{r7}
 80021aa:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80021ac:	4b06      	ldr	r3, [pc, #24]	; (80021c8 <HAL_IncTick+0x20>)
 80021ae:	781b      	ldrb	r3, [r3, #0]
 80021b0:	461a      	mov	r2, r3
 80021b2:	4b06      	ldr	r3, [pc, #24]	; (80021cc <HAL_IncTick+0x24>)
 80021b4:	681b      	ldr	r3, [r3, #0]
 80021b6:	4413      	add	r3, r2
 80021b8:	4a04      	ldr	r2, [pc, #16]	; (80021cc <HAL_IncTick+0x24>)
 80021ba:	6013      	str	r3, [r2, #0]
}
 80021bc:	bf00      	nop
 80021be:	46bd      	mov	sp, r7
 80021c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021c4:	4770      	bx	lr
 80021c6:	bf00      	nop
 80021c8:	20000008 	.word	0x20000008
 80021cc:	20000e2c 	.word	0x20000e2c

080021d0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80021d0:	b480      	push	{r7}
 80021d2:	af00      	add	r7, sp, #0
  return uwTick;
 80021d4:	4b03      	ldr	r3, [pc, #12]	; (80021e4 <HAL_GetTick+0x14>)
 80021d6:	681b      	ldr	r3, [r3, #0]
}
 80021d8:	4618      	mov	r0, r3
 80021da:	46bd      	mov	sp, r7
 80021dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021e0:	4770      	bx	lr
 80021e2:	bf00      	nop
 80021e4:	20000e2c 	.word	0x20000e2c

080021e8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80021e8:	b480      	push	{r7}
 80021ea:	b085      	sub	sp, #20
 80021ec:	af00      	add	r7, sp, #0
 80021ee:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	f003 0307 	and.w	r3, r3, #7
 80021f6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80021f8:	4b0c      	ldr	r3, [pc, #48]	; (800222c <__NVIC_SetPriorityGrouping+0x44>)
 80021fa:	68db      	ldr	r3, [r3, #12]
 80021fc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80021fe:	68ba      	ldr	r2, [r7, #8]
 8002200:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002204:	4013      	ands	r3, r2
 8002206:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002208:	68fb      	ldr	r3, [r7, #12]
 800220a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800220c:	68bb      	ldr	r3, [r7, #8]
 800220e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002210:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002214:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002218:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800221a:	4a04      	ldr	r2, [pc, #16]	; (800222c <__NVIC_SetPriorityGrouping+0x44>)
 800221c:	68bb      	ldr	r3, [r7, #8]
 800221e:	60d3      	str	r3, [r2, #12]
}
 8002220:	bf00      	nop
 8002222:	3714      	adds	r7, #20
 8002224:	46bd      	mov	sp, r7
 8002226:	f85d 7b04 	ldr.w	r7, [sp], #4
 800222a:	4770      	bx	lr
 800222c:	e000ed00 	.word	0xe000ed00

08002230 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002230:	b480      	push	{r7}
 8002232:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002234:	4b04      	ldr	r3, [pc, #16]	; (8002248 <__NVIC_GetPriorityGrouping+0x18>)
 8002236:	68db      	ldr	r3, [r3, #12]
 8002238:	0a1b      	lsrs	r3, r3, #8
 800223a:	f003 0307 	and.w	r3, r3, #7
}
 800223e:	4618      	mov	r0, r3
 8002240:	46bd      	mov	sp, r7
 8002242:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002246:	4770      	bx	lr
 8002248:	e000ed00 	.word	0xe000ed00

0800224c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800224c:	b480      	push	{r7}
 800224e:	b083      	sub	sp, #12
 8002250:	af00      	add	r7, sp, #0
 8002252:	4603      	mov	r3, r0
 8002254:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002256:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800225a:	2b00      	cmp	r3, #0
 800225c:	db0b      	blt.n	8002276 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800225e:	79fb      	ldrb	r3, [r7, #7]
 8002260:	f003 021f 	and.w	r2, r3, #31
 8002264:	4907      	ldr	r1, [pc, #28]	; (8002284 <__NVIC_EnableIRQ+0x38>)
 8002266:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800226a:	095b      	lsrs	r3, r3, #5
 800226c:	2001      	movs	r0, #1
 800226e:	fa00 f202 	lsl.w	r2, r0, r2
 8002272:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002276:	bf00      	nop
 8002278:	370c      	adds	r7, #12
 800227a:	46bd      	mov	sp, r7
 800227c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002280:	4770      	bx	lr
 8002282:	bf00      	nop
 8002284:	e000e100 	.word	0xe000e100

08002288 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002288:	b480      	push	{r7}
 800228a:	b083      	sub	sp, #12
 800228c:	af00      	add	r7, sp, #0
 800228e:	4603      	mov	r3, r0
 8002290:	6039      	str	r1, [r7, #0]
 8002292:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002294:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002298:	2b00      	cmp	r3, #0
 800229a:	db0a      	blt.n	80022b2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800229c:	683b      	ldr	r3, [r7, #0]
 800229e:	b2da      	uxtb	r2, r3
 80022a0:	490c      	ldr	r1, [pc, #48]	; (80022d4 <__NVIC_SetPriority+0x4c>)
 80022a2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80022a6:	0112      	lsls	r2, r2, #4
 80022a8:	b2d2      	uxtb	r2, r2
 80022aa:	440b      	add	r3, r1
 80022ac:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80022b0:	e00a      	b.n	80022c8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80022b2:	683b      	ldr	r3, [r7, #0]
 80022b4:	b2da      	uxtb	r2, r3
 80022b6:	4908      	ldr	r1, [pc, #32]	; (80022d8 <__NVIC_SetPriority+0x50>)
 80022b8:	79fb      	ldrb	r3, [r7, #7]
 80022ba:	f003 030f 	and.w	r3, r3, #15
 80022be:	3b04      	subs	r3, #4
 80022c0:	0112      	lsls	r2, r2, #4
 80022c2:	b2d2      	uxtb	r2, r2
 80022c4:	440b      	add	r3, r1
 80022c6:	761a      	strb	r2, [r3, #24]
}
 80022c8:	bf00      	nop
 80022ca:	370c      	adds	r7, #12
 80022cc:	46bd      	mov	sp, r7
 80022ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022d2:	4770      	bx	lr
 80022d4:	e000e100 	.word	0xe000e100
 80022d8:	e000ed00 	.word	0xe000ed00

080022dc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80022dc:	b480      	push	{r7}
 80022de:	b089      	sub	sp, #36	; 0x24
 80022e0:	af00      	add	r7, sp, #0
 80022e2:	60f8      	str	r0, [r7, #12]
 80022e4:	60b9      	str	r1, [r7, #8]
 80022e6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80022e8:	68fb      	ldr	r3, [r7, #12]
 80022ea:	f003 0307 	and.w	r3, r3, #7
 80022ee:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80022f0:	69fb      	ldr	r3, [r7, #28]
 80022f2:	f1c3 0307 	rsb	r3, r3, #7
 80022f6:	2b04      	cmp	r3, #4
 80022f8:	bf28      	it	cs
 80022fa:	2304      	movcs	r3, #4
 80022fc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80022fe:	69fb      	ldr	r3, [r7, #28]
 8002300:	3304      	adds	r3, #4
 8002302:	2b06      	cmp	r3, #6
 8002304:	d902      	bls.n	800230c <NVIC_EncodePriority+0x30>
 8002306:	69fb      	ldr	r3, [r7, #28]
 8002308:	3b03      	subs	r3, #3
 800230a:	e000      	b.n	800230e <NVIC_EncodePriority+0x32>
 800230c:	2300      	movs	r3, #0
 800230e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002310:	f04f 32ff 	mov.w	r2, #4294967295
 8002314:	69bb      	ldr	r3, [r7, #24]
 8002316:	fa02 f303 	lsl.w	r3, r2, r3
 800231a:	43da      	mvns	r2, r3
 800231c:	68bb      	ldr	r3, [r7, #8]
 800231e:	401a      	ands	r2, r3
 8002320:	697b      	ldr	r3, [r7, #20]
 8002322:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002324:	f04f 31ff 	mov.w	r1, #4294967295
 8002328:	697b      	ldr	r3, [r7, #20]
 800232a:	fa01 f303 	lsl.w	r3, r1, r3
 800232e:	43d9      	mvns	r1, r3
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002334:	4313      	orrs	r3, r2
         );
}
 8002336:	4618      	mov	r0, r3
 8002338:	3724      	adds	r7, #36	; 0x24
 800233a:	46bd      	mov	sp, r7
 800233c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002340:	4770      	bx	lr
	...

08002344 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002344:	b580      	push	{r7, lr}
 8002346:	b082      	sub	sp, #8
 8002348:	af00      	add	r7, sp, #0
 800234a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	3b01      	subs	r3, #1
 8002350:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002354:	d301      	bcc.n	800235a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002356:	2301      	movs	r3, #1
 8002358:	e00f      	b.n	800237a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800235a:	4a0a      	ldr	r2, [pc, #40]	; (8002384 <SysTick_Config+0x40>)
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	3b01      	subs	r3, #1
 8002360:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002362:	210f      	movs	r1, #15
 8002364:	f04f 30ff 	mov.w	r0, #4294967295
 8002368:	f7ff ff8e 	bl	8002288 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800236c:	4b05      	ldr	r3, [pc, #20]	; (8002384 <SysTick_Config+0x40>)
 800236e:	2200      	movs	r2, #0
 8002370:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002372:	4b04      	ldr	r3, [pc, #16]	; (8002384 <SysTick_Config+0x40>)
 8002374:	2207      	movs	r2, #7
 8002376:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002378:	2300      	movs	r3, #0
}
 800237a:	4618      	mov	r0, r3
 800237c:	3708      	adds	r7, #8
 800237e:	46bd      	mov	sp, r7
 8002380:	bd80      	pop	{r7, pc}
 8002382:	bf00      	nop
 8002384:	e000e010 	.word	0xe000e010

08002388 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002388:	b580      	push	{r7, lr}
 800238a:	b082      	sub	sp, #8
 800238c:	af00      	add	r7, sp, #0
 800238e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002390:	6878      	ldr	r0, [r7, #4]
 8002392:	f7ff ff29 	bl	80021e8 <__NVIC_SetPriorityGrouping>
}
 8002396:	bf00      	nop
 8002398:	3708      	adds	r7, #8
 800239a:	46bd      	mov	sp, r7
 800239c:	bd80      	pop	{r7, pc}

0800239e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800239e:	b580      	push	{r7, lr}
 80023a0:	b086      	sub	sp, #24
 80023a2:	af00      	add	r7, sp, #0
 80023a4:	4603      	mov	r3, r0
 80023a6:	60b9      	str	r1, [r7, #8]
 80023a8:	607a      	str	r2, [r7, #4]
 80023aa:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80023ac:	2300      	movs	r3, #0
 80023ae:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80023b0:	f7ff ff3e 	bl	8002230 <__NVIC_GetPriorityGrouping>
 80023b4:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80023b6:	687a      	ldr	r2, [r7, #4]
 80023b8:	68b9      	ldr	r1, [r7, #8]
 80023ba:	6978      	ldr	r0, [r7, #20]
 80023bc:	f7ff ff8e 	bl	80022dc <NVIC_EncodePriority>
 80023c0:	4602      	mov	r2, r0
 80023c2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80023c6:	4611      	mov	r1, r2
 80023c8:	4618      	mov	r0, r3
 80023ca:	f7ff ff5d 	bl	8002288 <__NVIC_SetPriority>
}
 80023ce:	bf00      	nop
 80023d0:	3718      	adds	r7, #24
 80023d2:	46bd      	mov	sp, r7
 80023d4:	bd80      	pop	{r7, pc}

080023d6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80023d6:	b580      	push	{r7, lr}
 80023d8:	b082      	sub	sp, #8
 80023da:	af00      	add	r7, sp, #0
 80023dc:	4603      	mov	r3, r0
 80023de:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80023e0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80023e4:	4618      	mov	r0, r3
 80023e6:	f7ff ff31 	bl	800224c <__NVIC_EnableIRQ>
}
 80023ea:	bf00      	nop
 80023ec:	3708      	adds	r7, #8
 80023ee:	46bd      	mov	sp, r7
 80023f0:	bd80      	pop	{r7, pc}

080023f2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80023f2:	b580      	push	{r7, lr}
 80023f4:	b082      	sub	sp, #8
 80023f6:	af00      	add	r7, sp, #0
 80023f8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80023fa:	6878      	ldr	r0, [r7, #4]
 80023fc:	f7ff ffa2 	bl	8002344 <SysTick_Config>
 8002400:	4603      	mov	r3, r0
}
 8002402:	4618      	mov	r0, r3
 8002404:	3708      	adds	r7, #8
 8002406:	46bd      	mov	sp, r7
 8002408:	bd80      	pop	{r7, pc}
	...

0800240c <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800240c:	b480      	push	{r7}
 800240e:	b085      	sub	sp, #20
 8002410:	af00      	add	r7, sp, #0
 8002412:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	2b00      	cmp	r3, #0
 8002418:	d101      	bne.n	800241e <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 800241a:	2301      	movs	r3, #1
 800241c:	e098      	b.n	8002550 <HAL_DMA_Init+0x144>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	681b      	ldr	r3, [r3, #0]
 8002422:	461a      	mov	r2, r3
 8002424:	4b4d      	ldr	r3, [pc, #308]	; (800255c <HAL_DMA_Init+0x150>)
 8002426:	429a      	cmp	r2, r3
 8002428:	d80f      	bhi.n	800244a <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	681b      	ldr	r3, [r3, #0]
 800242e:	461a      	mov	r2, r3
 8002430:	4b4b      	ldr	r3, [pc, #300]	; (8002560 <HAL_DMA_Init+0x154>)
 8002432:	4413      	add	r3, r2
 8002434:	4a4b      	ldr	r2, [pc, #300]	; (8002564 <HAL_DMA_Init+0x158>)
 8002436:	fba2 2303 	umull	r2, r3, r2, r3
 800243a:	091b      	lsrs	r3, r3, #4
 800243c:	009a      	lsls	r2, r3, #2
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	4a48      	ldr	r2, [pc, #288]	; (8002568 <HAL_DMA_Init+0x15c>)
 8002446:	641a      	str	r2, [r3, #64]	; 0x40
 8002448:	e00e      	b.n	8002468 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	681b      	ldr	r3, [r3, #0]
 800244e:	461a      	mov	r2, r3
 8002450:	4b46      	ldr	r3, [pc, #280]	; (800256c <HAL_DMA_Init+0x160>)
 8002452:	4413      	add	r3, r2
 8002454:	4a43      	ldr	r2, [pc, #268]	; (8002564 <HAL_DMA_Init+0x158>)
 8002456:	fba2 2303 	umull	r2, r3, r2, r3
 800245a:	091b      	lsrs	r3, r3, #4
 800245c:	009a      	lsls	r2, r3, #2
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	4a42      	ldr	r2, [pc, #264]	; (8002570 <HAL_DMA_Init+0x164>)
 8002466:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	2202      	movs	r2, #2
 800246c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8002478:	68fb      	ldr	r3, [r7, #12]
 800247a:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 800247e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002482:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 800248c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	691b      	ldr	r3, [r3, #16]
 8002492:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002498:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	699b      	ldr	r3, [r3, #24]
 800249e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80024a4:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	6a1b      	ldr	r3, [r3, #32]
 80024aa:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 80024ac:	68fa      	ldr	r2, [r7, #12]
 80024ae:	4313      	orrs	r3, r2
 80024b0:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	681b      	ldr	r3, [r3, #0]
 80024b6:	68fa      	ldr	r2, [r7, #12]
 80024b8:	601a      	str	r2, [r3, #0]
#endif /* DMAMUX1 */

#if !defined (DMAMUX1)

  /* Set request selection */
  if(hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	689b      	ldr	r3, [r3, #8]
 80024be:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80024c2:	d039      	beq.n	8002538 <HAL_DMA_Init+0x12c>
  {
    /* Write to DMA channel selection register */
    if (DMA1 == hdma->DmaBaseAddress)
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024c8:	4a27      	ldr	r2, [pc, #156]	; (8002568 <HAL_DMA_Init+0x15c>)
 80024ca:	4293      	cmp	r3, r2
 80024cc:	d11a      	bne.n	8002504 <HAL_DMA_Init+0xf8>
    {
      /* Reset request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 80024ce:	4b29      	ldr	r3, [pc, #164]	; (8002574 <HAL_DMA_Init+0x168>)
 80024d0:	681a      	ldr	r2, [r3, #0]
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80024d6:	f003 031c 	and.w	r3, r3, #28
 80024da:	210f      	movs	r1, #15
 80024dc:	fa01 f303 	lsl.w	r3, r1, r3
 80024e0:	43db      	mvns	r3, r3
 80024e2:	4924      	ldr	r1, [pc, #144]	; (8002574 <HAL_DMA_Init+0x168>)
 80024e4:	4013      	ands	r3, r2
 80024e6:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 80024e8:	4b22      	ldr	r3, [pc, #136]	; (8002574 <HAL_DMA_Init+0x168>)
 80024ea:	681a      	ldr	r2, [r3, #0]
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	6859      	ldr	r1, [r3, #4]
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80024f4:	f003 031c 	and.w	r3, r3, #28
 80024f8:	fa01 f303 	lsl.w	r3, r1, r3
 80024fc:	491d      	ldr	r1, [pc, #116]	; (8002574 <HAL_DMA_Init+0x168>)
 80024fe:	4313      	orrs	r3, r2
 8002500:	600b      	str	r3, [r1, #0]
 8002502:	e019      	b.n	8002538 <HAL_DMA_Init+0x12c>
    }
    else /* DMA2 */
    {
      /* Reset request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8002504:	4b1c      	ldr	r3, [pc, #112]	; (8002578 <HAL_DMA_Init+0x16c>)
 8002506:	681a      	ldr	r2, [r3, #0]
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800250c:	f003 031c 	and.w	r3, r3, #28
 8002510:	210f      	movs	r1, #15
 8002512:	fa01 f303 	lsl.w	r3, r1, r3
 8002516:	43db      	mvns	r3, r3
 8002518:	4917      	ldr	r1, [pc, #92]	; (8002578 <HAL_DMA_Init+0x16c>)
 800251a:	4013      	ands	r3, r2
 800251c:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 800251e:	4b16      	ldr	r3, [pc, #88]	; (8002578 <HAL_DMA_Init+0x16c>)
 8002520:	681a      	ldr	r2, [r3, #0]
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	6859      	ldr	r1, [r3, #4]
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800252a:	f003 031c 	and.w	r3, r3, #28
 800252e:	fa01 f303 	lsl.w	r3, r1, r3
 8002532:	4911      	ldr	r1, [pc, #68]	; (8002578 <HAL_DMA_Init+0x16c>)
 8002534:	4313      	orrs	r3, r2
 8002536:	600b      	str	r3, [r1, #0]
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
       /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
       /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	2200      	movs	r2, #0
 800253c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	2201      	movs	r2, #1
 8002542:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	2200      	movs	r2, #0
 800254a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 800254e:	2300      	movs	r3, #0
}
 8002550:	4618      	mov	r0, r3
 8002552:	3714      	adds	r7, #20
 8002554:	46bd      	mov	sp, r7
 8002556:	f85d 7b04 	ldr.w	r7, [sp], #4
 800255a:	4770      	bx	lr
 800255c:	40020407 	.word	0x40020407
 8002560:	bffdfff8 	.word	0xbffdfff8
 8002564:	cccccccd 	.word	0xcccccccd
 8002568:	40020000 	.word	0x40020000
 800256c:	bffdfbf8 	.word	0xbffdfbf8
 8002570:	40020400 	.word	0x40020400
 8002574:	400200a8 	.word	0x400200a8
 8002578:	400204a8 	.word	0x400204a8

0800257c <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800257c:	b580      	push	{r7, lr}
 800257e:	b086      	sub	sp, #24
 8002580:	af00      	add	r7, sp, #0
 8002582:	60f8      	str	r0, [r7, #12]
 8002584:	60b9      	str	r1, [r7, #8]
 8002586:	607a      	str	r2, [r7, #4]
 8002588:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800258a:	2300      	movs	r3, #0
 800258c:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 800258e:	68fb      	ldr	r3, [r7, #12]
 8002590:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002594:	2b01      	cmp	r3, #1
 8002596:	d101      	bne.n	800259c <HAL_DMA_Start_IT+0x20>
 8002598:	2302      	movs	r3, #2
 800259a:	e04b      	b.n	8002634 <HAL_DMA_Start_IT+0xb8>
 800259c:	68fb      	ldr	r3, [r7, #12]
 800259e:	2201      	movs	r2, #1
 80025a0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if(HAL_DMA_STATE_READY == hdma->State)
 80025a4:	68fb      	ldr	r3, [r7, #12]
 80025a6:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80025aa:	b2db      	uxtb	r3, r3
 80025ac:	2b01      	cmp	r3, #1
 80025ae:	d13a      	bne.n	8002626 <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80025b0:	68fb      	ldr	r3, [r7, #12]
 80025b2:	2202      	movs	r2, #2
 80025b4:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80025b8:	68fb      	ldr	r3, [r7, #12]
 80025ba:	2200      	movs	r2, #0
 80025bc:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80025be:	68fb      	ldr	r3, [r7, #12]
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	681a      	ldr	r2, [r3, #0]
 80025c4:	68fb      	ldr	r3, [r7, #12]
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	f022 0201 	bic.w	r2, r2, #1
 80025cc:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80025ce:	683b      	ldr	r3, [r7, #0]
 80025d0:	687a      	ldr	r2, [r7, #4]
 80025d2:	68b9      	ldr	r1, [r7, #8]
 80025d4:	68f8      	ldr	r0, [r7, #12]
 80025d6:	f000 f95f 	bl	8002898 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback )
 80025da:	68fb      	ldr	r3, [r7, #12]
 80025dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025de:	2b00      	cmp	r3, #0
 80025e0:	d008      	beq.n	80025f4 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80025e2:	68fb      	ldr	r3, [r7, #12]
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	681a      	ldr	r2, [r3, #0]
 80025e8:	68fb      	ldr	r3, [r7, #12]
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	f042 020e 	orr.w	r2, r2, #14
 80025f0:	601a      	str	r2, [r3, #0]
 80025f2:	e00f      	b.n	8002614 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80025f4:	68fb      	ldr	r3, [r7, #12]
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	681a      	ldr	r2, [r3, #0]
 80025fa:	68fb      	ldr	r3, [r7, #12]
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	f022 0204 	bic.w	r2, r2, #4
 8002602:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8002604:	68fb      	ldr	r3, [r7, #12]
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	681a      	ldr	r2, [r3, #0]
 800260a:	68fb      	ldr	r3, [r7, #12]
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	f042 020a 	orr.w	r2, r2, #10
 8002612:	601a      	str	r2, [r3, #0]
    }

#endif /* DMAMUX1 */

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002614:	68fb      	ldr	r3, [r7, #12]
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	681a      	ldr	r2, [r3, #0]
 800261a:	68fb      	ldr	r3, [r7, #12]
 800261c:	681b      	ldr	r3, [r3, #0]
 800261e:	f042 0201 	orr.w	r2, r2, #1
 8002622:	601a      	str	r2, [r3, #0]
 8002624:	e005      	b.n	8002632 <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002626:	68fb      	ldr	r3, [r7, #12]
 8002628:	2200      	movs	r2, #0
 800262a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 800262e:	2302      	movs	r3, #2
 8002630:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8002632:	7dfb      	ldrb	r3, [r7, #23]
}
 8002634:	4618      	mov	r0, r3
 8002636:	3718      	adds	r7, #24
 8002638:	46bd      	mov	sp, r7
 800263a:	bd80      	pop	{r7, pc}

0800263c <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800263c:	b480      	push	{r7}
 800263e:	b085      	sub	sp, #20
 8002640:	af00      	add	r7, sp, #0
 8002642:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002644:	2300      	movs	r3, #0
 8002646:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800264e:	b2db      	uxtb	r3, r3
 8002650:	2b02      	cmp	r3, #2
 8002652:	d008      	beq.n	8002666 <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	2204      	movs	r2, #4
 8002658:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	2200      	movs	r2, #0
 800265e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8002662:	2301      	movs	r3, #1
 8002664:	e022      	b.n	80026ac <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	681b      	ldr	r3, [r3, #0]
 800266a:	681a      	ldr	r2, [r3, #0]
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	f022 020e 	bic.w	r2, r2, #14
 8002674:	601a      	str	r2, [r3, #0]
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	681a      	ldr	r2, [r3, #0]
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	f022 0201 	bic.w	r2, r2, #1
 8002684:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800268a:	f003 021c 	and.w	r2, r3, #28
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002692:	2101      	movs	r1, #1
 8002694:	fa01 f202 	lsl.w	r2, r1, r2
 8002698:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	2201      	movs	r2, #1
 800269e:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	2200      	movs	r2, #0
 80026a6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return status;
 80026aa:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 80026ac:	4618      	mov	r0, r3
 80026ae:	3714      	adds	r7, #20
 80026b0:	46bd      	mov	sp, r7
 80026b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026b6:	4770      	bx	lr

080026b8 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80026b8:	b580      	push	{r7, lr}
 80026ba:	b084      	sub	sp, #16
 80026bc:	af00      	add	r7, sp, #0
 80026be:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80026c0:	2300      	movs	r3, #0
 80026c2:	73fb      	strb	r3, [r7, #15]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80026ca:	b2db      	uxtb	r3, r3
 80026cc:	2b02      	cmp	r3, #2
 80026ce:	d005      	beq.n	80026dc <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	2204      	movs	r2, #4
 80026d4:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 80026d6:	2301      	movs	r3, #1
 80026d8:	73fb      	strb	r3, [r7, #15]
 80026da:	e029      	b.n	8002730 <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	681a      	ldr	r2, [r3, #0]
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	f022 020e 	bic.w	r2, r2, #14
 80026ea:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	681b      	ldr	r3, [r3, #0]
 80026f0:	681a      	ldr	r2, [r3, #0]
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	681b      	ldr	r3, [r3, #0]
 80026f6:	f022 0201 	bic.w	r2, r2, #1
 80026fa:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002700:	f003 021c 	and.w	r2, r3, #28
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002708:	2101      	movs	r1, #1
 800270a:	fa01 f202 	lsl.w	r2, r1, r2
 800270e:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	2201      	movs	r2, #1
 8002714:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	2200      	movs	r2, #0
 800271c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002724:	2b00      	cmp	r3, #0
 8002726:	d003      	beq.n	8002730 <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800272c:	6878      	ldr	r0, [r7, #4]
 800272e:	4798      	blx	r3
    }
  }
  return status;
 8002730:	7bfb      	ldrb	r3, [r7, #15]
}
 8002732:	4618      	mov	r0, r3
 8002734:	3710      	adds	r7, #16
 8002736:	46bd      	mov	sp, r7
 8002738:	bd80      	pop	{r7, pc}

0800273a <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800273a:	b580      	push	{r7, lr}
 800273c:	b084      	sub	sp, #16
 800273e:	af00      	add	r7, sp, #0
 8002740:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002756:	f003 031c 	and.w	r3, r3, #28
 800275a:	2204      	movs	r2, #4
 800275c:	409a      	lsls	r2, r3
 800275e:	68fb      	ldr	r3, [r7, #12]
 8002760:	4013      	ands	r3, r2
 8002762:	2b00      	cmp	r3, #0
 8002764:	d026      	beq.n	80027b4 <HAL_DMA_IRQHandler+0x7a>
 8002766:	68bb      	ldr	r3, [r7, #8]
 8002768:	f003 0304 	and.w	r3, r3, #4
 800276c:	2b00      	cmp	r3, #0
 800276e:	d021      	beq.n	80027b4 <HAL_DMA_IRQHandler+0x7a>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	f003 0320 	and.w	r3, r3, #32
 800277a:	2b00      	cmp	r3, #0
 800277c:	d107      	bne.n	800278e <HAL_DMA_IRQHandler+0x54>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	681a      	ldr	r2, [r3, #0]
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	f022 0204 	bic.w	r2, r2, #4
 800278c:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002792:	f003 021c 	and.w	r2, r3, #28
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800279a:	2104      	movs	r1, #4
 800279c:	fa01 f202 	lsl.w	r2, r1, r2
 80027a0:	605a      	str	r2, [r3, #4]

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

      if(hdma->XferHalfCpltCallback != NULL)
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027a6:	2b00      	cmp	r3, #0
 80027a8:	d071      	beq.n	800288e <HAL_DMA_IRQHandler+0x154>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027ae:	6878      	ldr	r0, [r7, #4]
 80027b0:	4798      	blx	r3
      if(hdma->XferHalfCpltCallback != NULL)
 80027b2:	e06c      	b.n	800288e <HAL_DMA_IRQHandler+0x154>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80027b8:	f003 031c 	and.w	r3, r3, #28
 80027bc:	2202      	movs	r2, #2
 80027be:	409a      	lsls	r2, r3
 80027c0:	68fb      	ldr	r3, [r7, #12]
 80027c2:	4013      	ands	r3, r2
 80027c4:	2b00      	cmp	r3, #0
 80027c6:	d02e      	beq.n	8002826 <HAL_DMA_IRQHandler+0xec>
 80027c8:	68bb      	ldr	r3, [r7, #8]
 80027ca:	f003 0302 	and.w	r3, r3, #2
 80027ce:	2b00      	cmp	r3, #0
 80027d0:	d029      	beq.n	8002826 <HAL_DMA_IRQHandler+0xec>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	681b      	ldr	r3, [r3, #0]
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	f003 0320 	and.w	r3, r3, #32
 80027dc:	2b00      	cmp	r3, #0
 80027de:	d10b      	bne.n	80027f8 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	681a      	ldr	r2, [r3, #0]
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	f022 020a 	bic.w	r2, r2, #10
 80027ee:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	2201      	movs	r2, #1
 80027f4:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80027fc:	f003 021c 	and.w	r2, r3, #28
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002804:	2102      	movs	r1, #2
 8002806:	fa01 f202 	lsl.w	r2, r1, r2
 800280a:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	2200      	movs	r2, #0
 8002810:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if(hdma->XferCpltCallback != NULL)
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002818:	2b00      	cmp	r3, #0
 800281a:	d038      	beq.n	800288e <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002820:	6878      	ldr	r0, [r7, #4]
 8002822:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8002824:	e033      	b.n	800288e <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800282a:	f003 031c 	and.w	r3, r3, #28
 800282e:	2208      	movs	r2, #8
 8002830:	409a      	lsls	r2, r3
 8002832:	68fb      	ldr	r3, [r7, #12]
 8002834:	4013      	ands	r3, r2
 8002836:	2b00      	cmp	r3, #0
 8002838:	d02a      	beq.n	8002890 <HAL_DMA_IRQHandler+0x156>
 800283a:	68bb      	ldr	r3, [r7, #8]
 800283c:	f003 0308 	and.w	r3, r3, #8
 8002840:	2b00      	cmp	r3, #0
 8002842:	d025      	beq.n	8002890 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	681a      	ldr	r2, [r3, #0]
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	681b      	ldr	r3, [r3, #0]
 800284e:	f022 020e 	bic.w	r2, r2, #14
 8002852:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002858:	f003 021c 	and.w	r2, r3, #28
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002860:	2101      	movs	r1, #1
 8002862:	fa01 f202 	lsl.w	r2, r1, r2
 8002866:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	2201      	movs	r2, #1
 800286c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	2201      	movs	r2, #1
 8002872:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	2200      	movs	r2, #0
 800287a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002882:	2b00      	cmp	r3, #0
 8002884:	d004      	beq.n	8002890 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800288a:	6878      	ldr	r0, [r7, #4]
 800288c:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 800288e:	bf00      	nop
 8002890:	bf00      	nop
}
 8002892:	3710      	adds	r7, #16
 8002894:	46bd      	mov	sp, r7
 8002896:	bd80      	pop	{r7, pc}

08002898 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002898:	b480      	push	{r7}
 800289a:	b085      	sub	sp, #20
 800289c:	af00      	add	r7, sp, #0
 800289e:	60f8      	str	r0, [r7, #12]
 80028a0:	60b9      	str	r1, [r7, #8]
 80028a2:	607a      	str	r2, [r7, #4]
 80028a4:	603b      	str	r3, [r7, #0]
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
  }
#endif

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80028a6:	68fb      	ldr	r3, [r7, #12]
 80028a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80028aa:	f003 021c 	and.w	r2, r3, #28
 80028ae:	68fb      	ldr	r3, [r7, #12]
 80028b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028b2:	2101      	movs	r1, #1
 80028b4:	fa01 f202 	lsl.w	r2, r1, r2
 80028b8:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 80028ba:	68fb      	ldr	r3, [r7, #12]
 80028bc:	681b      	ldr	r3, [r3, #0]
 80028be:	683a      	ldr	r2, [r7, #0]
 80028c0:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80028c2:	68fb      	ldr	r3, [r7, #12]
 80028c4:	689b      	ldr	r3, [r3, #8]
 80028c6:	2b10      	cmp	r3, #16
 80028c8:	d108      	bne.n	80028dc <DMA_SetConfig+0x44>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 80028ca:	68fb      	ldr	r3, [r7, #12]
 80028cc:	681b      	ldr	r3, [r3, #0]
 80028ce:	687a      	ldr	r2, [r7, #4]
 80028d0:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 80028d2:	68fb      	ldr	r3, [r7, #12]
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	68ba      	ldr	r2, [r7, #8]
 80028d8:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 80028da:	e007      	b.n	80028ec <DMA_SetConfig+0x54>
    hdma->Instance->CPAR = SrcAddress;
 80028dc:	68fb      	ldr	r3, [r7, #12]
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	68ba      	ldr	r2, [r7, #8]
 80028e2:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 80028e4:	68fb      	ldr	r3, [r7, #12]
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	687a      	ldr	r2, [r7, #4]
 80028ea:	60da      	str	r2, [r3, #12]
}
 80028ec:	bf00      	nop
 80028ee:	3714      	adds	r7, #20
 80028f0:	46bd      	mov	sp, r7
 80028f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028f6:	4770      	bx	lr

080028f8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80028f8:	b480      	push	{r7}
 80028fa:	b087      	sub	sp, #28
 80028fc:	af00      	add	r7, sp, #0
 80028fe:	6078      	str	r0, [r7, #4]
 8002900:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002902:	2300      	movs	r3, #0
 8002904:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002906:	e17f      	b.n	8002c08 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002908:	683b      	ldr	r3, [r7, #0]
 800290a:	681a      	ldr	r2, [r3, #0]
 800290c:	2101      	movs	r1, #1
 800290e:	697b      	ldr	r3, [r7, #20]
 8002910:	fa01 f303 	lsl.w	r3, r1, r3
 8002914:	4013      	ands	r3, r2
 8002916:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002918:	68fb      	ldr	r3, [r7, #12]
 800291a:	2b00      	cmp	r3, #0
 800291c:	f000 8171 	beq.w	8002c02 <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002920:	683b      	ldr	r3, [r7, #0]
 8002922:	685b      	ldr	r3, [r3, #4]
 8002924:	f003 0303 	and.w	r3, r3, #3
 8002928:	2b01      	cmp	r3, #1
 800292a:	d005      	beq.n	8002938 <HAL_GPIO_Init+0x40>
 800292c:	683b      	ldr	r3, [r7, #0]
 800292e:	685b      	ldr	r3, [r3, #4]
 8002930:	f003 0303 	and.w	r3, r3, #3
 8002934:	2b02      	cmp	r3, #2
 8002936:	d130      	bne.n	800299a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	689b      	ldr	r3, [r3, #8]
 800293c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800293e:	697b      	ldr	r3, [r7, #20]
 8002940:	005b      	lsls	r3, r3, #1
 8002942:	2203      	movs	r2, #3
 8002944:	fa02 f303 	lsl.w	r3, r2, r3
 8002948:	43db      	mvns	r3, r3
 800294a:	693a      	ldr	r2, [r7, #16]
 800294c:	4013      	ands	r3, r2
 800294e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002950:	683b      	ldr	r3, [r7, #0]
 8002952:	68da      	ldr	r2, [r3, #12]
 8002954:	697b      	ldr	r3, [r7, #20]
 8002956:	005b      	lsls	r3, r3, #1
 8002958:	fa02 f303 	lsl.w	r3, r2, r3
 800295c:	693a      	ldr	r2, [r7, #16]
 800295e:	4313      	orrs	r3, r2
 8002960:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	693a      	ldr	r2, [r7, #16]
 8002966:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	685b      	ldr	r3, [r3, #4]
 800296c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800296e:	2201      	movs	r2, #1
 8002970:	697b      	ldr	r3, [r7, #20]
 8002972:	fa02 f303 	lsl.w	r3, r2, r3
 8002976:	43db      	mvns	r3, r3
 8002978:	693a      	ldr	r2, [r7, #16]
 800297a:	4013      	ands	r3, r2
 800297c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800297e:	683b      	ldr	r3, [r7, #0]
 8002980:	685b      	ldr	r3, [r3, #4]
 8002982:	091b      	lsrs	r3, r3, #4
 8002984:	f003 0201 	and.w	r2, r3, #1
 8002988:	697b      	ldr	r3, [r7, #20]
 800298a:	fa02 f303 	lsl.w	r3, r2, r3
 800298e:	693a      	ldr	r2, [r7, #16]
 8002990:	4313      	orrs	r3, r2
 8002992:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	693a      	ldr	r2, [r7, #16]
 8002998:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 800299a:	683b      	ldr	r3, [r7, #0]
 800299c:	685b      	ldr	r3, [r3, #4]
 800299e:	f003 0303 	and.w	r3, r3, #3
 80029a2:	2b03      	cmp	r3, #3
 80029a4:	d118      	bne.n	80029d8 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80029aa:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 80029ac:	2201      	movs	r2, #1
 80029ae:	697b      	ldr	r3, [r7, #20]
 80029b0:	fa02 f303 	lsl.w	r3, r2, r3
 80029b4:	43db      	mvns	r3, r3
 80029b6:	693a      	ldr	r2, [r7, #16]
 80029b8:	4013      	ands	r3, r2
 80029ba:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 80029bc:	683b      	ldr	r3, [r7, #0]
 80029be:	685b      	ldr	r3, [r3, #4]
 80029c0:	08db      	lsrs	r3, r3, #3
 80029c2:	f003 0201 	and.w	r2, r3, #1
 80029c6:	697b      	ldr	r3, [r7, #20]
 80029c8:	fa02 f303 	lsl.w	r3, r2, r3
 80029cc:	693a      	ldr	r2, [r7, #16]
 80029ce:	4313      	orrs	r3, r2
 80029d0:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	693a      	ldr	r2, [r7, #16]
 80029d6:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80029d8:	683b      	ldr	r3, [r7, #0]
 80029da:	685b      	ldr	r3, [r3, #4]
 80029dc:	f003 0303 	and.w	r3, r3, #3
 80029e0:	2b03      	cmp	r3, #3
 80029e2:	d017      	beq.n	8002a14 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	68db      	ldr	r3, [r3, #12]
 80029e8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80029ea:	697b      	ldr	r3, [r7, #20]
 80029ec:	005b      	lsls	r3, r3, #1
 80029ee:	2203      	movs	r2, #3
 80029f0:	fa02 f303 	lsl.w	r3, r2, r3
 80029f4:	43db      	mvns	r3, r3
 80029f6:	693a      	ldr	r2, [r7, #16]
 80029f8:	4013      	ands	r3, r2
 80029fa:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80029fc:	683b      	ldr	r3, [r7, #0]
 80029fe:	689a      	ldr	r2, [r3, #8]
 8002a00:	697b      	ldr	r3, [r7, #20]
 8002a02:	005b      	lsls	r3, r3, #1
 8002a04:	fa02 f303 	lsl.w	r3, r2, r3
 8002a08:	693a      	ldr	r2, [r7, #16]
 8002a0a:	4313      	orrs	r3, r2
 8002a0c:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	693a      	ldr	r2, [r7, #16]
 8002a12:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002a14:	683b      	ldr	r3, [r7, #0]
 8002a16:	685b      	ldr	r3, [r3, #4]
 8002a18:	f003 0303 	and.w	r3, r3, #3
 8002a1c:	2b02      	cmp	r3, #2
 8002a1e:	d123      	bne.n	8002a68 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8002a20:	697b      	ldr	r3, [r7, #20]
 8002a22:	08da      	lsrs	r2, r3, #3
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	3208      	adds	r2, #8
 8002a28:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002a2c:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002a2e:	697b      	ldr	r3, [r7, #20]
 8002a30:	f003 0307 	and.w	r3, r3, #7
 8002a34:	009b      	lsls	r3, r3, #2
 8002a36:	220f      	movs	r2, #15
 8002a38:	fa02 f303 	lsl.w	r3, r2, r3
 8002a3c:	43db      	mvns	r3, r3
 8002a3e:	693a      	ldr	r2, [r7, #16]
 8002a40:	4013      	ands	r3, r2
 8002a42:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8002a44:	683b      	ldr	r3, [r7, #0]
 8002a46:	691a      	ldr	r2, [r3, #16]
 8002a48:	697b      	ldr	r3, [r7, #20]
 8002a4a:	f003 0307 	and.w	r3, r3, #7
 8002a4e:	009b      	lsls	r3, r3, #2
 8002a50:	fa02 f303 	lsl.w	r3, r2, r3
 8002a54:	693a      	ldr	r2, [r7, #16]
 8002a56:	4313      	orrs	r3, r2
 8002a58:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8002a5a:	697b      	ldr	r3, [r7, #20]
 8002a5c:	08da      	lsrs	r2, r3, #3
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	3208      	adds	r2, #8
 8002a62:	6939      	ldr	r1, [r7, #16]
 8002a64:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8002a6e:	697b      	ldr	r3, [r7, #20]
 8002a70:	005b      	lsls	r3, r3, #1
 8002a72:	2203      	movs	r2, #3
 8002a74:	fa02 f303 	lsl.w	r3, r2, r3
 8002a78:	43db      	mvns	r3, r3
 8002a7a:	693a      	ldr	r2, [r7, #16]
 8002a7c:	4013      	ands	r3, r2
 8002a7e:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8002a80:	683b      	ldr	r3, [r7, #0]
 8002a82:	685b      	ldr	r3, [r3, #4]
 8002a84:	f003 0203 	and.w	r2, r3, #3
 8002a88:	697b      	ldr	r3, [r7, #20]
 8002a8a:	005b      	lsls	r3, r3, #1
 8002a8c:	fa02 f303 	lsl.w	r3, r2, r3
 8002a90:	693a      	ldr	r2, [r7, #16]
 8002a92:	4313      	orrs	r3, r2
 8002a94:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	693a      	ldr	r2, [r7, #16]
 8002a9a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002a9c:	683b      	ldr	r3, [r7, #0]
 8002a9e:	685b      	ldr	r3, [r3, #4]
 8002aa0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002aa4:	2b00      	cmp	r3, #0
 8002aa6:	f000 80ac 	beq.w	8002c02 <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002aaa:	4b5f      	ldr	r3, [pc, #380]	; (8002c28 <HAL_GPIO_Init+0x330>)
 8002aac:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002aae:	4a5e      	ldr	r2, [pc, #376]	; (8002c28 <HAL_GPIO_Init+0x330>)
 8002ab0:	f043 0301 	orr.w	r3, r3, #1
 8002ab4:	6613      	str	r3, [r2, #96]	; 0x60
 8002ab6:	4b5c      	ldr	r3, [pc, #368]	; (8002c28 <HAL_GPIO_Init+0x330>)
 8002ab8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002aba:	f003 0301 	and.w	r3, r3, #1
 8002abe:	60bb      	str	r3, [r7, #8]
 8002ac0:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8002ac2:	4a5a      	ldr	r2, [pc, #360]	; (8002c2c <HAL_GPIO_Init+0x334>)
 8002ac4:	697b      	ldr	r3, [r7, #20]
 8002ac6:	089b      	lsrs	r3, r3, #2
 8002ac8:	3302      	adds	r3, #2
 8002aca:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002ace:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8002ad0:	697b      	ldr	r3, [r7, #20]
 8002ad2:	f003 0303 	and.w	r3, r3, #3
 8002ad6:	009b      	lsls	r3, r3, #2
 8002ad8:	220f      	movs	r2, #15
 8002ada:	fa02 f303 	lsl.w	r3, r2, r3
 8002ade:	43db      	mvns	r3, r3
 8002ae0:	693a      	ldr	r2, [r7, #16]
 8002ae2:	4013      	ands	r3, r2
 8002ae4:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8002aec:	d025      	beq.n	8002b3a <HAL_GPIO_Init+0x242>
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	4a4f      	ldr	r2, [pc, #316]	; (8002c30 <HAL_GPIO_Init+0x338>)
 8002af2:	4293      	cmp	r3, r2
 8002af4:	d01f      	beq.n	8002b36 <HAL_GPIO_Init+0x23e>
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	4a4e      	ldr	r2, [pc, #312]	; (8002c34 <HAL_GPIO_Init+0x33c>)
 8002afa:	4293      	cmp	r3, r2
 8002afc:	d019      	beq.n	8002b32 <HAL_GPIO_Init+0x23a>
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	4a4d      	ldr	r2, [pc, #308]	; (8002c38 <HAL_GPIO_Init+0x340>)
 8002b02:	4293      	cmp	r3, r2
 8002b04:	d013      	beq.n	8002b2e <HAL_GPIO_Init+0x236>
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	4a4c      	ldr	r2, [pc, #304]	; (8002c3c <HAL_GPIO_Init+0x344>)
 8002b0a:	4293      	cmp	r3, r2
 8002b0c:	d00d      	beq.n	8002b2a <HAL_GPIO_Init+0x232>
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	4a4b      	ldr	r2, [pc, #300]	; (8002c40 <HAL_GPIO_Init+0x348>)
 8002b12:	4293      	cmp	r3, r2
 8002b14:	d007      	beq.n	8002b26 <HAL_GPIO_Init+0x22e>
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	4a4a      	ldr	r2, [pc, #296]	; (8002c44 <HAL_GPIO_Init+0x34c>)
 8002b1a:	4293      	cmp	r3, r2
 8002b1c:	d101      	bne.n	8002b22 <HAL_GPIO_Init+0x22a>
 8002b1e:	2306      	movs	r3, #6
 8002b20:	e00c      	b.n	8002b3c <HAL_GPIO_Init+0x244>
 8002b22:	2307      	movs	r3, #7
 8002b24:	e00a      	b.n	8002b3c <HAL_GPIO_Init+0x244>
 8002b26:	2305      	movs	r3, #5
 8002b28:	e008      	b.n	8002b3c <HAL_GPIO_Init+0x244>
 8002b2a:	2304      	movs	r3, #4
 8002b2c:	e006      	b.n	8002b3c <HAL_GPIO_Init+0x244>
 8002b2e:	2303      	movs	r3, #3
 8002b30:	e004      	b.n	8002b3c <HAL_GPIO_Init+0x244>
 8002b32:	2302      	movs	r3, #2
 8002b34:	e002      	b.n	8002b3c <HAL_GPIO_Init+0x244>
 8002b36:	2301      	movs	r3, #1
 8002b38:	e000      	b.n	8002b3c <HAL_GPIO_Init+0x244>
 8002b3a:	2300      	movs	r3, #0
 8002b3c:	697a      	ldr	r2, [r7, #20]
 8002b3e:	f002 0203 	and.w	r2, r2, #3
 8002b42:	0092      	lsls	r2, r2, #2
 8002b44:	4093      	lsls	r3, r2
 8002b46:	693a      	ldr	r2, [r7, #16]
 8002b48:	4313      	orrs	r3, r2
 8002b4a:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8002b4c:	4937      	ldr	r1, [pc, #220]	; (8002c2c <HAL_GPIO_Init+0x334>)
 8002b4e:	697b      	ldr	r3, [r7, #20]
 8002b50:	089b      	lsrs	r3, r3, #2
 8002b52:	3302      	adds	r3, #2
 8002b54:	693a      	ldr	r2, [r7, #16]
 8002b56:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002b5a:	4b3b      	ldr	r3, [pc, #236]	; (8002c48 <HAL_GPIO_Init+0x350>)
 8002b5c:	689b      	ldr	r3, [r3, #8]
 8002b5e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002b60:	68fb      	ldr	r3, [r7, #12]
 8002b62:	43db      	mvns	r3, r3
 8002b64:	693a      	ldr	r2, [r7, #16]
 8002b66:	4013      	ands	r3, r2
 8002b68:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002b6a:	683b      	ldr	r3, [r7, #0]
 8002b6c:	685b      	ldr	r3, [r3, #4]
 8002b6e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002b72:	2b00      	cmp	r3, #0
 8002b74:	d003      	beq.n	8002b7e <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8002b76:	693a      	ldr	r2, [r7, #16]
 8002b78:	68fb      	ldr	r3, [r7, #12]
 8002b7a:	4313      	orrs	r3, r2
 8002b7c:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8002b7e:	4a32      	ldr	r2, [pc, #200]	; (8002c48 <HAL_GPIO_Init+0x350>)
 8002b80:	693b      	ldr	r3, [r7, #16]
 8002b82:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8002b84:	4b30      	ldr	r3, [pc, #192]	; (8002c48 <HAL_GPIO_Init+0x350>)
 8002b86:	68db      	ldr	r3, [r3, #12]
 8002b88:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002b8a:	68fb      	ldr	r3, [r7, #12]
 8002b8c:	43db      	mvns	r3, r3
 8002b8e:	693a      	ldr	r2, [r7, #16]
 8002b90:	4013      	ands	r3, r2
 8002b92:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002b94:	683b      	ldr	r3, [r7, #0]
 8002b96:	685b      	ldr	r3, [r3, #4]
 8002b98:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002b9c:	2b00      	cmp	r3, #0
 8002b9e:	d003      	beq.n	8002ba8 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8002ba0:	693a      	ldr	r2, [r7, #16]
 8002ba2:	68fb      	ldr	r3, [r7, #12]
 8002ba4:	4313      	orrs	r3, r2
 8002ba6:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8002ba8:	4a27      	ldr	r2, [pc, #156]	; (8002c48 <HAL_GPIO_Init+0x350>)
 8002baa:	693b      	ldr	r3, [r7, #16]
 8002bac:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8002bae:	4b26      	ldr	r3, [pc, #152]	; (8002c48 <HAL_GPIO_Init+0x350>)
 8002bb0:	685b      	ldr	r3, [r3, #4]
 8002bb2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002bb4:	68fb      	ldr	r3, [r7, #12]
 8002bb6:	43db      	mvns	r3, r3
 8002bb8:	693a      	ldr	r2, [r7, #16]
 8002bba:	4013      	ands	r3, r2
 8002bbc:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002bbe:	683b      	ldr	r3, [r7, #0]
 8002bc0:	685b      	ldr	r3, [r3, #4]
 8002bc2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002bc6:	2b00      	cmp	r3, #0
 8002bc8:	d003      	beq.n	8002bd2 <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8002bca:	693a      	ldr	r2, [r7, #16]
 8002bcc:	68fb      	ldr	r3, [r7, #12]
 8002bce:	4313      	orrs	r3, r2
 8002bd0:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8002bd2:	4a1d      	ldr	r2, [pc, #116]	; (8002c48 <HAL_GPIO_Init+0x350>)
 8002bd4:	693b      	ldr	r3, [r7, #16]
 8002bd6:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8002bd8:	4b1b      	ldr	r3, [pc, #108]	; (8002c48 <HAL_GPIO_Init+0x350>)
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002bde:	68fb      	ldr	r3, [r7, #12]
 8002be0:	43db      	mvns	r3, r3
 8002be2:	693a      	ldr	r2, [r7, #16]
 8002be4:	4013      	ands	r3, r2
 8002be6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002be8:	683b      	ldr	r3, [r7, #0]
 8002bea:	685b      	ldr	r3, [r3, #4]
 8002bec:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002bf0:	2b00      	cmp	r3, #0
 8002bf2:	d003      	beq.n	8002bfc <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8002bf4:	693a      	ldr	r2, [r7, #16]
 8002bf6:	68fb      	ldr	r3, [r7, #12]
 8002bf8:	4313      	orrs	r3, r2
 8002bfa:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8002bfc:	4a12      	ldr	r2, [pc, #72]	; (8002c48 <HAL_GPIO_Init+0x350>)
 8002bfe:	693b      	ldr	r3, [r7, #16]
 8002c00:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8002c02:	697b      	ldr	r3, [r7, #20]
 8002c04:	3301      	adds	r3, #1
 8002c06:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002c08:	683b      	ldr	r3, [r7, #0]
 8002c0a:	681a      	ldr	r2, [r3, #0]
 8002c0c:	697b      	ldr	r3, [r7, #20]
 8002c0e:	fa22 f303 	lsr.w	r3, r2, r3
 8002c12:	2b00      	cmp	r3, #0
 8002c14:	f47f ae78 	bne.w	8002908 <HAL_GPIO_Init+0x10>
  }
}
 8002c18:	bf00      	nop
 8002c1a:	bf00      	nop
 8002c1c:	371c      	adds	r7, #28
 8002c1e:	46bd      	mov	sp, r7
 8002c20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c24:	4770      	bx	lr
 8002c26:	bf00      	nop
 8002c28:	40021000 	.word	0x40021000
 8002c2c:	40010000 	.word	0x40010000
 8002c30:	48000400 	.word	0x48000400
 8002c34:	48000800 	.word	0x48000800
 8002c38:	48000c00 	.word	0x48000c00
 8002c3c:	48001000 	.word	0x48001000
 8002c40:	48001400 	.word	0x48001400
 8002c44:	48001800 	.word	0x48001800
 8002c48:	40010400 	.word	0x40010400

08002c4c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002c4c:	b480      	push	{r7}
 8002c4e:	b083      	sub	sp, #12
 8002c50:	af00      	add	r7, sp, #0
 8002c52:	6078      	str	r0, [r7, #4]
 8002c54:	460b      	mov	r3, r1
 8002c56:	807b      	strh	r3, [r7, #2]
 8002c58:	4613      	mov	r3, r2
 8002c5a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002c5c:	787b      	ldrb	r3, [r7, #1]
 8002c5e:	2b00      	cmp	r3, #0
 8002c60:	d003      	beq.n	8002c6a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002c62:	887a      	ldrh	r2, [r7, #2]
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002c68:	e002      	b.n	8002c70 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002c6a:	887a      	ldrh	r2, [r7, #2]
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	629a      	str	r2, [r3, #40]	; 0x28
}
 8002c70:	bf00      	nop
 8002c72:	370c      	adds	r7, #12
 8002c74:	46bd      	mov	sp, r7
 8002c76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c7a:	4770      	bx	lr

08002c7c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002c7c:	b580      	push	{r7, lr}
 8002c7e:	b082      	sub	sp, #8
 8002c80:	af00      	add	r7, sp, #0
 8002c82:	4603      	mov	r3, r0
 8002c84:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8002c86:	4b08      	ldr	r3, [pc, #32]	; (8002ca8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002c88:	695a      	ldr	r2, [r3, #20]
 8002c8a:	88fb      	ldrh	r3, [r7, #6]
 8002c8c:	4013      	ands	r3, r2
 8002c8e:	2b00      	cmp	r3, #0
 8002c90:	d006      	beq.n	8002ca0 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002c92:	4a05      	ldr	r2, [pc, #20]	; (8002ca8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002c94:	88fb      	ldrh	r3, [r7, #6]
 8002c96:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002c98:	88fb      	ldrh	r3, [r7, #6]
 8002c9a:	4618      	mov	r0, r3
 8002c9c:	f000 f806 	bl	8002cac <HAL_GPIO_EXTI_Callback>
  }
}
 8002ca0:	bf00      	nop
 8002ca2:	3708      	adds	r7, #8
 8002ca4:	46bd      	mov	sp, r7
 8002ca6:	bd80      	pop	{r7, pc}
 8002ca8:	40010400 	.word	0x40010400

08002cac <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8002cac:	b480      	push	{r7}
 8002cae:	b083      	sub	sp, #12
 8002cb0:	af00      	add	r7, sp, #0
 8002cb2:	4603      	mov	r3, r0
 8002cb4:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8002cb6:	bf00      	nop
 8002cb8:	370c      	adds	r7, #12
 8002cba:	46bd      	mov	sp, r7
 8002cbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cc0:	4770      	bx	lr
	...

08002cc4 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8002cc4:	b480      	push	{r7}
 8002cc6:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8002cc8:	4b04      	ldr	r3, [pc, #16]	; (8002cdc <HAL_PWREx_GetVoltageRange+0x18>)
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8002cd0:	4618      	mov	r0, r3
 8002cd2:	46bd      	mov	sp, r7
 8002cd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cd8:	4770      	bx	lr
 8002cda:	bf00      	nop
 8002cdc:	40007000 	.word	0x40007000

08002ce0 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8002ce0:	b480      	push	{r7}
 8002ce2:	b085      	sub	sp, #20
 8002ce4:	af00      	add	r7, sp, #0
 8002ce6:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002cee:	d130      	bne.n	8002d52 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8002cf0:	4b23      	ldr	r3, [pc, #140]	; (8002d80 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002cf8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002cfc:	d038      	beq.n	8002d70 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002cfe:	4b20      	ldr	r3, [pc, #128]	; (8002d80 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002d06:	4a1e      	ldr	r2, [pc, #120]	; (8002d80 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002d08:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002d0c:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8002d0e:	4b1d      	ldr	r3, [pc, #116]	; (8002d84 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	2232      	movs	r2, #50	; 0x32
 8002d14:	fb02 f303 	mul.w	r3, r2, r3
 8002d18:	4a1b      	ldr	r2, [pc, #108]	; (8002d88 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8002d1a:	fba2 2303 	umull	r2, r3, r2, r3
 8002d1e:	0c9b      	lsrs	r3, r3, #18
 8002d20:	3301      	adds	r3, #1
 8002d22:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002d24:	e002      	b.n	8002d2c <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8002d26:	68fb      	ldr	r3, [r7, #12]
 8002d28:	3b01      	subs	r3, #1
 8002d2a:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002d2c:	4b14      	ldr	r3, [pc, #80]	; (8002d80 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002d2e:	695b      	ldr	r3, [r3, #20]
 8002d30:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002d34:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002d38:	d102      	bne.n	8002d40 <HAL_PWREx_ControlVoltageScaling+0x60>
 8002d3a:	68fb      	ldr	r3, [r7, #12]
 8002d3c:	2b00      	cmp	r3, #0
 8002d3e:	d1f2      	bne.n	8002d26 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002d40:	4b0f      	ldr	r3, [pc, #60]	; (8002d80 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002d42:	695b      	ldr	r3, [r3, #20]
 8002d44:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002d48:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002d4c:	d110      	bne.n	8002d70 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8002d4e:	2303      	movs	r3, #3
 8002d50:	e00f      	b.n	8002d72 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8002d52:	4b0b      	ldr	r3, [pc, #44]	; (8002d80 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002d5a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002d5e:	d007      	beq.n	8002d70 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8002d60:	4b07      	ldr	r3, [pc, #28]	; (8002d80 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002d68:	4a05      	ldr	r2, [pc, #20]	; (8002d80 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002d6a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002d6e:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8002d70:	2300      	movs	r3, #0
}
 8002d72:	4618      	mov	r0, r3
 8002d74:	3714      	adds	r7, #20
 8002d76:	46bd      	mov	sp, r7
 8002d78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d7c:	4770      	bx	lr
 8002d7e:	bf00      	nop
 8002d80:	40007000 	.word	0x40007000
 8002d84:	20000000 	.word	0x20000000
 8002d88:	431bde83 	.word	0x431bde83

08002d8c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002d8c:	b580      	push	{r7, lr}
 8002d8e:	b088      	sub	sp, #32
 8002d90:	af00      	add	r7, sp, #0
 8002d92:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	2b00      	cmp	r3, #0
 8002d98:	d101      	bne.n	8002d9e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002d9a:	2301      	movs	r3, #1
 8002d9c:	e3ca      	b.n	8003534 <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002d9e:	4b97      	ldr	r3, [pc, #604]	; (8002ffc <HAL_RCC_OscConfig+0x270>)
 8002da0:	689b      	ldr	r3, [r3, #8]
 8002da2:	f003 030c 	and.w	r3, r3, #12
 8002da6:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002da8:	4b94      	ldr	r3, [pc, #592]	; (8002ffc <HAL_RCC_OscConfig+0x270>)
 8002daa:	68db      	ldr	r3, [r3, #12]
 8002dac:	f003 0303 	and.w	r3, r3, #3
 8002db0:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	f003 0310 	and.w	r3, r3, #16
 8002dba:	2b00      	cmp	r3, #0
 8002dbc:	f000 80e4 	beq.w	8002f88 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002dc0:	69bb      	ldr	r3, [r7, #24]
 8002dc2:	2b00      	cmp	r3, #0
 8002dc4:	d007      	beq.n	8002dd6 <HAL_RCC_OscConfig+0x4a>
 8002dc6:	69bb      	ldr	r3, [r7, #24]
 8002dc8:	2b0c      	cmp	r3, #12
 8002dca:	f040 808b 	bne.w	8002ee4 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8002dce:	697b      	ldr	r3, [r7, #20]
 8002dd0:	2b01      	cmp	r3, #1
 8002dd2:	f040 8087 	bne.w	8002ee4 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002dd6:	4b89      	ldr	r3, [pc, #548]	; (8002ffc <HAL_RCC_OscConfig+0x270>)
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	f003 0302 	and.w	r3, r3, #2
 8002dde:	2b00      	cmp	r3, #0
 8002de0:	d005      	beq.n	8002dee <HAL_RCC_OscConfig+0x62>
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	699b      	ldr	r3, [r3, #24]
 8002de6:	2b00      	cmp	r3, #0
 8002de8:	d101      	bne.n	8002dee <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8002dea:	2301      	movs	r3, #1
 8002dec:	e3a2      	b.n	8003534 <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	6a1a      	ldr	r2, [r3, #32]
 8002df2:	4b82      	ldr	r3, [pc, #520]	; (8002ffc <HAL_RCC_OscConfig+0x270>)
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	f003 0308 	and.w	r3, r3, #8
 8002dfa:	2b00      	cmp	r3, #0
 8002dfc:	d004      	beq.n	8002e08 <HAL_RCC_OscConfig+0x7c>
 8002dfe:	4b7f      	ldr	r3, [pc, #508]	; (8002ffc <HAL_RCC_OscConfig+0x270>)
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002e06:	e005      	b.n	8002e14 <HAL_RCC_OscConfig+0x88>
 8002e08:	4b7c      	ldr	r3, [pc, #496]	; (8002ffc <HAL_RCC_OscConfig+0x270>)
 8002e0a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002e0e:	091b      	lsrs	r3, r3, #4
 8002e10:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002e14:	4293      	cmp	r3, r2
 8002e16:	d223      	bcs.n	8002e60 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	6a1b      	ldr	r3, [r3, #32]
 8002e1c:	4618      	mov	r0, r3
 8002e1e:	f000 fd55 	bl	80038cc <RCC_SetFlashLatencyFromMSIRange>
 8002e22:	4603      	mov	r3, r0
 8002e24:	2b00      	cmp	r3, #0
 8002e26:	d001      	beq.n	8002e2c <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8002e28:	2301      	movs	r3, #1
 8002e2a:	e383      	b.n	8003534 <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002e2c:	4b73      	ldr	r3, [pc, #460]	; (8002ffc <HAL_RCC_OscConfig+0x270>)
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	4a72      	ldr	r2, [pc, #456]	; (8002ffc <HAL_RCC_OscConfig+0x270>)
 8002e32:	f043 0308 	orr.w	r3, r3, #8
 8002e36:	6013      	str	r3, [r2, #0]
 8002e38:	4b70      	ldr	r3, [pc, #448]	; (8002ffc <HAL_RCC_OscConfig+0x270>)
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	6a1b      	ldr	r3, [r3, #32]
 8002e44:	496d      	ldr	r1, [pc, #436]	; (8002ffc <HAL_RCC_OscConfig+0x270>)
 8002e46:	4313      	orrs	r3, r2
 8002e48:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002e4a:	4b6c      	ldr	r3, [pc, #432]	; (8002ffc <HAL_RCC_OscConfig+0x270>)
 8002e4c:	685b      	ldr	r3, [r3, #4]
 8002e4e:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	69db      	ldr	r3, [r3, #28]
 8002e56:	021b      	lsls	r3, r3, #8
 8002e58:	4968      	ldr	r1, [pc, #416]	; (8002ffc <HAL_RCC_OscConfig+0x270>)
 8002e5a:	4313      	orrs	r3, r2
 8002e5c:	604b      	str	r3, [r1, #4]
 8002e5e:	e025      	b.n	8002eac <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002e60:	4b66      	ldr	r3, [pc, #408]	; (8002ffc <HAL_RCC_OscConfig+0x270>)
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	4a65      	ldr	r2, [pc, #404]	; (8002ffc <HAL_RCC_OscConfig+0x270>)
 8002e66:	f043 0308 	orr.w	r3, r3, #8
 8002e6a:	6013      	str	r3, [r2, #0]
 8002e6c:	4b63      	ldr	r3, [pc, #396]	; (8002ffc <HAL_RCC_OscConfig+0x270>)
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	6a1b      	ldr	r3, [r3, #32]
 8002e78:	4960      	ldr	r1, [pc, #384]	; (8002ffc <HAL_RCC_OscConfig+0x270>)
 8002e7a:	4313      	orrs	r3, r2
 8002e7c:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002e7e:	4b5f      	ldr	r3, [pc, #380]	; (8002ffc <HAL_RCC_OscConfig+0x270>)
 8002e80:	685b      	ldr	r3, [r3, #4]
 8002e82:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	69db      	ldr	r3, [r3, #28]
 8002e8a:	021b      	lsls	r3, r3, #8
 8002e8c:	495b      	ldr	r1, [pc, #364]	; (8002ffc <HAL_RCC_OscConfig+0x270>)
 8002e8e:	4313      	orrs	r3, r2
 8002e90:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002e92:	69bb      	ldr	r3, [r7, #24]
 8002e94:	2b00      	cmp	r3, #0
 8002e96:	d109      	bne.n	8002eac <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	6a1b      	ldr	r3, [r3, #32]
 8002e9c:	4618      	mov	r0, r3
 8002e9e:	f000 fd15 	bl	80038cc <RCC_SetFlashLatencyFromMSIRange>
 8002ea2:	4603      	mov	r3, r0
 8002ea4:	2b00      	cmp	r3, #0
 8002ea6:	d001      	beq.n	8002eac <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8002ea8:	2301      	movs	r3, #1
 8002eaa:	e343      	b.n	8003534 <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002eac:	f000 fc4a 	bl	8003744 <HAL_RCC_GetSysClockFreq>
 8002eb0:	4602      	mov	r2, r0
 8002eb2:	4b52      	ldr	r3, [pc, #328]	; (8002ffc <HAL_RCC_OscConfig+0x270>)
 8002eb4:	689b      	ldr	r3, [r3, #8]
 8002eb6:	091b      	lsrs	r3, r3, #4
 8002eb8:	f003 030f 	and.w	r3, r3, #15
 8002ebc:	4950      	ldr	r1, [pc, #320]	; (8003000 <HAL_RCC_OscConfig+0x274>)
 8002ebe:	5ccb      	ldrb	r3, [r1, r3]
 8002ec0:	f003 031f 	and.w	r3, r3, #31
 8002ec4:	fa22 f303 	lsr.w	r3, r2, r3
 8002ec8:	4a4e      	ldr	r2, [pc, #312]	; (8003004 <HAL_RCC_OscConfig+0x278>)
 8002eca:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8002ecc:	4b4e      	ldr	r3, [pc, #312]	; (8003008 <HAL_RCC_OscConfig+0x27c>)
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	4618      	mov	r0, r3
 8002ed2:	f7ff f92d 	bl	8002130 <HAL_InitTick>
 8002ed6:	4603      	mov	r3, r0
 8002ed8:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8002eda:	7bfb      	ldrb	r3, [r7, #15]
 8002edc:	2b00      	cmp	r3, #0
 8002ede:	d052      	beq.n	8002f86 <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8002ee0:	7bfb      	ldrb	r3, [r7, #15]
 8002ee2:	e327      	b.n	8003534 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	699b      	ldr	r3, [r3, #24]
 8002ee8:	2b00      	cmp	r3, #0
 8002eea:	d032      	beq.n	8002f52 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8002eec:	4b43      	ldr	r3, [pc, #268]	; (8002ffc <HAL_RCC_OscConfig+0x270>)
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	4a42      	ldr	r2, [pc, #264]	; (8002ffc <HAL_RCC_OscConfig+0x270>)
 8002ef2:	f043 0301 	orr.w	r3, r3, #1
 8002ef6:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002ef8:	f7ff f96a 	bl	80021d0 <HAL_GetTick>
 8002efc:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002efe:	e008      	b.n	8002f12 <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002f00:	f7ff f966 	bl	80021d0 <HAL_GetTick>
 8002f04:	4602      	mov	r2, r0
 8002f06:	693b      	ldr	r3, [r7, #16]
 8002f08:	1ad3      	subs	r3, r2, r3
 8002f0a:	2b02      	cmp	r3, #2
 8002f0c:	d901      	bls.n	8002f12 <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 8002f0e:	2303      	movs	r3, #3
 8002f10:	e310      	b.n	8003534 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002f12:	4b3a      	ldr	r3, [pc, #232]	; (8002ffc <HAL_RCC_OscConfig+0x270>)
 8002f14:	681b      	ldr	r3, [r3, #0]
 8002f16:	f003 0302 	and.w	r3, r3, #2
 8002f1a:	2b00      	cmp	r3, #0
 8002f1c:	d0f0      	beq.n	8002f00 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002f1e:	4b37      	ldr	r3, [pc, #220]	; (8002ffc <HAL_RCC_OscConfig+0x270>)
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	4a36      	ldr	r2, [pc, #216]	; (8002ffc <HAL_RCC_OscConfig+0x270>)
 8002f24:	f043 0308 	orr.w	r3, r3, #8
 8002f28:	6013      	str	r3, [r2, #0]
 8002f2a:	4b34      	ldr	r3, [pc, #208]	; (8002ffc <HAL_RCC_OscConfig+0x270>)
 8002f2c:	681b      	ldr	r3, [r3, #0]
 8002f2e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	6a1b      	ldr	r3, [r3, #32]
 8002f36:	4931      	ldr	r1, [pc, #196]	; (8002ffc <HAL_RCC_OscConfig+0x270>)
 8002f38:	4313      	orrs	r3, r2
 8002f3a:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002f3c:	4b2f      	ldr	r3, [pc, #188]	; (8002ffc <HAL_RCC_OscConfig+0x270>)
 8002f3e:	685b      	ldr	r3, [r3, #4]
 8002f40:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	69db      	ldr	r3, [r3, #28]
 8002f48:	021b      	lsls	r3, r3, #8
 8002f4a:	492c      	ldr	r1, [pc, #176]	; (8002ffc <HAL_RCC_OscConfig+0x270>)
 8002f4c:	4313      	orrs	r3, r2
 8002f4e:	604b      	str	r3, [r1, #4]
 8002f50:	e01a      	b.n	8002f88 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8002f52:	4b2a      	ldr	r3, [pc, #168]	; (8002ffc <HAL_RCC_OscConfig+0x270>)
 8002f54:	681b      	ldr	r3, [r3, #0]
 8002f56:	4a29      	ldr	r2, [pc, #164]	; (8002ffc <HAL_RCC_OscConfig+0x270>)
 8002f58:	f023 0301 	bic.w	r3, r3, #1
 8002f5c:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002f5e:	f7ff f937 	bl	80021d0 <HAL_GetTick>
 8002f62:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002f64:	e008      	b.n	8002f78 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002f66:	f7ff f933 	bl	80021d0 <HAL_GetTick>
 8002f6a:	4602      	mov	r2, r0
 8002f6c:	693b      	ldr	r3, [r7, #16]
 8002f6e:	1ad3      	subs	r3, r2, r3
 8002f70:	2b02      	cmp	r3, #2
 8002f72:	d901      	bls.n	8002f78 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8002f74:	2303      	movs	r3, #3
 8002f76:	e2dd      	b.n	8003534 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002f78:	4b20      	ldr	r3, [pc, #128]	; (8002ffc <HAL_RCC_OscConfig+0x270>)
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	f003 0302 	and.w	r3, r3, #2
 8002f80:	2b00      	cmp	r3, #0
 8002f82:	d1f0      	bne.n	8002f66 <HAL_RCC_OscConfig+0x1da>
 8002f84:	e000      	b.n	8002f88 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002f86:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	f003 0301 	and.w	r3, r3, #1
 8002f90:	2b00      	cmp	r3, #0
 8002f92:	d074      	beq.n	800307e <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8002f94:	69bb      	ldr	r3, [r7, #24]
 8002f96:	2b08      	cmp	r3, #8
 8002f98:	d005      	beq.n	8002fa6 <HAL_RCC_OscConfig+0x21a>
 8002f9a:	69bb      	ldr	r3, [r7, #24]
 8002f9c:	2b0c      	cmp	r3, #12
 8002f9e:	d10e      	bne.n	8002fbe <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8002fa0:	697b      	ldr	r3, [r7, #20]
 8002fa2:	2b03      	cmp	r3, #3
 8002fa4:	d10b      	bne.n	8002fbe <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002fa6:	4b15      	ldr	r3, [pc, #84]	; (8002ffc <HAL_RCC_OscConfig+0x270>)
 8002fa8:	681b      	ldr	r3, [r3, #0]
 8002faa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002fae:	2b00      	cmp	r3, #0
 8002fb0:	d064      	beq.n	800307c <HAL_RCC_OscConfig+0x2f0>
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	685b      	ldr	r3, [r3, #4]
 8002fb6:	2b00      	cmp	r3, #0
 8002fb8:	d160      	bne.n	800307c <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8002fba:	2301      	movs	r3, #1
 8002fbc:	e2ba      	b.n	8003534 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	685b      	ldr	r3, [r3, #4]
 8002fc2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002fc6:	d106      	bne.n	8002fd6 <HAL_RCC_OscConfig+0x24a>
 8002fc8:	4b0c      	ldr	r3, [pc, #48]	; (8002ffc <HAL_RCC_OscConfig+0x270>)
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	4a0b      	ldr	r2, [pc, #44]	; (8002ffc <HAL_RCC_OscConfig+0x270>)
 8002fce:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002fd2:	6013      	str	r3, [r2, #0]
 8002fd4:	e026      	b.n	8003024 <HAL_RCC_OscConfig+0x298>
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	685b      	ldr	r3, [r3, #4]
 8002fda:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002fde:	d115      	bne.n	800300c <HAL_RCC_OscConfig+0x280>
 8002fe0:	4b06      	ldr	r3, [pc, #24]	; (8002ffc <HAL_RCC_OscConfig+0x270>)
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	4a05      	ldr	r2, [pc, #20]	; (8002ffc <HAL_RCC_OscConfig+0x270>)
 8002fe6:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002fea:	6013      	str	r3, [r2, #0]
 8002fec:	4b03      	ldr	r3, [pc, #12]	; (8002ffc <HAL_RCC_OscConfig+0x270>)
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	4a02      	ldr	r2, [pc, #8]	; (8002ffc <HAL_RCC_OscConfig+0x270>)
 8002ff2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002ff6:	6013      	str	r3, [r2, #0]
 8002ff8:	e014      	b.n	8003024 <HAL_RCC_OscConfig+0x298>
 8002ffa:	bf00      	nop
 8002ffc:	40021000 	.word	0x40021000
 8003000:	080058d4 	.word	0x080058d4
 8003004:	20000000 	.word	0x20000000
 8003008:	20000004 	.word	0x20000004
 800300c:	4ba0      	ldr	r3, [pc, #640]	; (8003290 <HAL_RCC_OscConfig+0x504>)
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	4a9f      	ldr	r2, [pc, #636]	; (8003290 <HAL_RCC_OscConfig+0x504>)
 8003012:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003016:	6013      	str	r3, [r2, #0]
 8003018:	4b9d      	ldr	r3, [pc, #628]	; (8003290 <HAL_RCC_OscConfig+0x504>)
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	4a9c      	ldr	r2, [pc, #624]	; (8003290 <HAL_RCC_OscConfig+0x504>)
 800301e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003022:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	685b      	ldr	r3, [r3, #4]
 8003028:	2b00      	cmp	r3, #0
 800302a:	d013      	beq.n	8003054 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800302c:	f7ff f8d0 	bl	80021d0 <HAL_GetTick>
 8003030:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003032:	e008      	b.n	8003046 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003034:	f7ff f8cc 	bl	80021d0 <HAL_GetTick>
 8003038:	4602      	mov	r2, r0
 800303a:	693b      	ldr	r3, [r7, #16]
 800303c:	1ad3      	subs	r3, r2, r3
 800303e:	2b64      	cmp	r3, #100	; 0x64
 8003040:	d901      	bls.n	8003046 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8003042:	2303      	movs	r3, #3
 8003044:	e276      	b.n	8003534 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003046:	4b92      	ldr	r3, [pc, #584]	; (8003290 <HAL_RCC_OscConfig+0x504>)
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800304e:	2b00      	cmp	r3, #0
 8003050:	d0f0      	beq.n	8003034 <HAL_RCC_OscConfig+0x2a8>
 8003052:	e014      	b.n	800307e <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003054:	f7ff f8bc 	bl	80021d0 <HAL_GetTick>
 8003058:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800305a:	e008      	b.n	800306e <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800305c:	f7ff f8b8 	bl	80021d0 <HAL_GetTick>
 8003060:	4602      	mov	r2, r0
 8003062:	693b      	ldr	r3, [r7, #16]
 8003064:	1ad3      	subs	r3, r2, r3
 8003066:	2b64      	cmp	r3, #100	; 0x64
 8003068:	d901      	bls.n	800306e <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 800306a:	2303      	movs	r3, #3
 800306c:	e262      	b.n	8003534 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800306e:	4b88      	ldr	r3, [pc, #544]	; (8003290 <HAL_RCC_OscConfig+0x504>)
 8003070:	681b      	ldr	r3, [r3, #0]
 8003072:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003076:	2b00      	cmp	r3, #0
 8003078:	d1f0      	bne.n	800305c <HAL_RCC_OscConfig+0x2d0>
 800307a:	e000      	b.n	800307e <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800307c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	681b      	ldr	r3, [r3, #0]
 8003082:	f003 0302 	and.w	r3, r3, #2
 8003086:	2b00      	cmp	r3, #0
 8003088:	d060      	beq.n	800314c <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 800308a:	69bb      	ldr	r3, [r7, #24]
 800308c:	2b04      	cmp	r3, #4
 800308e:	d005      	beq.n	800309c <HAL_RCC_OscConfig+0x310>
 8003090:	69bb      	ldr	r3, [r7, #24]
 8003092:	2b0c      	cmp	r3, #12
 8003094:	d119      	bne.n	80030ca <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8003096:	697b      	ldr	r3, [r7, #20]
 8003098:	2b02      	cmp	r3, #2
 800309a:	d116      	bne.n	80030ca <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800309c:	4b7c      	ldr	r3, [pc, #496]	; (8003290 <HAL_RCC_OscConfig+0x504>)
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80030a4:	2b00      	cmp	r3, #0
 80030a6:	d005      	beq.n	80030b4 <HAL_RCC_OscConfig+0x328>
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	68db      	ldr	r3, [r3, #12]
 80030ac:	2b00      	cmp	r3, #0
 80030ae:	d101      	bne.n	80030b4 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 80030b0:	2301      	movs	r3, #1
 80030b2:	e23f      	b.n	8003534 <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80030b4:	4b76      	ldr	r3, [pc, #472]	; (8003290 <HAL_RCC_OscConfig+0x504>)
 80030b6:	685b      	ldr	r3, [r3, #4]
 80030b8:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	691b      	ldr	r3, [r3, #16]
 80030c0:	061b      	lsls	r3, r3, #24
 80030c2:	4973      	ldr	r1, [pc, #460]	; (8003290 <HAL_RCC_OscConfig+0x504>)
 80030c4:	4313      	orrs	r3, r2
 80030c6:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80030c8:	e040      	b.n	800314c <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	68db      	ldr	r3, [r3, #12]
 80030ce:	2b00      	cmp	r3, #0
 80030d0:	d023      	beq.n	800311a <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80030d2:	4b6f      	ldr	r3, [pc, #444]	; (8003290 <HAL_RCC_OscConfig+0x504>)
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	4a6e      	ldr	r2, [pc, #440]	; (8003290 <HAL_RCC_OscConfig+0x504>)
 80030d8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80030dc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80030de:	f7ff f877 	bl	80021d0 <HAL_GetTick>
 80030e2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80030e4:	e008      	b.n	80030f8 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80030e6:	f7ff f873 	bl	80021d0 <HAL_GetTick>
 80030ea:	4602      	mov	r2, r0
 80030ec:	693b      	ldr	r3, [r7, #16]
 80030ee:	1ad3      	subs	r3, r2, r3
 80030f0:	2b02      	cmp	r3, #2
 80030f2:	d901      	bls.n	80030f8 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 80030f4:	2303      	movs	r3, #3
 80030f6:	e21d      	b.n	8003534 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80030f8:	4b65      	ldr	r3, [pc, #404]	; (8003290 <HAL_RCC_OscConfig+0x504>)
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003100:	2b00      	cmp	r3, #0
 8003102:	d0f0      	beq.n	80030e6 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003104:	4b62      	ldr	r3, [pc, #392]	; (8003290 <HAL_RCC_OscConfig+0x504>)
 8003106:	685b      	ldr	r3, [r3, #4]
 8003108:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	691b      	ldr	r3, [r3, #16]
 8003110:	061b      	lsls	r3, r3, #24
 8003112:	495f      	ldr	r1, [pc, #380]	; (8003290 <HAL_RCC_OscConfig+0x504>)
 8003114:	4313      	orrs	r3, r2
 8003116:	604b      	str	r3, [r1, #4]
 8003118:	e018      	b.n	800314c <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800311a:	4b5d      	ldr	r3, [pc, #372]	; (8003290 <HAL_RCC_OscConfig+0x504>)
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	4a5c      	ldr	r2, [pc, #368]	; (8003290 <HAL_RCC_OscConfig+0x504>)
 8003120:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003124:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003126:	f7ff f853 	bl	80021d0 <HAL_GetTick>
 800312a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800312c:	e008      	b.n	8003140 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800312e:	f7ff f84f 	bl	80021d0 <HAL_GetTick>
 8003132:	4602      	mov	r2, r0
 8003134:	693b      	ldr	r3, [r7, #16]
 8003136:	1ad3      	subs	r3, r2, r3
 8003138:	2b02      	cmp	r3, #2
 800313a:	d901      	bls.n	8003140 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 800313c:	2303      	movs	r3, #3
 800313e:	e1f9      	b.n	8003534 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003140:	4b53      	ldr	r3, [pc, #332]	; (8003290 <HAL_RCC_OscConfig+0x504>)
 8003142:	681b      	ldr	r3, [r3, #0]
 8003144:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003148:	2b00      	cmp	r3, #0
 800314a:	d1f0      	bne.n	800312e <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	681b      	ldr	r3, [r3, #0]
 8003150:	f003 0308 	and.w	r3, r3, #8
 8003154:	2b00      	cmp	r3, #0
 8003156:	d03c      	beq.n	80031d2 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	695b      	ldr	r3, [r3, #20]
 800315c:	2b00      	cmp	r3, #0
 800315e:	d01c      	beq.n	800319a <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003160:	4b4b      	ldr	r3, [pc, #300]	; (8003290 <HAL_RCC_OscConfig+0x504>)
 8003162:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003166:	4a4a      	ldr	r2, [pc, #296]	; (8003290 <HAL_RCC_OscConfig+0x504>)
 8003168:	f043 0301 	orr.w	r3, r3, #1
 800316c:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003170:	f7ff f82e 	bl	80021d0 <HAL_GetTick>
 8003174:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003176:	e008      	b.n	800318a <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003178:	f7ff f82a 	bl	80021d0 <HAL_GetTick>
 800317c:	4602      	mov	r2, r0
 800317e:	693b      	ldr	r3, [r7, #16]
 8003180:	1ad3      	subs	r3, r2, r3
 8003182:	2b02      	cmp	r3, #2
 8003184:	d901      	bls.n	800318a <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8003186:	2303      	movs	r3, #3
 8003188:	e1d4      	b.n	8003534 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800318a:	4b41      	ldr	r3, [pc, #260]	; (8003290 <HAL_RCC_OscConfig+0x504>)
 800318c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003190:	f003 0302 	and.w	r3, r3, #2
 8003194:	2b00      	cmp	r3, #0
 8003196:	d0ef      	beq.n	8003178 <HAL_RCC_OscConfig+0x3ec>
 8003198:	e01b      	b.n	80031d2 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800319a:	4b3d      	ldr	r3, [pc, #244]	; (8003290 <HAL_RCC_OscConfig+0x504>)
 800319c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80031a0:	4a3b      	ldr	r2, [pc, #236]	; (8003290 <HAL_RCC_OscConfig+0x504>)
 80031a2:	f023 0301 	bic.w	r3, r3, #1
 80031a6:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80031aa:	f7ff f811 	bl	80021d0 <HAL_GetTick>
 80031ae:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80031b0:	e008      	b.n	80031c4 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80031b2:	f7ff f80d 	bl	80021d0 <HAL_GetTick>
 80031b6:	4602      	mov	r2, r0
 80031b8:	693b      	ldr	r3, [r7, #16]
 80031ba:	1ad3      	subs	r3, r2, r3
 80031bc:	2b02      	cmp	r3, #2
 80031be:	d901      	bls.n	80031c4 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 80031c0:	2303      	movs	r3, #3
 80031c2:	e1b7      	b.n	8003534 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80031c4:	4b32      	ldr	r3, [pc, #200]	; (8003290 <HAL_RCC_OscConfig+0x504>)
 80031c6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80031ca:	f003 0302 	and.w	r3, r3, #2
 80031ce:	2b00      	cmp	r3, #0
 80031d0:	d1ef      	bne.n	80031b2 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	f003 0304 	and.w	r3, r3, #4
 80031da:	2b00      	cmp	r3, #0
 80031dc:	f000 80a6 	beq.w	800332c <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 80031e0:	2300      	movs	r3, #0
 80031e2:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 80031e4:	4b2a      	ldr	r3, [pc, #168]	; (8003290 <HAL_RCC_OscConfig+0x504>)
 80031e6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80031e8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80031ec:	2b00      	cmp	r3, #0
 80031ee:	d10d      	bne.n	800320c <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80031f0:	4b27      	ldr	r3, [pc, #156]	; (8003290 <HAL_RCC_OscConfig+0x504>)
 80031f2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80031f4:	4a26      	ldr	r2, [pc, #152]	; (8003290 <HAL_RCC_OscConfig+0x504>)
 80031f6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80031fa:	6593      	str	r3, [r2, #88]	; 0x58
 80031fc:	4b24      	ldr	r3, [pc, #144]	; (8003290 <HAL_RCC_OscConfig+0x504>)
 80031fe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003200:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003204:	60bb      	str	r3, [r7, #8]
 8003206:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003208:	2301      	movs	r3, #1
 800320a:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800320c:	4b21      	ldr	r3, [pc, #132]	; (8003294 <HAL_RCC_OscConfig+0x508>)
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003214:	2b00      	cmp	r3, #0
 8003216:	d118      	bne.n	800324a <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003218:	4b1e      	ldr	r3, [pc, #120]	; (8003294 <HAL_RCC_OscConfig+0x508>)
 800321a:	681b      	ldr	r3, [r3, #0]
 800321c:	4a1d      	ldr	r2, [pc, #116]	; (8003294 <HAL_RCC_OscConfig+0x508>)
 800321e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003222:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003224:	f7fe ffd4 	bl	80021d0 <HAL_GetTick>
 8003228:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800322a:	e008      	b.n	800323e <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800322c:	f7fe ffd0 	bl	80021d0 <HAL_GetTick>
 8003230:	4602      	mov	r2, r0
 8003232:	693b      	ldr	r3, [r7, #16]
 8003234:	1ad3      	subs	r3, r2, r3
 8003236:	2b02      	cmp	r3, #2
 8003238:	d901      	bls.n	800323e <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 800323a:	2303      	movs	r3, #3
 800323c:	e17a      	b.n	8003534 <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800323e:	4b15      	ldr	r3, [pc, #84]	; (8003294 <HAL_RCC_OscConfig+0x508>)
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003246:	2b00      	cmp	r3, #0
 8003248:	d0f0      	beq.n	800322c <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	689b      	ldr	r3, [r3, #8]
 800324e:	2b01      	cmp	r3, #1
 8003250:	d108      	bne.n	8003264 <HAL_RCC_OscConfig+0x4d8>
 8003252:	4b0f      	ldr	r3, [pc, #60]	; (8003290 <HAL_RCC_OscConfig+0x504>)
 8003254:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003258:	4a0d      	ldr	r2, [pc, #52]	; (8003290 <HAL_RCC_OscConfig+0x504>)
 800325a:	f043 0301 	orr.w	r3, r3, #1
 800325e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003262:	e029      	b.n	80032b8 <HAL_RCC_OscConfig+0x52c>
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	689b      	ldr	r3, [r3, #8]
 8003268:	2b05      	cmp	r3, #5
 800326a:	d115      	bne.n	8003298 <HAL_RCC_OscConfig+0x50c>
 800326c:	4b08      	ldr	r3, [pc, #32]	; (8003290 <HAL_RCC_OscConfig+0x504>)
 800326e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003272:	4a07      	ldr	r2, [pc, #28]	; (8003290 <HAL_RCC_OscConfig+0x504>)
 8003274:	f043 0304 	orr.w	r3, r3, #4
 8003278:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800327c:	4b04      	ldr	r3, [pc, #16]	; (8003290 <HAL_RCC_OscConfig+0x504>)
 800327e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003282:	4a03      	ldr	r2, [pc, #12]	; (8003290 <HAL_RCC_OscConfig+0x504>)
 8003284:	f043 0301 	orr.w	r3, r3, #1
 8003288:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800328c:	e014      	b.n	80032b8 <HAL_RCC_OscConfig+0x52c>
 800328e:	bf00      	nop
 8003290:	40021000 	.word	0x40021000
 8003294:	40007000 	.word	0x40007000
 8003298:	4b9c      	ldr	r3, [pc, #624]	; (800350c <HAL_RCC_OscConfig+0x780>)
 800329a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800329e:	4a9b      	ldr	r2, [pc, #620]	; (800350c <HAL_RCC_OscConfig+0x780>)
 80032a0:	f023 0301 	bic.w	r3, r3, #1
 80032a4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80032a8:	4b98      	ldr	r3, [pc, #608]	; (800350c <HAL_RCC_OscConfig+0x780>)
 80032aa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80032ae:	4a97      	ldr	r2, [pc, #604]	; (800350c <HAL_RCC_OscConfig+0x780>)
 80032b0:	f023 0304 	bic.w	r3, r3, #4
 80032b4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	689b      	ldr	r3, [r3, #8]
 80032bc:	2b00      	cmp	r3, #0
 80032be:	d016      	beq.n	80032ee <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80032c0:	f7fe ff86 	bl	80021d0 <HAL_GetTick>
 80032c4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80032c6:	e00a      	b.n	80032de <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80032c8:	f7fe ff82 	bl	80021d0 <HAL_GetTick>
 80032cc:	4602      	mov	r2, r0
 80032ce:	693b      	ldr	r3, [r7, #16]
 80032d0:	1ad3      	subs	r3, r2, r3
 80032d2:	f241 3288 	movw	r2, #5000	; 0x1388
 80032d6:	4293      	cmp	r3, r2
 80032d8:	d901      	bls.n	80032de <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 80032da:	2303      	movs	r3, #3
 80032dc:	e12a      	b.n	8003534 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80032de:	4b8b      	ldr	r3, [pc, #556]	; (800350c <HAL_RCC_OscConfig+0x780>)
 80032e0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80032e4:	f003 0302 	and.w	r3, r3, #2
 80032e8:	2b00      	cmp	r3, #0
 80032ea:	d0ed      	beq.n	80032c8 <HAL_RCC_OscConfig+0x53c>
 80032ec:	e015      	b.n	800331a <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80032ee:	f7fe ff6f 	bl	80021d0 <HAL_GetTick>
 80032f2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80032f4:	e00a      	b.n	800330c <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80032f6:	f7fe ff6b 	bl	80021d0 <HAL_GetTick>
 80032fa:	4602      	mov	r2, r0
 80032fc:	693b      	ldr	r3, [r7, #16]
 80032fe:	1ad3      	subs	r3, r2, r3
 8003300:	f241 3288 	movw	r2, #5000	; 0x1388
 8003304:	4293      	cmp	r3, r2
 8003306:	d901      	bls.n	800330c <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8003308:	2303      	movs	r3, #3
 800330a:	e113      	b.n	8003534 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800330c:	4b7f      	ldr	r3, [pc, #508]	; (800350c <HAL_RCC_OscConfig+0x780>)
 800330e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003312:	f003 0302 	and.w	r3, r3, #2
 8003316:	2b00      	cmp	r3, #0
 8003318:	d1ed      	bne.n	80032f6 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800331a:	7ffb      	ldrb	r3, [r7, #31]
 800331c:	2b01      	cmp	r3, #1
 800331e:	d105      	bne.n	800332c <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003320:	4b7a      	ldr	r3, [pc, #488]	; (800350c <HAL_RCC_OscConfig+0x780>)
 8003322:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003324:	4a79      	ldr	r2, [pc, #484]	; (800350c <HAL_RCC_OscConfig+0x780>)
 8003326:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800332a:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003330:	2b00      	cmp	r3, #0
 8003332:	f000 80fe 	beq.w	8003532 <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800333a:	2b02      	cmp	r3, #2
 800333c:	f040 80d0 	bne.w	80034e0 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8003340:	4b72      	ldr	r3, [pc, #456]	; (800350c <HAL_RCC_OscConfig+0x780>)
 8003342:	68db      	ldr	r3, [r3, #12]
 8003344:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003346:	697b      	ldr	r3, [r7, #20]
 8003348:	f003 0203 	and.w	r2, r3, #3
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003350:	429a      	cmp	r2, r3
 8003352:	d130      	bne.n	80033b6 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003354:	697b      	ldr	r3, [r7, #20]
 8003356:	f003 0270 	and.w	r2, r3, #112	; 0x70
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800335e:	3b01      	subs	r3, #1
 8003360:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003362:	429a      	cmp	r2, r3
 8003364:	d127      	bne.n	80033b6 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003366:	697b      	ldr	r3, [r7, #20]
 8003368:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003370:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003372:	429a      	cmp	r2, r3
 8003374:	d11f      	bne.n	80033b6 <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8003376:	697b      	ldr	r3, [r7, #20]
 8003378:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800337c:	687a      	ldr	r2, [r7, #4]
 800337e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003380:	2a07      	cmp	r2, #7
 8003382:	bf14      	ite	ne
 8003384:	2201      	movne	r2, #1
 8003386:	2200      	moveq	r2, #0
 8003388:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800338a:	4293      	cmp	r3, r2
 800338c:	d113      	bne.n	80033b6 <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800338e:	697b      	ldr	r3, [r7, #20]
 8003390:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003398:	085b      	lsrs	r3, r3, #1
 800339a:	3b01      	subs	r3, #1
 800339c:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 800339e:	429a      	cmp	r2, r3
 80033a0:	d109      	bne.n	80033b6 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80033a2:	697b      	ldr	r3, [r7, #20]
 80033a4:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033ac:	085b      	lsrs	r3, r3, #1
 80033ae:	3b01      	subs	r3, #1
 80033b0:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80033b2:	429a      	cmp	r2, r3
 80033b4:	d06e      	beq.n	8003494 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80033b6:	69bb      	ldr	r3, [r7, #24]
 80033b8:	2b0c      	cmp	r3, #12
 80033ba:	d069      	beq.n	8003490 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 80033bc:	4b53      	ldr	r3, [pc, #332]	; (800350c <HAL_RCC_OscConfig+0x780>)
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80033c4:	2b00      	cmp	r3, #0
 80033c6:	d105      	bne.n	80033d4 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 80033c8:	4b50      	ldr	r3, [pc, #320]	; (800350c <HAL_RCC_OscConfig+0x780>)
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80033d0:	2b00      	cmp	r3, #0
 80033d2:	d001      	beq.n	80033d8 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 80033d4:	2301      	movs	r3, #1
 80033d6:	e0ad      	b.n	8003534 <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 80033d8:	4b4c      	ldr	r3, [pc, #304]	; (800350c <HAL_RCC_OscConfig+0x780>)
 80033da:	681b      	ldr	r3, [r3, #0]
 80033dc:	4a4b      	ldr	r2, [pc, #300]	; (800350c <HAL_RCC_OscConfig+0x780>)
 80033de:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80033e2:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80033e4:	f7fe fef4 	bl	80021d0 <HAL_GetTick>
 80033e8:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80033ea:	e008      	b.n	80033fe <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80033ec:	f7fe fef0 	bl	80021d0 <HAL_GetTick>
 80033f0:	4602      	mov	r2, r0
 80033f2:	693b      	ldr	r3, [r7, #16]
 80033f4:	1ad3      	subs	r3, r2, r3
 80033f6:	2b02      	cmp	r3, #2
 80033f8:	d901      	bls.n	80033fe <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 80033fa:	2303      	movs	r3, #3
 80033fc:	e09a      	b.n	8003534 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80033fe:	4b43      	ldr	r3, [pc, #268]	; (800350c <HAL_RCC_OscConfig+0x780>)
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003406:	2b00      	cmp	r3, #0
 8003408:	d1f0      	bne.n	80033ec <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800340a:	4b40      	ldr	r3, [pc, #256]	; (800350c <HAL_RCC_OscConfig+0x780>)
 800340c:	68da      	ldr	r2, [r3, #12]
 800340e:	4b40      	ldr	r3, [pc, #256]	; (8003510 <HAL_RCC_OscConfig+0x784>)
 8003410:	4013      	ands	r3, r2
 8003412:	687a      	ldr	r2, [r7, #4]
 8003414:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8003416:	687a      	ldr	r2, [r7, #4]
 8003418:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800341a:	3a01      	subs	r2, #1
 800341c:	0112      	lsls	r2, r2, #4
 800341e:	4311      	orrs	r1, r2
 8003420:	687a      	ldr	r2, [r7, #4]
 8003422:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8003424:	0212      	lsls	r2, r2, #8
 8003426:	4311      	orrs	r1, r2
 8003428:	687a      	ldr	r2, [r7, #4]
 800342a:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 800342c:	0852      	lsrs	r2, r2, #1
 800342e:	3a01      	subs	r2, #1
 8003430:	0552      	lsls	r2, r2, #21
 8003432:	4311      	orrs	r1, r2
 8003434:	687a      	ldr	r2, [r7, #4]
 8003436:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8003438:	0852      	lsrs	r2, r2, #1
 800343a:	3a01      	subs	r2, #1
 800343c:	0652      	lsls	r2, r2, #25
 800343e:	4311      	orrs	r1, r2
 8003440:	687a      	ldr	r2, [r7, #4]
 8003442:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003444:	0912      	lsrs	r2, r2, #4
 8003446:	0452      	lsls	r2, r2, #17
 8003448:	430a      	orrs	r2, r1
 800344a:	4930      	ldr	r1, [pc, #192]	; (800350c <HAL_RCC_OscConfig+0x780>)
 800344c:	4313      	orrs	r3, r2
 800344e:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8003450:	4b2e      	ldr	r3, [pc, #184]	; (800350c <HAL_RCC_OscConfig+0x780>)
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	4a2d      	ldr	r2, [pc, #180]	; (800350c <HAL_RCC_OscConfig+0x780>)
 8003456:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800345a:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800345c:	4b2b      	ldr	r3, [pc, #172]	; (800350c <HAL_RCC_OscConfig+0x780>)
 800345e:	68db      	ldr	r3, [r3, #12]
 8003460:	4a2a      	ldr	r2, [pc, #168]	; (800350c <HAL_RCC_OscConfig+0x780>)
 8003462:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003466:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8003468:	f7fe feb2 	bl	80021d0 <HAL_GetTick>
 800346c:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800346e:	e008      	b.n	8003482 <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003470:	f7fe feae 	bl	80021d0 <HAL_GetTick>
 8003474:	4602      	mov	r2, r0
 8003476:	693b      	ldr	r3, [r7, #16]
 8003478:	1ad3      	subs	r3, r2, r3
 800347a:	2b02      	cmp	r3, #2
 800347c:	d901      	bls.n	8003482 <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 800347e:	2303      	movs	r3, #3
 8003480:	e058      	b.n	8003534 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003482:	4b22      	ldr	r3, [pc, #136]	; (800350c <HAL_RCC_OscConfig+0x780>)
 8003484:	681b      	ldr	r3, [r3, #0]
 8003486:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800348a:	2b00      	cmp	r3, #0
 800348c:	d0f0      	beq.n	8003470 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800348e:	e050      	b.n	8003532 <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8003490:	2301      	movs	r3, #1
 8003492:	e04f      	b.n	8003534 <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003494:	4b1d      	ldr	r3, [pc, #116]	; (800350c <HAL_RCC_OscConfig+0x780>)
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800349c:	2b00      	cmp	r3, #0
 800349e:	d148      	bne.n	8003532 <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 80034a0:	4b1a      	ldr	r3, [pc, #104]	; (800350c <HAL_RCC_OscConfig+0x780>)
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	4a19      	ldr	r2, [pc, #100]	; (800350c <HAL_RCC_OscConfig+0x780>)
 80034a6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80034aa:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80034ac:	4b17      	ldr	r3, [pc, #92]	; (800350c <HAL_RCC_OscConfig+0x780>)
 80034ae:	68db      	ldr	r3, [r3, #12]
 80034b0:	4a16      	ldr	r2, [pc, #88]	; (800350c <HAL_RCC_OscConfig+0x780>)
 80034b2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80034b6:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80034b8:	f7fe fe8a 	bl	80021d0 <HAL_GetTick>
 80034bc:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80034be:	e008      	b.n	80034d2 <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80034c0:	f7fe fe86 	bl	80021d0 <HAL_GetTick>
 80034c4:	4602      	mov	r2, r0
 80034c6:	693b      	ldr	r3, [r7, #16]
 80034c8:	1ad3      	subs	r3, r2, r3
 80034ca:	2b02      	cmp	r3, #2
 80034cc:	d901      	bls.n	80034d2 <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 80034ce:	2303      	movs	r3, #3
 80034d0:	e030      	b.n	8003534 <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80034d2:	4b0e      	ldr	r3, [pc, #56]	; (800350c <HAL_RCC_OscConfig+0x780>)
 80034d4:	681b      	ldr	r3, [r3, #0]
 80034d6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80034da:	2b00      	cmp	r3, #0
 80034dc:	d0f0      	beq.n	80034c0 <HAL_RCC_OscConfig+0x734>
 80034de:	e028      	b.n	8003532 <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 80034e0:	69bb      	ldr	r3, [r7, #24]
 80034e2:	2b0c      	cmp	r3, #12
 80034e4:	d023      	beq.n	800352e <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80034e6:	4b09      	ldr	r3, [pc, #36]	; (800350c <HAL_RCC_OscConfig+0x780>)
 80034e8:	681b      	ldr	r3, [r3, #0]
 80034ea:	4a08      	ldr	r2, [pc, #32]	; (800350c <HAL_RCC_OscConfig+0x780>)
 80034ec:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80034f0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80034f2:	f7fe fe6d 	bl	80021d0 <HAL_GetTick>
 80034f6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80034f8:	e00c      	b.n	8003514 <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80034fa:	f7fe fe69 	bl	80021d0 <HAL_GetTick>
 80034fe:	4602      	mov	r2, r0
 8003500:	693b      	ldr	r3, [r7, #16]
 8003502:	1ad3      	subs	r3, r2, r3
 8003504:	2b02      	cmp	r3, #2
 8003506:	d905      	bls.n	8003514 <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 8003508:	2303      	movs	r3, #3
 800350a:	e013      	b.n	8003534 <HAL_RCC_OscConfig+0x7a8>
 800350c:	40021000 	.word	0x40021000
 8003510:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003514:	4b09      	ldr	r3, [pc, #36]	; (800353c <HAL_RCC_OscConfig+0x7b0>)
 8003516:	681b      	ldr	r3, [r3, #0]
 8003518:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800351c:	2b00      	cmp	r3, #0
 800351e:	d1ec      	bne.n	80034fa <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8003520:	4b06      	ldr	r3, [pc, #24]	; (800353c <HAL_RCC_OscConfig+0x7b0>)
 8003522:	68da      	ldr	r2, [r3, #12]
 8003524:	4905      	ldr	r1, [pc, #20]	; (800353c <HAL_RCC_OscConfig+0x7b0>)
 8003526:	4b06      	ldr	r3, [pc, #24]	; (8003540 <HAL_RCC_OscConfig+0x7b4>)
 8003528:	4013      	ands	r3, r2
 800352a:	60cb      	str	r3, [r1, #12]
 800352c:	e001      	b.n	8003532 <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 800352e:	2301      	movs	r3, #1
 8003530:	e000      	b.n	8003534 <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 8003532:	2300      	movs	r3, #0
}
 8003534:	4618      	mov	r0, r3
 8003536:	3720      	adds	r7, #32
 8003538:	46bd      	mov	sp, r7
 800353a:	bd80      	pop	{r7, pc}
 800353c:	40021000 	.word	0x40021000
 8003540:	feeefffc 	.word	0xfeeefffc

08003544 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003544:	b580      	push	{r7, lr}
 8003546:	b084      	sub	sp, #16
 8003548:	af00      	add	r7, sp, #0
 800354a:	6078      	str	r0, [r7, #4]
 800354c:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	2b00      	cmp	r3, #0
 8003552:	d101      	bne.n	8003558 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003554:	2301      	movs	r3, #1
 8003556:	e0e7      	b.n	8003728 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003558:	4b75      	ldr	r3, [pc, #468]	; (8003730 <HAL_RCC_ClockConfig+0x1ec>)
 800355a:	681b      	ldr	r3, [r3, #0]
 800355c:	f003 0307 	and.w	r3, r3, #7
 8003560:	683a      	ldr	r2, [r7, #0]
 8003562:	429a      	cmp	r2, r3
 8003564:	d910      	bls.n	8003588 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003566:	4b72      	ldr	r3, [pc, #456]	; (8003730 <HAL_RCC_ClockConfig+0x1ec>)
 8003568:	681b      	ldr	r3, [r3, #0]
 800356a:	f023 0207 	bic.w	r2, r3, #7
 800356e:	4970      	ldr	r1, [pc, #448]	; (8003730 <HAL_RCC_ClockConfig+0x1ec>)
 8003570:	683b      	ldr	r3, [r7, #0]
 8003572:	4313      	orrs	r3, r2
 8003574:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003576:	4b6e      	ldr	r3, [pc, #440]	; (8003730 <HAL_RCC_ClockConfig+0x1ec>)
 8003578:	681b      	ldr	r3, [r3, #0]
 800357a:	f003 0307 	and.w	r3, r3, #7
 800357e:	683a      	ldr	r2, [r7, #0]
 8003580:	429a      	cmp	r2, r3
 8003582:	d001      	beq.n	8003588 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8003584:	2301      	movs	r3, #1
 8003586:	e0cf      	b.n	8003728 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	f003 0302 	and.w	r3, r3, #2
 8003590:	2b00      	cmp	r3, #0
 8003592:	d010      	beq.n	80035b6 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	689a      	ldr	r2, [r3, #8]
 8003598:	4b66      	ldr	r3, [pc, #408]	; (8003734 <HAL_RCC_ClockConfig+0x1f0>)
 800359a:	689b      	ldr	r3, [r3, #8]
 800359c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80035a0:	429a      	cmp	r2, r3
 80035a2:	d908      	bls.n	80035b6 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80035a4:	4b63      	ldr	r3, [pc, #396]	; (8003734 <HAL_RCC_ClockConfig+0x1f0>)
 80035a6:	689b      	ldr	r3, [r3, #8]
 80035a8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	689b      	ldr	r3, [r3, #8]
 80035b0:	4960      	ldr	r1, [pc, #384]	; (8003734 <HAL_RCC_ClockConfig+0x1f0>)
 80035b2:	4313      	orrs	r3, r2
 80035b4:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	681b      	ldr	r3, [r3, #0]
 80035ba:	f003 0301 	and.w	r3, r3, #1
 80035be:	2b00      	cmp	r3, #0
 80035c0:	d04c      	beq.n	800365c <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	685b      	ldr	r3, [r3, #4]
 80035c6:	2b03      	cmp	r3, #3
 80035c8:	d107      	bne.n	80035da <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80035ca:	4b5a      	ldr	r3, [pc, #360]	; (8003734 <HAL_RCC_ClockConfig+0x1f0>)
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80035d2:	2b00      	cmp	r3, #0
 80035d4:	d121      	bne.n	800361a <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 80035d6:	2301      	movs	r3, #1
 80035d8:	e0a6      	b.n	8003728 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	685b      	ldr	r3, [r3, #4]
 80035de:	2b02      	cmp	r3, #2
 80035e0:	d107      	bne.n	80035f2 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80035e2:	4b54      	ldr	r3, [pc, #336]	; (8003734 <HAL_RCC_ClockConfig+0x1f0>)
 80035e4:	681b      	ldr	r3, [r3, #0]
 80035e6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80035ea:	2b00      	cmp	r3, #0
 80035ec:	d115      	bne.n	800361a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80035ee:	2301      	movs	r3, #1
 80035f0:	e09a      	b.n	8003728 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	685b      	ldr	r3, [r3, #4]
 80035f6:	2b00      	cmp	r3, #0
 80035f8:	d107      	bne.n	800360a <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80035fa:	4b4e      	ldr	r3, [pc, #312]	; (8003734 <HAL_RCC_ClockConfig+0x1f0>)
 80035fc:	681b      	ldr	r3, [r3, #0]
 80035fe:	f003 0302 	and.w	r3, r3, #2
 8003602:	2b00      	cmp	r3, #0
 8003604:	d109      	bne.n	800361a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8003606:	2301      	movs	r3, #1
 8003608:	e08e      	b.n	8003728 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800360a:	4b4a      	ldr	r3, [pc, #296]	; (8003734 <HAL_RCC_ClockConfig+0x1f0>)
 800360c:	681b      	ldr	r3, [r3, #0]
 800360e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003612:	2b00      	cmp	r3, #0
 8003614:	d101      	bne.n	800361a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8003616:	2301      	movs	r3, #1
 8003618:	e086      	b.n	8003728 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800361a:	4b46      	ldr	r3, [pc, #280]	; (8003734 <HAL_RCC_ClockConfig+0x1f0>)
 800361c:	689b      	ldr	r3, [r3, #8]
 800361e:	f023 0203 	bic.w	r2, r3, #3
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	685b      	ldr	r3, [r3, #4]
 8003626:	4943      	ldr	r1, [pc, #268]	; (8003734 <HAL_RCC_ClockConfig+0x1f0>)
 8003628:	4313      	orrs	r3, r2
 800362a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800362c:	f7fe fdd0 	bl	80021d0 <HAL_GetTick>
 8003630:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003632:	e00a      	b.n	800364a <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003634:	f7fe fdcc 	bl	80021d0 <HAL_GetTick>
 8003638:	4602      	mov	r2, r0
 800363a:	68fb      	ldr	r3, [r7, #12]
 800363c:	1ad3      	subs	r3, r2, r3
 800363e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003642:	4293      	cmp	r3, r2
 8003644:	d901      	bls.n	800364a <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8003646:	2303      	movs	r3, #3
 8003648:	e06e      	b.n	8003728 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800364a:	4b3a      	ldr	r3, [pc, #232]	; (8003734 <HAL_RCC_ClockConfig+0x1f0>)
 800364c:	689b      	ldr	r3, [r3, #8]
 800364e:	f003 020c 	and.w	r2, r3, #12
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	685b      	ldr	r3, [r3, #4]
 8003656:	009b      	lsls	r3, r3, #2
 8003658:	429a      	cmp	r2, r3
 800365a:	d1eb      	bne.n	8003634 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	f003 0302 	and.w	r3, r3, #2
 8003664:	2b00      	cmp	r3, #0
 8003666:	d010      	beq.n	800368a <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	689a      	ldr	r2, [r3, #8]
 800366c:	4b31      	ldr	r3, [pc, #196]	; (8003734 <HAL_RCC_ClockConfig+0x1f0>)
 800366e:	689b      	ldr	r3, [r3, #8]
 8003670:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003674:	429a      	cmp	r2, r3
 8003676:	d208      	bcs.n	800368a <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003678:	4b2e      	ldr	r3, [pc, #184]	; (8003734 <HAL_RCC_ClockConfig+0x1f0>)
 800367a:	689b      	ldr	r3, [r3, #8]
 800367c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	689b      	ldr	r3, [r3, #8]
 8003684:	492b      	ldr	r1, [pc, #172]	; (8003734 <HAL_RCC_ClockConfig+0x1f0>)
 8003686:	4313      	orrs	r3, r2
 8003688:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800368a:	4b29      	ldr	r3, [pc, #164]	; (8003730 <HAL_RCC_ClockConfig+0x1ec>)
 800368c:	681b      	ldr	r3, [r3, #0]
 800368e:	f003 0307 	and.w	r3, r3, #7
 8003692:	683a      	ldr	r2, [r7, #0]
 8003694:	429a      	cmp	r2, r3
 8003696:	d210      	bcs.n	80036ba <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003698:	4b25      	ldr	r3, [pc, #148]	; (8003730 <HAL_RCC_ClockConfig+0x1ec>)
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	f023 0207 	bic.w	r2, r3, #7
 80036a0:	4923      	ldr	r1, [pc, #140]	; (8003730 <HAL_RCC_ClockConfig+0x1ec>)
 80036a2:	683b      	ldr	r3, [r7, #0]
 80036a4:	4313      	orrs	r3, r2
 80036a6:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80036a8:	4b21      	ldr	r3, [pc, #132]	; (8003730 <HAL_RCC_ClockConfig+0x1ec>)
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	f003 0307 	and.w	r3, r3, #7
 80036b0:	683a      	ldr	r2, [r7, #0]
 80036b2:	429a      	cmp	r2, r3
 80036b4:	d001      	beq.n	80036ba <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 80036b6:	2301      	movs	r3, #1
 80036b8:	e036      	b.n	8003728 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	681b      	ldr	r3, [r3, #0]
 80036be:	f003 0304 	and.w	r3, r3, #4
 80036c2:	2b00      	cmp	r3, #0
 80036c4:	d008      	beq.n	80036d8 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80036c6:	4b1b      	ldr	r3, [pc, #108]	; (8003734 <HAL_RCC_ClockConfig+0x1f0>)
 80036c8:	689b      	ldr	r3, [r3, #8]
 80036ca:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	68db      	ldr	r3, [r3, #12]
 80036d2:	4918      	ldr	r1, [pc, #96]	; (8003734 <HAL_RCC_ClockConfig+0x1f0>)
 80036d4:	4313      	orrs	r3, r2
 80036d6:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	f003 0308 	and.w	r3, r3, #8
 80036e0:	2b00      	cmp	r3, #0
 80036e2:	d009      	beq.n	80036f8 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80036e4:	4b13      	ldr	r3, [pc, #76]	; (8003734 <HAL_RCC_ClockConfig+0x1f0>)
 80036e6:	689b      	ldr	r3, [r3, #8]
 80036e8:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	691b      	ldr	r3, [r3, #16]
 80036f0:	00db      	lsls	r3, r3, #3
 80036f2:	4910      	ldr	r1, [pc, #64]	; (8003734 <HAL_RCC_ClockConfig+0x1f0>)
 80036f4:	4313      	orrs	r3, r2
 80036f6:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80036f8:	f000 f824 	bl	8003744 <HAL_RCC_GetSysClockFreq>
 80036fc:	4602      	mov	r2, r0
 80036fe:	4b0d      	ldr	r3, [pc, #52]	; (8003734 <HAL_RCC_ClockConfig+0x1f0>)
 8003700:	689b      	ldr	r3, [r3, #8]
 8003702:	091b      	lsrs	r3, r3, #4
 8003704:	f003 030f 	and.w	r3, r3, #15
 8003708:	490b      	ldr	r1, [pc, #44]	; (8003738 <HAL_RCC_ClockConfig+0x1f4>)
 800370a:	5ccb      	ldrb	r3, [r1, r3]
 800370c:	f003 031f 	and.w	r3, r3, #31
 8003710:	fa22 f303 	lsr.w	r3, r2, r3
 8003714:	4a09      	ldr	r2, [pc, #36]	; (800373c <HAL_RCC_ClockConfig+0x1f8>)
 8003716:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8003718:	4b09      	ldr	r3, [pc, #36]	; (8003740 <HAL_RCC_ClockConfig+0x1fc>)
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	4618      	mov	r0, r3
 800371e:	f7fe fd07 	bl	8002130 <HAL_InitTick>
 8003722:	4603      	mov	r3, r0
 8003724:	72fb      	strb	r3, [r7, #11]

  return status;
 8003726:	7afb      	ldrb	r3, [r7, #11]
}
 8003728:	4618      	mov	r0, r3
 800372a:	3710      	adds	r7, #16
 800372c:	46bd      	mov	sp, r7
 800372e:	bd80      	pop	{r7, pc}
 8003730:	40022000 	.word	0x40022000
 8003734:	40021000 	.word	0x40021000
 8003738:	080058d4 	.word	0x080058d4
 800373c:	20000000 	.word	0x20000000
 8003740:	20000004 	.word	0x20000004

08003744 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003744:	b480      	push	{r7}
 8003746:	b089      	sub	sp, #36	; 0x24
 8003748:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 800374a:	2300      	movs	r3, #0
 800374c:	61fb      	str	r3, [r7, #28]
 800374e:	2300      	movs	r3, #0
 8003750:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003752:	4b3e      	ldr	r3, [pc, #248]	; (800384c <HAL_RCC_GetSysClockFreq+0x108>)
 8003754:	689b      	ldr	r3, [r3, #8]
 8003756:	f003 030c 	and.w	r3, r3, #12
 800375a:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 800375c:	4b3b      	ldr	r3, [pc, #236]	; (800384c <HAL_RCC_GetSysClockFreq+0x108>)
 800375e:	68db      	ldr	r3, [r3, #12]
 8003760:	f003 0303 	and.w	r3, r3, #3
 8003764:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8003766:	693b      	ldr	r3, [r7, #16]
 8003768:	2b00      	cmp	r3, #0
 800376a:	d005      	beq.n	8003778 <HAL_RCC_GetSysClockFreq+0x34>
 800376c:	693b      	ldr	r3, [r7, #16]
 800376e:	2b0c      	cmp	r3, #12
 8003770:	d121      	bne.n	80037b6 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8003772:	68fb      	ldr	r3, [r7, #12]
 8003774:	2b01      	cmp	r3, #1
 8003776:	d11e      	bne.n	80037b6 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8003778:	4b34      	ldr	r3, [pc, #208]	; (800384c <HAL_RCC_GetSysClockFreq+0x108>)
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	f003 0308 	and.w	r3, r3, #8
 8003780:	2b00      	cmp	r3, #0
 8003782:	d107      	bne.n	8003794 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8003784:	4b31      	ldr	r3, [pc, #196]	; (800384c <HAL_RCC_GetSysClockFreq+0x108>)
 8003786:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800378a:	0a1b      	lsrs	r3, r3, #8
 800378c:	f003 030f 	and.w	r3, r3, #15
 8003790:	61fb      	str	r3, [r7, #28]
 8003792:	e005      	b.n	80037a0 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8003794:	4b2d      	ldr	r3, [pc, #180]	; (800384c <HAL_RCC_GetSysClockFreq+0x108>)
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	091b      	lsrs	r3, r3, #4
 800379a:	f003 030f 	and.w	r3, r3, #15
 800379e:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 80037a0:	4a2b      	ldr	r2, [pc, #172]	; (8003850 <HAL_RCC_GetSysClockFreq+0x10c>)
 80037a2:	69fb      	ldr	r3, [r7, #28]
 80037a4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80037a8:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80037aa:	693b      	ldr	r3, [r7, #16]
 80037ac:	2b00      	cmp	r3, #0
 80037ae:	d10d      	bne.n	80037cc <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 80037b0:	69fb      	ldr	r3, [r7, #28]
 80037b2:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80037b4:	e00a      	b.n	80037cc <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 80037b6:	693b      	ldr	r3, [r7, #16]
 80037b8:	2b04      	cmp	r3, #4
 80037ba:	d102      	bne.n	80037c2 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80037bc:	4b25      	ldr	r3, [pc, #148]	; (8003854 <HAL_RCC_GetSysClockFreq+0x110>)
 80037be:	61bb      	str	r3, [r7, #24]
 80037c0:	e004      	b.n	80037cc <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 80037c2:	693b      	ldr	r3, [r7, #16]
 80037c4:	2b08      	cmp	r3, #8
 80037c6:	d101      	bne.n	80037cc <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80037c8:	4b23      	ldr	r3, [pc, #140]	; (8003858 <HAL_RCC_GetSysClockFreq+0x114>)
 80037ca:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 80037cc:	693b      	ldr	r3, [r7, #16]
 80037ce:	2b0c      	cmp	r3, #12
 80037d0:	d134      	bne.n	800383c <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80037d2:	4b1e      	ldr	r3, [pc, #120]	; (800384c <HAL_RCC_GetSysClockFreq+0x108>)
 80037d4:	68db      	ldr	r3, [r3, #12]
 80037d6:	f003 0303 	and.w	r3, r3, #3
 80037da:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80037dc:	68bb      	ldr	r3, [r7, #8]
 80037de:	2b02      	cmp	r3, #2
 80037e0:	d003      	beq.n	80037ea <HAL_RCC_GetSysClockFreq+0xa6>
 80037e2:	68bb      	ldr	r3, [r7, #8]
 80037e4:	2b03      	cmp	r3, #3
 80037e6:	d003      	beq.n	80037f0 <HAL_RCC_GetSysClockFreq+0xac>
 80037e8:	e005      	b.n	80037f6 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 80037ea:	4b1a      	ldr	r3, [pc, #104]	; (8003854 <HAL_RCC_GetSysClockFreq+0x110>)
 80037ec:	617b      	str	r3, [r7, #20]
      break;
 80037ee:	e005      	b.n	80037fc <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 80037f0:	4b19      	ldr	r3, [pc, #100]	; (8003858 <HAL_RCC_GetSysClockFreq+0x114>)
 80037f2:	617b      	str	r3, [r7, #20]
      break;
 80037f4:	e002      	b.n	80037fc <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 80037f6:	69fb      	ldr	r3, [r7, #28]
 80037f8:	617b      	str	r3, [r7, #20]
      break;
 80037fa:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80037fc:	4b13      	ldr	r3, [pc, #76]	; (800384c <HAL_RCC_GetSysClockFreq+0x108>)
 80037fe:	68db      	ldr	r3, [r3, #12]
 8003800:	091b      	lsrs	r3, r3, #4
 8003802:	f003 0307 	and.w	r3, r3, #7
 8003806:	3301      	adds	r3, #1
 8003808:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 800380a:	4b10      	ldr	r3, [pc, #64]	; (800384c <HAL_RCC_GetSysClockFreq+0x108>)
 800380c:	68db      	ldr	r3, [r3, #12]
 800380e:	0a1b      	lsrs	r3, r3, #8
 8003810:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003814:	697a      	ldr	r2, [r7, #20]
 8003816:	fb03 f202 	mul.w	r2, r3, r2
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003820:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003822:	4b0a      	ldr	r3, [pc, #40]	; (800384c <HAL_RCC_GetSysClockFreq+0x108>)
 8003824:	68db      	ldr	r3, [r3, #12]
 8003826:	0e5b      	lsrs	r3, r3, #25
 8003828:	f003 0303 	and.w	r3, r3, #3
 800382c:	3301      	adds	r3, #1
 800382e:	005b      	lsls	r3, r3, #1
 8003830:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8003832:	697a      	ldr	r2, [r7, #20]
 8003834:	683b      	ldr	r3, [r7, #0]
 8003836:	fbb2 f3f3 	udiv	r3, r2, r3
 800383a:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 800383c:	69bb      	ldr	r3, [r7, #24]
}
 800383e:	4618      	mov	r0, r3
 8003840:	3724      	adds	r7, #36	; 0x24
 8003842:	46bd      	mov	sp, r7
 8003844:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003848:	4770      	bx	lr
 800384a:	bf00      	nop
 800384c:	40021000 	.word	0x40021000
 8003850:	080058ec 	.word	0x080058ec
 8003854:	00f42400 	.word	0x00f42400
 8003858:	007a1200 	.word	0x007a1200

0800385c <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800385c:	b480      	push	{r7}
 800385e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003860:	4b03      	ldr	r3, [pc, #12]	; (8003870 <HAL_RCC_GetHCLKFreq+0x14>)
 8003862:	681b      	ldr	r3, [r3, #0]
}
 8003864:	4618      	mov	r0, r3
 8003866:	46bd      	mov	sp, r7
 8003868:	f85d 7b04 	ldr.w	r7, [sp], #4
 800386c:	4770      	bx	lr
 800386e:	bf00      	nop
 8003870:	20000000 	.word	0x20000000

08003874 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003874:	b580      	push	{r7, lr}
 8003876:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8003878:	f7ff fff0 	bl	800385c <HAL_RCC_GetHCLKFreq>
 800387c:	4602      	mov	r2, r0
 800387e:	4b06      	ldr	r3, [pc, #24]	; (8003898 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003880:	689b      	ldr	r3, [r3, #8]
 8003882:	0a1b      	lsrs	r3, r3, #8
 8003884:	f003 0307 	and.w	r3, r3, #7
 8003888:	4904      	ldr	r1, [pc, #16]	; (800389c <HAL_RCC_GetPCLK1Freq+0x28>)
 800388a:	5ccb      	ldrb	r3, [r1, r3]
 800388c:	f003 031f 	and.w	r3, r3, #31
 8003890:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003894:	4618      	mov	r0, r3
 8003896:	bd80      	pop	{r7, pc}
 8003898:	40021000 	.word	0x40021000
 800389c:	080058e4 	.word	0x080058e4

080038a0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80038a0:	b580      	push	{r7, lr}
 80038a2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 80038a4:	f7ff ffda 	bl	800385c <HAL_RCC_GetHCLKFreq>
 80038a8:	4602      	mov	r2, r0
 80038aa:	4b06      	ldr	r3, [pc, #24]	; (80038c4 <HAL_RCC_GetPCLK2Freq+0x24>)
 80038ac:	689b      	ldr	r3, [r3, #8]
 80038ae:	0adb      	lsrs	r3, r3, #11
 80038b0:	f003 0307 	and.w	r3, r3, #7
 80038b4:	4904      	ldr	r1, [pc, #16]	; (80038c8 <HAL_RCC_GetPCLK2Freq+0x28>)
 80038b6:	5ccb      	ldrb	r3, [r1, r3]
 80038b8:	f003 031f 	and.w	r3, r3, #31
 80038bc:	fa22 f303 	lsr.w	r3, r2, r3
}
 80038c0:	4618      	mov	r0, r3
 80038c2:	bd80      	pop	{r7, pc}
 80038c4:	40021000 	.word	0x40021000
 80038c8:	080058e4 	.word	0x080058e4

080038cc <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 80038cc:	b580      	push	{r7, lr}
 80038ce:	b086      	sub	sp, #24
 80038d0:	af00      	add	r7, sp, #0
 80038d2:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80038d4:	2300      	movs	r3, #0
 80038d6:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 80038d8:	4b2a      	ldr	r3, [pc, #168]	; (8003984 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80038da:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80038dc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80038e0:	2b00      	cmp	r3, #0
 80038e2:	d003      	beq.n	80038ec <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 80038e4:	f7ff f9ee 	bl	8002cc4 <HAL_PWREx_GetVoltageRange>
 80038e8:	6178      	str	r0, [r7, #20]
 80038ea:	e014      	b.n	8003916 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 80038ec:	4b25      	ldr	r3, [pc, #148]	; (8003984 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80038ee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80038f0:	4a24      	ldr	r2, [pc, #144]	; (8003984 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80038f2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80038f6:	6593      	str	r3, [r2, #88]	; 0x58
 80038f8:	4b22      	ldr	r3, [pc, #136]	; (8003984 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80038fa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80038fc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003900:	60fb      	str	r3, [r7, #12]
 8003902:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8003904:	f7ff f9de 	bl	8002cc4 <HAL_PWREx_GetVoltageRange>
 8003908:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 800390a:	4b1e      	ldr	r3, [pc, #120]	; (8003984 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800390c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800390e:	4a1d      	ldr	r2, [pc, #116]	; (8003984 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003910:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003914:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003916:	697b      	ldr	r3, [r7, #20]
 8003918:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800391c:	d10b      	bne.n	8003936 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	2b80      	cmp	r3, #128	; 0x80
 8003922:	d919      	bls.n	8003958 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	2ba0      	cmp	r3, #160	; 0xa0
 8003928:	d902      	bls.n	8003930 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800392a:	2302      	movs	r3, #2
 800392c:	613b      	str	r3, [r7, #16]
 800392e:	e013      	b.n	8003958 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003930:	2301      	movs	r3, #1
 8003932:	613b      	str	r3, [r7, #16]
 8003934:	e010      	b.n	8003958 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	2b80      	cmp	r3, #128	; 0x80
 800393a:	d902      	bls.n	8003942 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 800393c:	2303      	movs	r3, #3
 800393e:	613b      	str	r3, [r7, #16]
 8003940:	e00a      	b.n	8003958 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	2b80      	cmp	r3, #128	; 0x80
 8003946:	d102      	bne.n	800394e <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8003948:	2302      	movs	r3, #2
 800394a:	613b      	str	r3, [r7, #16]
 800394c:	e004      	b.n	8003958 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	2b70      	cmp	r3, #112	; 0x70
 8003952:	d101      	bne.n	8003958 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003954:	2301      	movs	r3, #1
 8003956:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8003958:	4b0b      	ldr	r3, [pc, #44]	; (8003988 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800395a:	681b      	ldr	r3, [r3, #0]
 800395c:	f023 0207 	bic.w	r2, r3, #7
 8003960:	4909      	ldr	r1, [pc, #36]	; (8003988 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003962:	693b      	ldr	r3, [r7, #16]
 8003964:	4313      	orrs	r3, r2
 8003966:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8003968:	4b07      	ldr	r3, [pc, #28]	; (8003988 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	f003 0307 	and.w	r3, r3, #7
 8003970:	693a      	ldr	r2, [r7, #16]
 8003972:	429a      	cmp	r2, r3
 8003974:	d001      	beq.n	800397a <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8003976:	2301      	movs	r3, #1
 8003978:	e000      	b.n	800397c <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 800397a:	2300      	movs	r3, #0
}
 800397c:	4618      	mov	r0, r3
 800397e:	3718      	adds	r7, #24
 8003980:	46bd      	mov	sp, r7
 8003982:	bd80      	pop	{r7, pc}
 8003984:	40021000 	.word	0x40021000
 8003988:	40022000 	.word	0x40022000

0800398c <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800398c:	b580      	push	{r7, lr}
 800398e:	b086      	sub	sp, #24
 8003990:	af00      	add	r7, sp, #0
 8003992:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003994:	2300      	movs	r3, #0
 8003996:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003998:	2300      	movs	r3, #0
 800399a:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	681b      	ldr	r3, [r3, #0]
 80039a0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80039a4:	2b00      	cmp	r3, #0
 80039a6:	d041      	beq.n	8003a2c <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80039ac:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80039b0:	d02a      	beq.n	8003a08 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 80039b2:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80039b6:	d824      	bhi.n	8003a02 <HAL_RCCEx_PeriphCLKConfig+0x76>
 80039b8:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80039bc:	d008      	beq.n	80039d0 <HAL_RCCEx_PeriphCLKConfig+0x44>
 80039be:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80039c2:	d81e      	bhi.n	8003a02 <HAL_RCCEx_PeriphCLKConfig+0x76>
 80039c4:	2b00      	cmp	r3, #0
 80039c6:	d00a      	beq.n	80039de <HAL_RCCEx_PeriphCLKConfig+0x52>
 80039c8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80039cc:	d010      	beq.n	80039f0 <HAL_RCCEx_PeriphCLKConfig+0x64>
 80039ce:	e018      	b.n	8003a02 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80039d0:	4b86      	ldr	r3, [pc, #536]	; (8003bec <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80039d2:	68db      	ldr	r3, [r3, #12]
 80039d4:	4a85      	ldr	r2, [pc, #532]	; (8003bec <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80039d6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80039da:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 80039dc:	e015      	b.n	8003a0a <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	3304      	adds	r3, #4
 80039e2:	2100      	movs	r1, #0
 80039e4:	4618      	mov	r0, r3
 80039e6:	f000 fabb 	bl	8003f60 <RCCEx_PLLSAI1_Config>
 80039ea:	4603      	mov	r3, r0
 80039ec:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80039ee:	e00c      	b.n	8003a0a <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	3320      	adds	r3, #32
 80039f4:	2100      	movs	r1, #0
 80039f6:	4618      	mov	r0, r3
 80039f8:	f000 fba6 	bl	8004148 <RCCEx_PLLSAI2_Config>
 80039fc:	4603      	mov	r3, r0
 80039fe:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003a00:	e003      	b.n	8003a0a <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003a02:	2301      	movs	r3, #1
 8003a04:	74fb      	strb	r3, [r7, #19]
      break;
 8003a06:	e000      	b.n	8003a0a <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8003a08:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003a0a:	7cfb      	ldrb	r3, [r7, #19]
 8003a0c:	2b00      	cmp	r3, #0
 8003a0e:	d10b      	bne.n	8003a28 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003a10:	4b76      	ldr	r3, [pc, #472]	; (8003bec <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003a12:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003a16:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003a1e:	4973      	ldr	r1, [pc, #460]	; (8003bec <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003a20:	4313      	orrs	r3, r2
 8003a22:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8003a26:	e001      	b.n	8003a2c <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003a28:	7cfb      	ldrb	r3, [r7, #19]
 8003a2a:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	681b      	ldr	r3, [r3, #0]
 8003a30:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003a34:	2b00      	cmp	r3, #0
 8003a36:	d041      	beq.n	8003abc <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003a3c:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8003a40:	d02a      	beq.n	8003a98 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 8003a42:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8003a46:	d824      	bhi.n	8003a92 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8003a48:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003a4c:	d008      	beq.n	8003a60 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8003a4e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003a52:	d81e      	bhi.n	8003a92 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8003a54:	2b00      	cmp	r3, #0
 8003a56:	d00a      	beq.n	8003a6e <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8003a58:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003a5c:	d010      	beq.n	8003a80 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8003a5e:	e018      	b.n	8003a92 <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8003a60:	4b62      	ldr	r3, [pc, #392]	; (8003bec <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003a62:	68db      	ldr	r3, [r3, #12]
 8003a64:	4a61      	ldr	r2, [pc, #388]	; (8003bec <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003a66:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003a6a:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003a6c:	e015      	b.n	8003a9a <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	3304      	adds	r3, #4
 8003a72:	2100      	movs	r1, #0
 8003a74:	4618      	mov	r0, r3
 8003a76:	f000 fa73 	bl	8003f60 <RCCEx_PLLSAI1_Config>
 8003a7a:	4603      	mov	r3, r0
 8003a7c:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003a7e:	e00c      	b.n	8003a9a <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	3320      	adds	r3, #32
 8003a84:	2100      	movs	r1, #0
 8003a86:	4618      	mov	r0, r3
 8003a88:	f000 fb5e 	bl	8004148 <RCCEx_PLLSAI2_Config>
 8003a8c:	4603      	mov	r3, r0
 8003a8e:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003a90:	e003      	b.n	8003a9a <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003a92:	2301      	movs	r3, #1
 8003a94:	74fb      	strb	r3, [r7, #19]
      break;
 8003a96:	e000      	b.n	8003a9a <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 8003a98:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003a9a:	7cfb      	ldrb	r3, [r7, #19]
 8003a9c:	2b00      	cmp	r3, #0
 8003a9e:	d10b      	bne.n	8003ab8 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8003aa0:	4b52      	ldr	r3, [pc, #328]	; (8003bec <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003aa2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003aa6:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003aae:	494f      	ldr	r1, [pc, #316]	; (8003bec <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003ab0:	4313      	orrs	r3, r2
 8003ab2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8003ab6:	e001      	b.n	8003abc <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003ab8:	7cfb      	ldrb	r3, [r7, #19]
 8003aba:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003ac4:	2b00      	cmp	r3, #0
 8003ac6:	f000 80a0 	beq.w	8003c0a <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003aca:	2300      	movs	r3, #0
 8003acc:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8003ace:	4b47      	ldr	r3, [pc, #284]	; (8003bec <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003ad0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003ad2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003ad6:	2b00      	cmp	r3, #0
 8003ad8:	d101      	bne.n	8003ade <HAL_RCCEx_PeriphCLKConfig+0x152>
 8003ada:	2301      	movs	r3, #1
 8003adc:	e000      	b.n	8003ae0 <HAL_RCCEx_PeriphCLKConfig+0x154>
 8003ade:	2300      	movs	r3, #0
 8003ae0:	2b00      	cmp	r3, #0
 8003ae2:	d00d      	beq.n	8003b00 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003ae4:	4b41      	ldr	r3, [pc, #260]	; (8003bec <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003ae6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003ae8:	4a40      	ldr	r2, [pc, #256]	; (8003bec <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003aea:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003aee:	6593      	str	r3, [r2, #88]	; 0x58
 8003af0:	4b3e      	ldr	r3, [pc, #248]	; (8003bec <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003af2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003af4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003af8:	60bb      	str	r3, [r7, #8]
 8003afa:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003afc:	2301      	movs	r3, #1
 8003afe:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003b00:	4b3b      	ldr	r3, [pc, #236]	; (8003bf0 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	4a3a      	ldr	r2, [pc, #232]	; (8003bf0 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8003b06:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003b0a:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003b0c:	f7fe fb60 	bl	80021d0 <HAL_GetTick>
 8003b10:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8003b12:	e009      	b.n	8003b28 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003b14:	f7fe fb5c 	bl	80021d0 <HAL_GetTick>
 8003b18:	4602      	mov	r2, r0
 8003b1a:	68fb      	ldr	r3, [r7, #12]
 8003b1c:	1ad3      	subs	r3, r2, r3
 8003b1e:	2b02      	cmp	r3, #2
 8003b20:	d902      	bls.n	8003b28 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 8003b22:	2303      	movs	r3, #3
 8003b24:	74fb      	strb	r3, [r7, #19]
        break;
 8003b26:	e005      	b.n	8003b34 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8003b28:	4b31      	ldr	r3, [pc, #196]	; (8003bf0 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003b30:	2b00      	cmp	r3, #0
 8003b32:	d0ef      	beq.n	8003b14 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8003b34:	7cfb      	ldrb	r3, [r7, #19]
 8003b36:	2b00      	cmp	r3, #0
 8003b38:	d15c      	bne.n	8003bf4 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8003b3a:	4b2c      	ldr	r3, [pc, #176]	; (8003bec <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003b3c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003b40:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003b44:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8003b46:	697b      	ldr	r3, [r7, #20]
 8003b48:	2b00      	cmp	r3, #0
 8003b4a:	d01f      	beq.n	8003b8c <HAL_RCCEx_PeriphCLKConfig+0x200>
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003b52:	697a      	ldr	r2, [r7, #20]
 8003b54:	429a      	cmp	r2, r3
 8003b56:	d019      	beq.n	8003b8c <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8003b58:	4b24      	ldr	r3, [pc, #144]	; (8003bec <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003b5a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003b5e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003b62:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003b64:	4b21      	ldr	r3, [pc, #132]	; (8003bec <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003b66:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003b6a:	4a20      	ldr	r2, [pc, #128]	; (8003bec <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003b6c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003b70:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003b74:	4b1d      	ldr	r3, [pc, #116]	; (8003bec <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003b76:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003b7a:	4a1c      	ldr	r2, [pc, #112]	; (8003bec <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003b7c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003b80:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8003b84:	4a19      	ldr	r2, [pc, #100]	; (8003bec <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003b86:	697b      	ldr	r3, [r7, #20]
 8003b88:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8003b8c:	697b      	ldr	r3, [r7, #20]
 8003b8e:	f003 0301 	and.w	r3, r3, #1
 8003b92:	2b00      	cmp	r3, #0
 8003b94:	d016      	beq.n	8003bc4 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003b96:	f7fe fb1b 	bl	80021d0 <HAL_GetTick>
 8003b9a:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003b9c:	e00b      	b.n	8003bb6 <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003b9e:	f7fe fb17 	bl	80021d0 <HAL_GetTick>
 8003ba2:	4602      	mov	r2, r0
 8003ba4:	68fb      	ldr	r3, [r7, #12]
 8003ba6:	1ad3      	subs	r3, r2, r3
 8003ba8:	f241 3288 	movw	r2, #5000	; 0x1388
 8003bac:	4293      	cmp	r3, r2
 8003bae:	d902      	bls.n	8003bb6 <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 8003bb0:	2303      	movs	r3, #3
 8003bb2:	74fb      	strb	r3, [r7, #19]
            break;
 8003bb4:	e006      	b.n	8003bc4 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003bb6:	4b0d      	ldr	r3, [pc, #52]	; (8003bec <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003bb8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003bbc:	f003 0302 	and.w	r3, r3, #2
 8003bc0:	2b00      	cmp	r3, #0
 8003bc2:	d0ec      	beq.n	8003b9e <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8003bc4:	7cfb      	ldrb	r3, [r7, #19]
 8003bc6:	2b00      	cmp	r3, #0
 8003bc8:	d10c      	bne.n	8003be4 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003bca:	4b08      	ldr	r3, [pc, #32]	; (8003bec <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003bcc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003bd0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003bda:	4904      	ldr	r1, [pc, #16]	; (8003bec <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003bdc:	4313      	orrs	r3, r2
 8003bde:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8003be2:	e009      	b.n	8003bf8 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003be4:	7cfb      	ldrb	r3, [r7, #19]
 8003be6:	74bb      	strb	r3, [r7, #18]
 8003be8:	e006      	b.n	8003bf8 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 8003bea:	bf00      	nop
 8003bec:	40021000 	.word	0x40021000
 8003bf0:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003bf4:	7cfb      	ldrb	r3, [r7, #19]
 8003bf6:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003bf8:	7c7b      	ldrb	r3, [r7, #17]
 8003bfa:	2b01      	cmp	r3, #1
 8003bfc:	d105      	bne.n	8003c0a <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003bfe:	4b9e      	ldr	r3, [pc, #632]	; (8003e78 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003c00:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003c02:	4a9d      	ldr	r2, [pc, #628]	; (8003e78 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003c04:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003c08:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	681b      	ldr	r3, [r3, #0]
 8003c0e:	f003 0301 	and.w	r3, r3, #1
 8003c12:	2b00      	cmp	r3, #0
 8003c14:	d00a      	beq.n	8003c2c <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003c16:	4b98      	ldr	r3, [pc, #608]	; (8003e78 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003c18:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003c1c:	f023 0203 	bic.w	r2, r3, #3
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c24:	4994      	ldr	r1, [pc, #592]	; (8003e78 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003c26:	4313      	orrs	r3, r2
 8003c28:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	681b      	ldr	r3, [r3, #0]
 8003c30:	f003 0302 	and.w	r3, r3, #2
 8003c34:	2b00      	cmp	r3, #0
 8003c36:	d00a      	beq.n	8003c4e <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003c38:	4b8f      	ldr	r3, [pc, #572]	; (8003e78 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003c3a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003c3e:	f023 020c 	bic.w	r2, r3, #12
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003c46:	498c      	ldr	r1, [pc, #560]	; (8003e78 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003c48:	4313      	orrs	r3, r2
 8003c4a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	681b      	ldr	r3, [r3, #0]
 8003c52:	f003 0304 	and.w	r3, r3, #4
 8003c56:	2b00      	cmp	r3, #0
 8003c58:	d00a      	beq.n	8003c70 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003c5a:	4b87      	ldr	r3, [pc, #540]	; (8003e78 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003c5c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003c60:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c68:	4983      	ldr	r1, [pc, #524]	; (8003e78 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003c6a:	4313      	orrs	r3, r2
 8003c6c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	681b      	ldr	r3, [r3, #0]
 8003c74:	f003 0308 	and.w	r3, r3, #8
 8003c78:	2b00      	cmp	r3, #0
 8003c7a:	d00a      	beq.n	8003c92 <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003c7c:	4b7e      	ldr	r3, [pc, #504]	; (8003e78 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003c7e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003c82:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003c8a:	497b      	ldr	r1, [pc, #492]	; (8003e78 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003c8c:	4313      	orrs	r3, r2
 8003c8e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	681b      	ldr	r3, [r3, #0]
 8003c96:	f003 0310 	and.w	r3, r3, #16
 8003c9a:	2b00      	cmp	r3, #0
 8003c9c:	d00a      	beq.n	8003cb4 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8003c9e:	4b76      	ldr	r3, [pc, #472]	; (8003e78 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003ca0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003ca4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003cac:	4972      	ldr	r1, [pc, #456]	; (8003e78 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003cae:	4313      	orrs	r3, r2
 8003cb0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	f003 0320 	and.w	r3, r3, #32
 8003cbc:	2b00      	cmp	r3, #0
 8003cbe:	d00a      	beq.n	8003cd6 <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003cc0:	4b6d      	ldr	r3, [pc, #436]	; (8003e78 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003cc2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003cc6:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003cce:	496a      	ldr	r1, [pc, #424]	; (8003e78 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003cd0:	4313      	orrs	r3, r2
 8003cd2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	681b      	ldr	r3, [r3, #0]
 8003cda:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003cde:	2b00      	cmp	r3, #0
 8003ce0:	d00a      	beq.n	8003cf8 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003ce2:	4b65      	ldr	r3, [pc, #404]	; (8003e78 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003ce4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003ce8:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003cf0:	4961      	ldr	r1, [pc, #388]	; (8003e78 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003cf2:	4313      	orrs	r3, r2
 8003cf4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	681b      	ldr	r3, [r3, #0]
 8003cfc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003d00:	2b00      	cmp	r3, #0
 8003d02:	d00a      	beq.n	8003d1a <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8003d04:	4b5c      	ldr	r3, [pc, #368]	; (8003e78 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003d06:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003d0a:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003d12:	4959      	ldr	r1, [pc, #356]	; (8003e78 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003d14:	4313      	orrs	r3, r2
 8003d16:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	681b      	ldr	r3, [r3, #0]
 8003d1e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003d22:	2b00      	cmp	r3, #0
 8003d24:	d00a      	beq.n	8003d3c <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003d26:	4b54      	ldr	r3, [pc, #336]	; (8003e78 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003d28:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003d2c:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003d34:	4950      	ldr	r1, [pc, #320]	; (8003e78 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003d36:	4313      	orrs	r3, r2
 8003d38:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	681b      	ldr	r3, [r3, #0]
 8003d40:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003d44:	2b00      	cmp	r3, #0
 8003d46:	d00a      	beq.n	8003d5e <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003d48:	4b4b      	ldr	r3, [pc, #300]	; (8003e78 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003d4a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003d4e:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003d56:	4948      	ldr	r1, [pc, #288]	; (8003e78 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003d58:	4313      	orrs	r3, r2
 8003d5a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	681b      	ldr	r3, [r3, #0]
 8003d62:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003d66:	2b00      	cmp	r3, #0
 8003d68:	d00a      	beq.n	8003d80 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003d6a:	4b43      	ldr	r3, [pc, #268]	; (8003e78 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003d6c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003d70:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003d78:	493f      	ldr	r1, [pc, #252]	; (8003e78 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003d7a:	4313      	orrs	r3, r2
 8003d7c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	681b      	ldr	r3, [r3, #0]
 8003d84:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003d88:	2b00      	cmp	r3, #0
 8003d8a:	d028      	beq.n	8003dde <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003d8c:	4b3a      	ldr	r3, [pc, #232]	; (8003e78 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003d8e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003d92:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003d9a:	4937      	ldr	r1, [pc, #220]	; (8003e78 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003d9c:	4313      	orrs	r3, r2
 8003d9e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003da6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003daa:	d106      	bne.n	8003dba <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003dac:	4b32      	ldr	r3, [pc, #200]	; (8003e78 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003dae:	68db      	ldr	r3, [r3, #12]
 8003db0:	4a31      	ldr	r2, [pc, #196]	; (8003e78 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003db2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003db6:	60d3      	str	r3, [r2, #12]
 8003db8:	e011      	b.n	8003dde <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003dbe:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003dc2:	d10c      	bne.n	8003dde <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	3304      	adds	r3, #4
 8003dc8:	2101      	movs	r1, #1
 8003dca:	4618      	mov	r0, r3
 8003dcc:	f000 f8c8 	bl	8003f60 <RCCEx_PLLSAI1_Config>
 8003dd0:	4603      	mov	r3, r0
 8003dd2:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8003dd4:	7cfb      	ldrb	r3, [r7, #19]
 8003dd6:	2b00      	cmp	r3, #0
 8003dd8:	d001      	beq.n	8003dde <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 8003dda:	7cfb      	ldrb	r3, [r7, #19]
 8003ddc:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	681b      	ldr	r3, [r3, #0]
 8003de2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003de6:	2b00      	cmp	r3, #0
 8003de8:	d028      	beq.n	8003e3c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8003dea:	4b23      	ldr	r3, [pc, #140]	; (8003e78 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003dec:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003df0:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003df8:	491f      	ldr	r1, [pc, #124]	; (8003e78 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003dfa:	4313      	orrs	r3, r2
 8003dfc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e04:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003e08:	d106      	bne.n	8003e18 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003e0a:	4b1b      	ldr	r3, [pc, #108]	; (8003e78 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003e0c:	68db      	ldr	r3, [r3, #12]
 8003e0e:	4a1a      	ldr	r2, [pc, #104]	; (8003e78 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003e10:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003e14:	60d3      	str	r3, [r2, #12]
 8003e16:	e011      	b.n	8003e3c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e1c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003e20:	d10c      	bne.n	8003e3c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	3304      	adds	r3, #4
 8003e26:	2101      	movs	r1, #1
 8003e28:	4618      	mov	r0, r3
 8003e2a:	f000 f899 	bl	8003f60 <RCCEx_PLLSAI1_Config>
 8003e2e:	4603      	mov	r3, r0
 8003e30:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003e32:	7cfb      	ldrb	r3, [r7, #19]
 8003e34:	2b00      	cmp	r3, #0
 8003e36:	d001      	beq.n	8003e3c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 8003e38:	7cfb      	ldrb	r3, [r7, #19]
 8003e3a:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	681b      	ldr	r3, [r3, #0]
 8003e40:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003e44:	2b00      	cmp	r3, #0
 8003e46:	d02b      	beq.n	8003ea0 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8003e48:	4b0b      	ldr	r3, [pc, #44]	; (8003e78 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003e4a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003e4e:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003e56:	4908      	ldr	r1, [pc, #32]	; (8003e78 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003e58:	4313      	orrs	r3, r2
 8003e5a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003e62:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003e66:	d109      	bne.n	8003e7c <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003e68:	4b03      	ldr	r3, [pc, #12]	; (8003e78 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003e6a:	68db      	ldr	r3, [r3, #12]
 8003e6c:	4a02      	ldr	r2, [pc, #8]	; (8003e78 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003e6e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003e72:	60d3      	str	r3, [r2, #12]
 8003e74:	e014      	b.n	8003ea0 <HAL_RCCEx_PeriphCLKConfig+0x514>
 8003e76:	bf00      	nop
 8003e78:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003e80:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003e84:	d10c      	bne.n	8003ea0 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	3304      	adds	r3, #4
 8003e8a:	2101      	movs	r1, #1
 8003e8c:	4618      	mov	r0, r3
 8003e8e:	f000 f867 	bl	8003f60 <RCCEx_PLLSAI1_Config>
 8003e92:	4603      	mov	r3, r0
 8003e94:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003e96:	7cfb      	ldrb	r3, [r7, #19]
 8003e98:	2b00      	cmp	r3, #0
 8003e9a:	d001      	beq.n	8003ea0 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 8003e9c:	7cfb      	ldrb	r3, [r7, #19]
 8003e9e:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	681b      	ldr	r3, [r3, #0]
 8003ea4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003ea8:	2b00      	cmp	r3, #0
 8003eaa:	d02f      	beq.n	8003f0c <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003eac:	4b2b      	ldr	r3, [pc, #172]	; (8003f5c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003eae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003eb2:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003eba:	4928      	ldr	r1, [pc, #160]	; (8003f5c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003ebc:	4313      	orrs	r3, r2
 8003ebe:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003ec6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003eca:	d10d      	bne.n	8003ee8 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	3304      	adds	r3, #4
 8003ed0:	2102      	movs	r1, #2
 8003ed2:	4618      	mov	r0, r3
 8003ed4:	f000 f844 	bl	8003f60 <RCCEx_PLLSAI1_Config>
 8003ed8:	4603      	mov	r3, r0
 8003eda:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003edc:	7cfb      	ldrb	r3, [r7, #19]
 8003ede:	2b00      	cmp	r3, #0
 8003ee0:	d014      	beq.n	8003f0c <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8003ee2:	7cfb      	ldrb	r3, [r7, #19]
 8003ee4:	74bb      	strb	r3, [r7, #18]
 8003ee6:	e011      	b.n	8003f0c <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003eec:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003ef0:	d10c      	bne.n	8003f0c <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	3320      	adds	r3, #32
 8003ef6:	2102      	movs	r1, #2
 8003ef8:	4618      	mov	r0, r3
 8003efa:	f000 f925 	bl	8004148 <RCCEx_PLLSAI2_Config>
 8003efe:	4603      	mov	r3, r0
 8003f00:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003f02:	7cfb      	ldrb	r3, [r7, #19]
 8003f04:	2b00      	cmp	r3, #0
 8003f06:	d001      	beq.n	8003f0c <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8003f08:	7cfb      	ldrb	r3, [r7, #19]
 8003f0a:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	681b      	ldr	r3, [r3, #0]
 8003f10:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003f14:	2b00      	cmp	r3, #0
 8003f16:	d00a      	beq.n	8003f2e <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8003f18:	4b10      	ldr	r3, [pc, #64]	; (8003f5c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003f1a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003f1e:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003f26:	490d      	ldr	r1, [pc, #52]	; (8003f5c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003f28:	4313      	orrs	r3, r2
 8003f2a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	681b      	ldr	r3, [r3, #0]
 8003f32:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003f36:	2b00      	cmp	r3, #0
 8003f38:	d00b      	beq.n	8003f52 <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8003f3a:	4b08      	ldr	r3, [pc, #32]	; (8003f5c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003f3c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003f40:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003f4a:	4904      	ldr	r1, [pc, #16]	; (8003f5c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003f4c:	4313      	orrs	r3, r2
 8003f4e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8003f52:	7cbb      	ldrb	r3, [r7, #18]
}
 8003f54:	4618      	mov	r0, r3
 8003f56:	3718      	adds	r7, #24
 8003f58:	46bd      	mov	sp, r7
 8003f5a:	bd80      	pop	{r7, pc}
 8003f5c:	40021000 	.word	0x40021000

08003f60 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8003f60:	b580      	push	{r7, lr}
 8003f62:	b084      	sub	sp, #16
 8003f64:	af00      	add	r7, sp, #0
 8003f66:	6078      	str	r0, [r7, #4]
 8003f68:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003f6a:	2300      	movs	r3, #0
 8003f6c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8003f6e:	4b75      	ldr	r3, [pc, #468]	; (8004144 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003f70:	68db      	ldr	r3, [r3, #12]
 8003f72:	f003 0303 	and.w	r3, r3, #3
 8003f76:	2b00      	cmp	r3, #0
 8003f78:	d018      	beq.n	8003fac <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8003f7a:	4b72      	ldr	r3, [pc, #456]	; (8004144 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003f7c:	68db      	ldr	r3, [r3, #12]
 8003f7e:	f003 0203 	and.w	r2, r3, #3
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	681b      	ldr	r3, [r3, #0]
 8003f86:	429a      	cmp	r2, r3
 8003f88:	d10d      	bne.n	8003fa6 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	681b      	ldr	r3, [r3, #0]
       ||
 8003f8e:	2b00      	cmp	r3, #0
 8003f90:	d009      	beq.n	8003fa6 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8003f92:	4b6c      	ldr	r3, [pc, #432]	; (8004144 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003f94:	68db      	ldr	r3, [r3, #12]
 8003f96:	091b      	lsrs	r3, r3, #4
 8003f98:	f003 0307 	and.w	r3, r3, #7
 8003f9c:	1c5a      	adds	r2, r3, #1
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	685b      	ldr	r3, [r3, #4]
       ||
 8003fa2:	429a      	cmp	r2, r3
 8003fa4:	d047      	beq.n	8004036 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8003fa6:	2301      	movs	r3, #1
 8003fa8:	73fb      	strb	r3, [r7, #15]
 8003faa:	e044      	b.n	8004036 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	681b      	ldr	r3, [r3, #0]
 8003fb0:	2b03      	cmp	r3, #3
 8003fb2:	d018      	beq.n	8003fe6 <RCCEx_PLLSAI1_Config+0x86>
 8003fb4:	2b03      	cmp	r3, #3
 8003fb6:	d825      	bhi.n	8004004 <RCCEx_PLLSAI1_Config+0xa4>
 8003fb8:	2b01      	cmp	r3, #1
 8003fba:	d002      	beq.n	8003fc2 <RCCEx_PLLSAI1_Config+0x62>
 8003fbc:	2b02      	cmp	r3, #2
 8003fbe:	d009      	beq.n	8003fd4 <RCCEx_PLLSAI1_Config+0x74>
 8003fc0:	e020      	b.n	8004004 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8003fc2:	4b60      	ldr	r3, [pc, #384]	; (8004144 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003fc4:	681b      	ldr	r3, [r3, #0]
 8003fc6:	f003 0302 	and.w	r3, r3, #2
 8003fca:	2b00      	cmp	r3, #0
 8003fcc:	d11d      	bne.n	800400a <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8003fce:	2301      	movs	r3, #1
 8003fd0:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003fd2:	e01a      	b.n	800400a <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8003fd4:	4b5b      	ldr	r3, [pc, #364]	; (8004144 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003fd6:	681b      	ldr	r3, [r3, #0]
 8003fd8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003fdc:	2b00      	cmp	r3, #0
 8003fde:	d116      	bne.n	800400e <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8003fe0:	2301      	movs	r3, #1
 8003fe2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003fe4:	e013      	b.n	800400e <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8003fe6:	4b57      	ldr	r3, [pc, #348]	; (8004144 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003fe8:	681b      	ldr	r3, [r3, #0]
 8003fea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003fee:	2b00      	cmp	r3, #0
 8003ff0:	d10f      	bne.n	8004012 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8003ff2:	4b54      	ldr	r3, [pc, #336]	; (8004144 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003ff4:	681b      	ldr	r3, [r3, #0]
 8003ff6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003ffa:	2b00      	cmp	r3, #0
 8003ffc:	d109      	bne.n	8004012 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8003ffe:	2301      	movs	r3, #1
 8004000:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8004002:	e006      	b.n	8004012 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8004004:	2301      	movs	r3, #1
 8004006:	73fb      	strb	r3, [r7, #15]
      break;
 8004008:	e004      	b.n	8004014 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800400a:	bf00      	nop
 800400c:	e002      	b.n	8004014 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800400e:	bf00      	nop
 8004010:	e000      	b.n	8004014 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8004012:	bf00      	nop
    }

    if(status == HAL_OK)
 8004014:	7bfb      	ldrb	r3, [r7, #15]
 8004016:	2b00      	cmp	r3, #0
 8004018:	d10d      	bne.n	8004036 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 800401a:	4b4a      	ldr	r3, [pc, #296]	; (8004144 <RCCEx_PLLSAI1_Config+0x1e4>)
 800401c:	68db      	ldr	r3, [r3, #12]
 800401e:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	6819      	ldr	r1, [r3, #0]
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	685b      	ldr	r3, [r3, #4]
 800402a:	3b01      	subs	r3, #1
 800402c:	011b      	lsls	r3, r3, #4
 800402e:	430b      	orrs	r3, r1
 8004030:	4944      	ldr	r1, [pc, #272]	; (8004144 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004032:	4313      	orrs	r3, r2
 8004034:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8004036:	7bfb      	ldrb	r3, [r7, #15]
 8004038:	2b00      	cmp	r3, #0
 800403a:	d17d      	bne.n	8004138 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 800403c:	4b41      	ldr	r3, [pc, #260]	; (8004144 <RCCEx_PLLSAI1_Config+0x1e4>)
 800403e:	681b      	ldr	r3, [r3, #0]
 8004040:	4a40      	ldr	r2, [pc, #256]	; (8004144 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004042:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8004046:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004048:	f7fe f8c2 	bl	80021d0 <HAL_GetTick>
 800404c:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800404e:	e009      	b.n	8004064 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004050:	f7fe f8be 	bl	80021d0 <HAL_GetTick>
 8004054:	4602      	mov	r2, r0
 8004056:	68bb      	ldr	r3, [r7, #8]
 8004058:	1ad3      	subs	r3, r2, r3
 800405a:	2b02      	cmp	r3, #2
 800405c:	d902      	bls.n	8004064 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 800405e:	2303      	movs	r3, #3
 8004060:	73fb      	strb	r3, [r7, #15]
        break;
 8004062:	e005      	b.n	8004070 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8004064:	4b37      	ldr	r3, [pc, #220]	; (8004144 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004066:	681b      	ldr	r3, [r3, #0]
 8004068:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800406c:	2b00      	cmp	r3, #0
 800406e:	d1ef      	bne.n	8004050 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8004070:	7bfb      	ldrb	r3, [r7, #15]
 8004072:	2b00      	cmp	r3, #0
 8004074:	d160      	bne.n	8004138 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8004076:	683b      	ldr	r3, [r7, #0]
 8004078:	2b00      	cmp	r3, #0
 800407a:	d111      	bne.n	80040a0 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800407c:	4b31      	ldr	r3, [pc, #196]	; (8004144 <RCCEx_PLLSAI1_Config+0x1e4>)
 800407e:	691b      	ldr	r3, [r3, #16]
 8004080:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8004084:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004088:	687a      	ldr	r2, [r7, #4]
 800408a:	6892      	ldr	r2, [r2, #8]
 800408c:	0211      	lsls	r1, r2, #8
 800408e:	687a      	ldr	r2, [r7, #4]
 8004090:	68d2      	ldr	r2, [r2, #12]
 8004092:	0912      	lsrs	r2, r2, #4
 8004094:	0452      	lsls	r2, r2, #17
 8004096:	430a      	orrs	r2, r1
 8004098:	492a      	ldr	r1, [pc, #168]	; (8004144 <RCCEx_PLLSAI1_Config+0x1e4>)
 800409a:	4313      	orrs	r3, r2
 800409c:	610b      	str	r3, [r1, #16]
 800409e:	e027      	b.n	80040f0 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 80040a0:	683b      	ldr	r3, [r7, #0]
 80040a2:	2b01      	cmp	r3, #1
 80040a4:	d112      	bne.n	80040cc <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80040a6:	4b27      	ldr	r3, [pc, #156]	; (8004144 <RCCEx_PLLSAI1_Config+0x1e4>)
 80040a8:	691b      	ldr	r3, [r3, #16]
 80040aa:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 80040ae:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80040b2:	687a      	ldr	r2, [r7, #4]
 80040b4:	6892      	ldr	r2, [r2, #8]
 80040b6:	0211      	lsls	r1, r2, #8
 80040b8:	687a      	ldr	r2, [r7, #4]
 80040ba:	6912      	ldr	r2, [r2, #16]
 80040bc:	0852      	lsrs	r2, r2, #1
 80040be:	3a01      	subs	r2, #1
 80040c0:	0552      	lsls	r2, r2, #21
 80040c2:	430a      	orrs	r2, r1
 80040c4:	491f      	ldr	r1, [pc, #124]	; (8004144 <RCCEx_PLLSAI1_Config+0x1e4>)
 80040c6:	4313      	orrs	r3, r2
 80040c8:	610b      	str	r3, [r1, #16]
 80040ca:	e011      	b.n	80040f0 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80040cc:	4b1d      	ldr	r3, [pc, #116]	; (8004144 <RCCEx_PLLSAI1_Config+0x1e4>)
 80040ce:	691b      	ldr	r3, [r3, #16]
 80040d0:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 80040d4:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80040d8:	687a      	ldr	r2, [r7, #4]
 80040da:	6892      	ldr	r2, [r2, #8]
 80040dc:	0211      	lsls	r1, r2, #8
 80040de:	687a      	ldr	r2, [r7, #4]
 80040e0:	6952      	ldr	r2, [r2, #20]
 80040e2:	0852      	lsrs	r2, r2, #1
 80040e4:	3a01      	subs	r2, #1
 80040e6:	0652      	lsls	r2, r2, #25
 80040e8:	430a      	orrs	r2, r1
 80040ea:	4916      	ldr	r1, [pc, #88]	; (8004144 <RCCEx_PLLSAI1_Config+0x1e4>)
 80040ec:	4313      	orrs	r3, r2
 80040ee:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 80040f0:	4b14      	ldr	r3, [pc, #80]	; (8004144 <RCCEx_PLLSAI1_Config+0x1e4>)
 80040f2:	681b      	ldr	r3, [r3, #0]
 80040f4:	4a13      	ldr	r2, [pc, #76]	; (8004144 <RCCEx_PLLSAI1_Config+0x1e4>)
 80040f6:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80040fa:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80040fc:	f7fe f868 	bl	80021d0 <HAL_GetTick>
 8004100:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8004102:	e009      	b.n	8004118 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004104:	f7fe f864 	bl	80021d0 <HAL_GetTick>
 8004108:	4602      	mov	r2, r0
 800410a:	68bb      	ldr	r3, [r7, #8]
 800410c:	1ad3      	subs	r3, r2, r3
 800410e:	2b02      	cmp	r3, #2
 8004110:	d902      	bls.n	8004118 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 8004112:	2303      	movs	r3, #3
 8004114:	73fb      	strb	r3, [r7, #15]
          break;
 8004116:	e005      	b.n	8004124 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8004118:	4b0a      	ldr	r3, [pc, #40]	; (8004144 <RCCEx_PLLSAI1_Config+0x1e4>)
 800411a:	681b      	ldr	r3, [r3, #0]
 800411c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004120:	2b00      	cmp	r3, #0
 8004122:	d0ef      	beq.n	8004104 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 8004124:	7bfb      	ldrb	r3, [r7, #15]
 8004126:	2b00      	cmp	r3, #0
 8004128:	d106      	bne.n	8004138 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 800412a:	4b06      	ldr	r3, [pc, #24]	; (8004144 <RCCEx_PLLSAI1_Config+0x1e4>)
 800412c:	691a      	ldr	r2, [r3, #16]
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	699b      	ldr	r3, [r3, #24]
 8004132:	4904      	ldr	r1, [pc, #16]	; (8004144 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004134:	4313      	orrs	r3, r2
 8004136:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8004138:	7bfb      	ldrb	r3, [r7, #15]
}
 800413a:	4618      	mov	r0, r3
 800413c:	3710      	adds	r7, #16
 800413e:	46bd      	mov	sp, r7
 8004140:	bd80      	pop	{r7, pc}
 8004142:	bf00      	nop
 8004144:	40021000 	.word	0x40021000

08004148 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8004148:	b580      	push	{r7, lr}
 800414a:	b084      	sub	sp, #16
 800414c:	af00      	add	r7, sp, #0
 800414e:	6078      	str	r0, [r7, #4]
 8004150:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004152:	2300      	movs	r3, #0
 8004154:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8004156:	4b6a      	ldr	r3, [pc, #424]	; (8004300 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004158:	68db      	ldr	r3, [r3, #12]
 800415a:	f003 0303 	and.w	r3, r3, #3
 800415e:	2b00      	cmp	r3, #0
 8004160:	d018      	beq.n	8004194 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8004162:	4b67      	ldr	r3, [pc, #412]	; (8004300 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004164:	68db      	ldr	r3, [r3, #12]
 8004166:	f003 0203 	and.w	r2, r3, #3
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	681b      	ldr	r3, [r3, #0]
 800416e:	429a      	cmp	r2, r3
 8004170:	d10d      	bne.n	800418e <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	681b      	ldr	r3, [r3, #0]
       ||
 8004176:	2b00      	cmp	r3, #0
 8004178:	d009      	beq.n	800418e <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 800417a:	4b61      	ldr	r3, [pc, #388]	; (8004300 <RCCEx_PLLSAI2_Config+0x1b8>)
 800417c:	68db      	ldr	r3, [r3, #12]
 800417e:	091b      	lsrs	r3, r3, #4
 8004180:	f003 0307 	and.w	r3, r3, #7
 8004184:	1c5a      	adds	r2, r3, #1
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	685b      	ldr	r3, [r3, #4]
       ||
 800418a:	429a      	cmp	r2, r3
 800418c:	d047      	beq.n	800421e <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 800418e:	2301      	movs	r3, #1
 8004190:	73fb      	strb	r3, [r7, #15]
 8004192:	e044      	b.n	800421e <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	681b      	ldr	r3, [r3, #0]
 8004198:	2b03      	cmp	r3, #3
 800419a:	d018      	beq.n	80041ce <RCCEx_PLLSAI2_Config+0x86>
 800419c:	2b03      	cmp	r3, #3
 800419e:	d825      	bhi.n	80041ec <RCCEx_PLLSAI2_Config+0xa4>
 80041a0:	2b01      	cmp	r3, #1
 80041a2:	d002      	beq.n	80041aa <RCCEx_PLLSAI2_Config+0x62>
 80041a4:	2b02      	cmp	r3, #2
 80041a6:	d009      	beq.n	80041bc <RCCEx_PLLSAI2_Config+0x74>
 80041a8:	e020      	b.n	80041ec <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80041aa:	4b55      	ldr	r3, [pc, #340]	; (8004300 <RCCEx_PLLSAI2_Config+0x1b8>)
 80041ac:	681b      	ldr	r3, [r3, #0]
 80041ae:	f003 0302 	and.w	r3, r3, #2
 80041b2:	2b00      	cmp	r3, #0
 80041b4:	d11d      	bne.n	80041f2 <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 80041b6:	2301      	movs	r3, #1
 80041b8:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80041ba:	e01a      	b.n	80041f2 <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80041bc:	4b50      	ldr	r3, [pc, #320]	; (8004300 <RCCEx_PLLSAI2_Config+0x1b8>)
 80041be:	681b      	ldr	r3, [r3, #0]
 80041c0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80041c4:	2b00      	cmp	r3, #0
 80041c6:	d116      	bne.n	80041f6 <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 80041c8:	2301      	movs	r3, #1
 80041ca:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80041cc:	e013      	b.n	80041f6 <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80041ce:	4b4c      	ldr	r3, [pc, #304]	; (8004300 <RCCEx_PLLSAI2_Config+0x1b8>)
 80041d0:	681b      	ldr	r3, [r3, #0]
 80041d2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80041d6:	2b00      	cmp	r3, #0
 80041d8:	d10f      	bne.n	80041fa <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80041da:	4b49      	ldr	r3, [pc, #292]	; (8004300 <RCCEx_PLLSAI2_Config+0x1b8>)
 80041dc:	681b      	ldr	r3, [r3, #0]
 80041de:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80041e2:	2b00      	cmp	r3, #0
 80041e4:	d109      	bne.n	80041fa <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 80041e6:	2301      	movs	r3, #1
 80041e8:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80041ea:	e006      	b.n	80041fa <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 80041ec:	2301      	movs	r3, #1
 80041ee:	73fb      	strb	r3, [r7, #15]
      break;
 80041f0:	e004      	b.n	80041fc <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80041f2:	bf00      	nop
 80041f4:	e002      	b.n	80041fc <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80041f6:	bf00      	nop
 80041f8:	e000      	b.n	80041fc <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80041fa:	bf00      	nop
    }

    if(status == HAL_OK)
 80041fc:	7bfb      	ldrb	r3, [r7, #15]
 80041fe:	2b00      	cmp	r3, #0
 8004200:	d10d      	bne.n	800421e <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8004202:	4b3f      	ldr	r3, [pc, #252]	; (8004300 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004204:	68db      	ldr	r3, [r3, #12]
 8004206:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	6819      	ldr	r1, [r3, #0]
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	685b      	ldr	r3, [r3, #4]
 8004212:	3b01      	subs	r3, #1
 8004214:	011b      	lsls	r3, r3, #4
 8004216:	430b      	orrs	r3, r1
 8004218:	4939      	ldr	r1, [pc, #228]	; (8004300 <RCCEx_PLLSAI2_Config+0x1b8>)
 800421a:	4313      	orrs	r3, r2
 800421c:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 800421e:	7bfb      	ldrb	r3, [r7, #15]
 8004220:	2b00      	cmp	r3, #0
 8004222:	d167      	bne.n	80042f4 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8004224:	4b36      	ldr	r3, [pc, #216]	; (8004300 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004226:	681b      	ldr	r3, [r3, #0]
 8004228:	4a35      	ldr	r2, [pc, #212]	; (8004300 <RCCEx_PLLSAI2_Config+0x1b8>)
 800422a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800422e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004230:	f7fd ffce 	bl	80021d0 <HAL_GetTick>
 8004234:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8004236:	e009      	b.n	800424c <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8004238:	f7fd ffca 	bl	80021d0 <HAL_GetTick>
 800423c:	4602      	mov	r2, r0
 800423e:	68bb      	ldr	r3, [r7, #8]
 8004240:	1ad3      	subs	r3, r2, r3
 8004242:	2b02      	cmp	r3, #2
 8004244:	d902      	bls.n	800424c <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8004246:	2303      	movs	r3, #3
 8004248:	73fb      	strb	r3, [r7, #15]
        break;
 800424a:	e005      	b.n	8004258 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 800424c:	4b2c      	ldr	r3, [pc, #176]	; (8004300 <RCCEx_PLLSAI2_Config+0x1b8>)
 800424e:	681b      	ldr	r3, [r3, #0]
 8004250:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004254:	2b00      	cmp	r3, #0
 8004256:	d1ef      	bne.n	8004238 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8004258:	7bfb      	ldrb	r3, [r7, #15]
 800425a:	2b00      	cmp	r3, #0
 800425c:	d14a      	bne.n	80042f4 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800425e:	683b      	ldr	r3, [r7, #0]
 8004260:	2b00      	cmp	r3, #0
 8004262:	d111      	bne.n	8004288 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8004264:	4b26      	ldr	r3, [pc, #152]	; (8004300 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004266:	695b      	ldr	r3, [r3, #20]
 8004268:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 800426c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004270:	687a      	ldr	r2, [r7, #4]
 8004272:	6892      	ldr	r2, [r2, #8]
 8004274:	0211      	lsls	r1, r2, #8
 8004276:	687a      	ldr	r2, [r7, #4]
 8004278:	68d2      	ldr	r2, [r2, #12]
 800427a:	0912      	lsrs	r2, r2, #4
 800427c:	0452      	lsls	r2, r2, #17
 800427e:	430a      	orrs	r2, r1
 8004280:	491f      	ldr	r1, [pc, #124]	; (8004300 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004282:	4313      	orrs	r3, r2
 8004284:	614b      	str	r3, [r1, #20]
 8004286:	e011      	b.n	80042ac <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8004288:	4b1d      	ldr	r3, [pc, #116]	; (8004300 <RCCEx_PLLSAI2_Config+0x1b8>)
 800428a:	695b      	ldr	r3, [r3, #20]
 800428c:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8004290:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8004294:	687a      	ldr	r2, [r7, #4]
 8004296:	6892      	ldr	r2, [r2, #8]
 8004298:	0211      	lsls	r1, r2, #8
 800429a:	687a      	ldr	r2, [r7, #4]
 800429c:	6912      	ldr	r2, [r2, #16]
 800429e:	0852      	lsrs	r2, r2, #1
 80042a0:	3a01      	subs	r2, #1
 80042a2:	0652      	lsls	r2, r2, #25
 80042a4:	430a      	orrs	r2, r1
 80042a6:	4916      	ldr	r1, [pc, #88]	; (8004300 <RCCEx_PLLSAI2_Config+0x1b8>)
 80042a8:	4313      	orrs	r3, r2
 80042aa:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 80042ac:	4b14      	ldr	r3, [pc, #80]	; (8004300 <RCCEx_PLLSAI2_Config+0x1b8>)
 80042ae:	681b      	ldr	r3, [r3, #0]
 80042b0:	4a13      	ldr	r2, [pc, #76]	; (8004300 <RCCEx_PLLSAI2_Config+0x1b8>)
 80042b2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80042b6:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80042b8:	f7fd ff8a 	bl	80021d0 <HAL_GetTick>
 80042bc:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80042be:	e009      	b.n	80042d4 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80042c0:	f7fd ff86 	bl	80021d0 <HAL_GetTick>
 80042c4:	4602      	mov	r2, r0
 80042c6:	68bb      	ldr	r3, [r7, #8]
 80042c8:	1ad3      	subs	r3, r2, r3
 80042ca:	2b02      	cmp	r3, #2
 80042cc:	d902      	bls.n	80042d4 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 80042ce:	2303      	movs	r3, #3
 80042d0:	73fb      	strb	r3, [r7, #15]
          break;
 80042d2:	e005      	b.n	80042e0 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80042d4:	4b0a      	ldr	r3, [pc, #40]	; (8004300 <RCCEx_PLLSAI2_Config+0x1b8>)
 80042d6:	681b      	ldr	r3, [r3, #0]
 80042d8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80042dc:	2b00      	cmp	r3, #0
 80042de:	d0ef      	beq.n	80042c0 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 80042e0:	7bfb      	ldrb	r3, [r7, #15]
 80042e2:	2b00      	cmp	r3, #0
 80042e4:	d106      	bne.n	80042f4 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 80042e6:	4b06      	ldr	r3, [pc, #24]	; (8004300 <RCCEx_PLLSAI2_Config+0x1b8>)
 80042e8:	695a      	ldr	r2, [r3, #20]
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	695b      	ldr	r3, [r3, #20]
 80042ee:	4904      	ldr	r1, [pc, #16]	; (8004300 <RCCEx_PLLSAI2_Config+0x1b8>)
 80042f0:	4313      	orrs	r3, r2
 80042f2:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 80042f4:	7bfb      	ldrb	r3, [r7, #15]
}
 80042f6:	4618      	mov	r0, r3
 80042f8:	3710      	adds	r7, #16
 80042fa:	46bd      	mov	sp, r7
 80042fc:	bd80      	pop	{r7, pc}
 80042fe:	bf00      	nop
 8004300:	40021000 	.word	0x40021000

08004304 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004304:	b580      	push	{r7, lr}
 8004306:	b082      	sub	sp, #8
 8004308:	af00      	add	r7, sp, #0
 800430a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	2b00      	cmp	r3, #0
 8004310:	d101      	bne.n	8004316 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004312:	2301      	movs	r3, #1
 8004314:	e040      	b.n	8004398 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800431a:	2b00      	cmp	r3, #0
 800431c:	d106      	bne.n	800432c <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	2200      	movs	r2, #0
 8004322:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004326:	6878      	ldr	r0, [r7, #4]
 8004328:	f7fc fec0 	bl	80010ac <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	2224      	movs	r2, #36	; 0x24
 8004330:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	681b      	ldr	r3, [r3, #0]
 8004336:	681a      	ldr	r2, [r3, #0]
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	681b      	ldr	r3, [r3, #0]
 800433c:	f022 0201 	bic.w	r2, r2, #1
 8004340:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004342:	6878      	ldr	r0, [r7, #4]
 8004344:	f000 fb36 	bl	80049b4 <UART_SetConfig>
 8004348:	4603      	mov	r3, r0
 800434a:	2b01      	cmp	r3, #1
 800434c:	d101      	bne.n	8004352 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 800434e:	2301      	movs	r3, #1
 8004350:	e022      	b.n	8004398 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004356:	2b00      	cmp	r3, #0
 8004358:	d002      	beq.n	8004360 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 800435a:	6878      	ldr	r0, [r7, #4]
 800435c:	f000 fde2 	bl	8004f24 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	681b      	ldr	r3, [r3, #0]
 8004364:	685a      	ldr	r2, [r3, #4]
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	681b      	ldr	r3, [r3, #0]
 800436a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800436e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	681b      	ldr	r3, [r3, #0]
 8004374:	689a      	ldr	r2, [r3, #8]
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	681b      	ldr	r3, [r3, #0]
 800437a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800437e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	681b      	ldr	r3, [r3, #0]
 8004384:	681a      	ldr	r2, [r3, #0]
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	681b      	ldr	r3, [r3, #0]
 800438a:	f042 0201 	orr.w	r2, r2, #1
 800438e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004390:	6878      	ldr	r0, [r7, #4]
 8004392:	f000 fe69 	bl	8005068 <UART_CheckIdleState>
 8004396:	4603      	mov	r3, r0
}
 8004398:	4618      	mov	r0, r3
 800439a:	3708      	adds	r7, #8
 800439c:	46bd      	mov	sp, r7
 800439e:	bd80      	pop	{r7, pc}

080043a0 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80043a0:	b580      	push	{r7, lr}
 80043a2:	b0ba      	sub	sp, #232	; 0xe8
 80043a4:	af00      	add	r7, sp, #0
 80043a6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	681b      	ldr	r3, [r3, #0]
 80043ac:	69db      	ldr	r3, [r3, #28]
 80043ae:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	681b      	ldr	r3, [r3, #0]
 80043b6:	681b      	ldr	r3, [r3, #0]
 80043b8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	681b      	ldr	r3, [r3, #0]
 80043c0:	689b      	ldr	r3, [r3, #8]
 80043c2:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 80043c6:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 80043ca:	f640 030f 	movw	r3, #2063	; 0x80f
 80043ce:	4013      	ands	r3, r2
 80043d0:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 80043d4:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80043d8:	2b00      	cmp	r3, #0
 80043da:	d115      	bne.n	8004408 <HAL_UART_IRQHandler+0x68>
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
    if (((isrflags & USART_ISR_RXNE) != 0U)
 80043dc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80043e0:	f003 0320 	and.w	r3, r3, #32
 80043e4:	2b00      	cmp	r3, #0
 80043e6:	d00f      	beq.n	8004408 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80043e8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80043ec:	f003 0320 	and.w	r3, r3, #32
 80043f0:	2b00      	cmp	r3, #0
 80043f2:	d009      	beq.n	8004408 <HAL_UART_IRQHandler+0x68>
#endif /* USART_CR1_FIFOEN */
    {
      if (huart->RxISR != NULL)
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80043f8:	2b00      	cmp	r3, #0
 80043fa:	f000 82a6 	beq.w	800494a <HAL_UART_IRQHandler+0x5aa>
      {
        huart->RxISR(huart);
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004402:	6878      	ldr	r0, [r7, #4]
 8004404:	4798      	blx	r3
      }
      return;
 8004406:	e2a0      	b.n	800494a <HAL_UART_IRQHandler+0x5aa>
#if defined(USART_CR1_FIFOEN)
  if ((errorflags != 0U)
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
#else
  if ((errorflags != 0U)
 8004408:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800440c:	2b00      	cmp	r3, #0
 800440e:	f000 8117 	beq.w	8004640 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8004412:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004416:	f003 0301 	and.w	r3, r3, #1
 800441a:	2b00      	cmp	r3, #0
 800441c:	d106      	bne.n	800442c <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 800441e:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8004422:	4b85      	ldr	r3, [pc, #532]	; (8004638 <HAL_UART_IRQHandler+0x298>)
 8004424:	4013      	ands	r3, r2
 8004426:	2b00      	cmp	r3, #0
 8004428:	f000 810a 	beq.w	8004640 <HAL_UART_IRQHandler+0x2a0>
#endif /* USART_CR1_FIFOEN */
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800442c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004430:	f003 0301 	and.w	r3, r3, #1
 8004434:	2b00      	cmp	r3, #0
 8004436:	d011      	beq.n	800445c <HAL_UART_IRQHandler+0xbc>
 8004438:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800443c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004440:	2b00      	cmp	r3, #0
 8004442:	d00b      	beq.n	800445c <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	681b      	ldr	r3, [r3, #0]
 8004448:	2201      	movs	r2, #1
 800444a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004452:	f043 0201 	orr.w	r2, r3, #1
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800445c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004460:	f003 0302 	and.w	r3, r3, #2
 8004464:	2b00      	cmp	r3, #0
 8004466:	d011      	beq.n	800448c <HAL_UART_IRQHandler+0xec>
 8004468:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800446c:	f003 0301 	and.w	r3, r3, #1
 8004470:	2b00      	cmp	r3, #0
 8004472:	d00b      	beq.n	800448c <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	681b      	ldr	r3, [r3, #0]
 8004478:	2202      	movs	r2, #2
 800447a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004482:	f043 0204 	orr.w	r2, r3, #4
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800448c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004490:	f003 0304 	and.w	r3, r3, #4
 8004494:	2b00      	cmp	r3, #0
 8004496:	d011      	beq.n	80044bc <HAL_UART_IRQHandler+0x11c>
 8004498:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800449c:	f003 0301 	and.w	r3, r3, #1
 80044a0:	2b00      	cmp	r3, #0
 80044a2:	d00b      	beq.n	80044bc <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	681b      	ldr	r3, [r3, #0]
 80044a8:	2204      	movs	r2, #4
 80044aa:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80044b2:	f043 0202 	orr.w	r2, r3, #2
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_ORE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
#else
    if (((isrflags & USART_ISR_ORE) != 0U)
 80044bc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80044c0:	f003 0308 	and.w	r3, r3, #8
 80044c4:	2b00      	cmp	r3, #0
 80044c6:	d017      	beq.n	80044f8 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80044c8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80044cc:	f003 0320 	and.w	r3, r3, #32
 80044d0:	2b00      	cmp	r3, #0
 80044d2:	d105      	bne.n	80044e0 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 80044d4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80044d8:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80044dc:	2b00      	cmp	r3, #0
 80044de:	d00b      	beq.n	80044f8 <HAL_UART_IRQHandler+0x158>
#endif /* USART_CR1_FIFOEN */
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	681b      	ldr	r3, [r3, #0]
 80044e4:	2208      	movs	r2, #8
 80044e6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80044ee:	f043 0208 	orr.w	r2, r3, #8
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 80044f8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80044fc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004500:	2b00      	cmp	r3, #0
 8004502:	d012      	beq.n	800452a <HAL_UART_IRQHandler+0x18a>
 8004504:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004508:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800450c:	2b00      	cmp	r3, #0
 800450e:	d00c      	beq.n	800452a <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	681b      	ldr	r3, [r3, #0]
 8004514:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004518:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004520:	f043 0220 	orr.w	r2, r3, #32
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004530:	2b00      	cmp	r3, #0
 8004532:	f000 820c 	beq.w	800494e <HAL_UART_IRQHandler+0x5ae>
#if defined(USART_CR1_FIFOEN)
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8004536:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800453a:	f003 0320 	and.w	r3, r3, #32
 800453e:	2b00      	cmp	r3, #0
 8004540:	d00d      	beq.n	800455e <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8004542:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004546:	f003 0320 	and.w	r3, r3, #32
 800454a:	2b00      	cmp	r3, #0
 800454c:	d007      	beq.n	800455e <HAL_UART_IRQHandler+0x1be>
#endif /* USART_CR1_FIFOEN */
      {
        if (huart->RxISR != NULL)
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004552:	2b00      	cmp	r3, #0
 8004554:	d003      	beq.n	800455e <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800455a:	6878      	ldr	r0, [r7, #4]
 800455c:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004564:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	681b      	ldr	r3, [r3, #0]
 800456c:	689b      	ldr	r3, [r3, #8]
 800456e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004572:	2b40      	cmp	r3, #64	; 0x40
 8004574:	d005      	beq.n	8004582 <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8004576:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800457a:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800457e:	2b00      	cmp	r3, #0
 8004580:	d04f      	beq.n	8004622 <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8004582:	6878      	ldr	r0, [r7, #4]
 8004584:	f000 ff4a 	bl	800541c <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	681b      	ldr	r3, [r3, #0]
 800458c:	689b      	ldr	r3, [r3, #8]
 800458e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004592:	2b40      	cmp	r3, #64	; 0x40
 8004594:	d141      	bne.n	800461a <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	681b      	ldr	r3, [r3, #0]
 800459a:	3308      	adds	r3, #8
 800459c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80045a0:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80045a4:	e853 3f00 	ldrex	r3, [r3]
 80045a8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 80045ac:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80045b0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80045b4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	681b      	ldr	r3, [r3, #0]
 80045bc:	3308      	adds	r3, #8
 80045be:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 80045c2:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 80045c6:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80045ca:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 80045ce:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80045d2:	e841 2300 	strex	r3, r2, [r1]
 80045d6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 80045da:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80045de:	2b00      	cmp	r3, #0
 80045e0:	d1d9      	bne.n	8004596 <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80045e6:	2b00      	cmp	r3, #0
 80045e8:	d013      	beq.n	8004612 <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80045ee:	4a13      	ldr	r2, [pc, #76]	; (800463c <HAL_UART_IRQHandler+0x29c>)
 80045f0:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80045f6:	4618      	mov	r0, r3
 80045f8:	f7fe f85e 	bl	80026b8 <HAL_DMA_Abort_IT>
 80045fc:	4603      	mov	r3, r0
 80045fe:	2b00      	cmp	r3, #0
 8004600:	d017      	beq.n	8004632 <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004606:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004608:	687a      	ldr	r2, [r7, #4]
 800460a:	6f12      	ldr	r2, [r2, #112]	; 0x70
 800460c:	4610      	mov	r0, r2
 800460e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004610:	e00f      	b.n	8004632 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8004612:	6878      	ldr	r0, [r7, #4]
 8004614:	f000 f9c4 	bl	80049a0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004618:	e00b      	b.n	8004632 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800461a:	6878      	ldr	r0, [r7, #4]
 800461c:	f000 f9c0 	bl	80049a0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004620:	e007      	b.n	8004632 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8004622:	6878      	ldr	r0, [r7, #4]
 8004624:	f000 f9bc 	bl	80049a0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	2200      	movs	r2, #0
 800462c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
      }
    }
    return;
 8004630:	e18d      	b.n	800494e <HAL_UART_IRQHandler+0x5ae>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004632:	bf00      	nop
    return;
 8004634:	e18b      	b.n	800494e <HAL_UART_IRQHandler+0x5ae>
 8004636:	bf00      	nop
 8004638:	04000120 	.word	0x04000120
 800463c:	080056bb 	.word	0x080056bb

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004644:	2b01      	cmp	r3, #1
 8004646:	f040 8146 	bne.w	80048d6 <HAL_UART_IRQHandler+0x536>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800464a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800464e:	f003 0310 	and.w	r3, r3, #16
 8004652:	2b00      	cmp	r3, #0
 8004654:	f000 813f 	beq.w	80048d6 <HAL_UART_IRQHandler+0x536>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8004658:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800465c:	f003 0310 	and.w	r3, r3, #16
 8004660:	2b00      	cmp	r3, #0
 8004662:	f000 8138 	beq.w	80048d6 <HAL_UART_IRQHandler+0x536>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	681b      	ldr	r3, [r3, #0]
 800466a:	2210      	movs	r2, #16
 800466c:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	681b      	ldr	r3, [r3, #0]
 8004672:	689b      	ldr	r3, [r3, #8]
 8004674:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004678:	2b40      	cmp	r3, #64	; 0x40
 800467a:	f040 80b4 	bne.w	80047e6 <HAL_UART_IRQHandler+0x446>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004682:	681b      	ldr	r3, [r3, #0]
 8004684:	685b      	ldr	r3, [r3, #4]
 8004686:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800468a:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800468e:	2b00      	cmp	r3, #0
 8004690:	f000 815f 	beq.w	8004952 <HAL_UART_IRQHandler+0x5b2>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800469a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800469e:	429a      	cmp	r2, r3
 80046a0:	f080 8157 	bcs.w	8004952 <HAL_UART_IRQHandler+0x5b2>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80046aa:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80046b2:	681b      	ldr	r3, [r3, #0]
 80046b4:	681b      	ldr	r3, [r3, #0]
 80046b6:	f003 0320 	and.w	r3, r3, #32
 80046ba:	2b00      	cmp	r3, #0
 80046bc:	f040 8085 	bne.w	80047ca <HAL_UART_IRQHandler+0x42a>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	681b      	ldr	r3, [r3, #0]
 80046c4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80046c8:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80046cc:	e853 3f00 	ldrex	r3, [r3]
 80046d0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 80046d4:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80046d8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80046dc:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	681b      	ldr	r3, [r3, #0]
 80046e4:	461a      	mov	r2, r3
 80046e6:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80046ea:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80046ee:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80046f2:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 80046f6:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80046fa:	e841 2300 	strex	r3, r2, [r1]
 80046fe:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8004702:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004706:	2b00      	cmp	r3, #0
 8004708:	d1da      	bne.n	80046c0 <HAL_UART_IRQHandler+0x320>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	681b      	ldr	r3, [r3, #0]
 800470e:	3308      	adds	r3, #8
 8004710:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004712:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004714:	e853 3f00 	ldrex	r3, [r3]
 8004718:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800471a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800471c:	f023 0301 	bic.w	r3, r3, #1
 8004720:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	681b      	ldr	r3, [r3, #0]
 8004728:	3308      	adds	r3, #8
 800472a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800472e:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8004732:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004734:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8004736:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800473a:	e841 2300 	strex	r3, r2, [r1]
 800473e:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8004740:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004742:	2b00      	cmp	r3, #0
 8004744:	d1e1      	bne.n	800470a <HAL_UART_IRQHandler+0x36a>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	681b      	ldr	r3, [r3, #0]
 800474a:	3308      	adds	r3, #8
 800474c:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800474e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004750:	e853 3f00 	ldrex	r3, [r3]
 8004754:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8004756:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004758:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800475c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	681b      	ldr	r3, [r3, #0]
 8004764:	3308      	adds	r3, #8
 8004766:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800476a:	66fa      	str	r2, [r7, #108]	; 0x6c
 800476c:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800476e:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8004770:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8004772:	e841 2300 	strex	r3, r2, [r1]
 8004776:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8004778:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800477a:	2b00      	cmp	r3, #0
 800477c:	d1e3      	bne.n	8004746 <HAL_UART_IRQHandler+0x3a6>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	2220      	movs	r2, #32
 8004782:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	2200      	movs	r2, #0
 8004788:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	681b      	ldr	r3, [r3, #0]
 800478e:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004790:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004792:	e853 3f00 	ldrex	r3, [r3]
 8004796:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8004798:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800479a:	f023 0310 	bic.w	r3, r3, #16
 800479e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	681b      	ldr	r3, [r3, #0]
 80047a6:	461a      	mov	r2, r3
 80047a8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80047ac:	65bb      	str	r3, [r7, #88]	; 0x58
 80047ae:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80047b0:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80047b2:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80047b4:	e841 2300 	strex	r3, r2, [r1]
 80047b8:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80047ba:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80047bc:	2b00      	cmp	r3, #0
 80047be:	d1e4      	bne.n	800478a <HAL_UART_IRQHandler+0x3ea>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80047c4:	4618      	mov	r0, r3
 80047c6:	f7fd ff39 	bl	800263c <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80047d6:	b29b      	uxth	r3, r3
 80047d8:	1ad3      	subs	r3, r2, r3
 80047da:	b29b      	uxth	r3, r3
 80047dc:	4619      	mov	r1, r3
 80047de:	6878      	ldr	r0, [r7, #4]
 80047e0:	f7fc fb8e 	bl	8000f00 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80047e4:	e0b5      	b.n	8004952 <HAL_UART_IRQHandler+0x5b2>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80047f2:	b29b      	uxth	r3, r3
 80047f4:	1ad3      	subs	r3, r2, r3
 80047f6:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8004800:	b29b      	uxth	r3, r3
 8004802:	2b00      	cmp	r3, #0
 8004804:	f000 80a7 	beq.w	8004956 <HAL_UART_IRQHandler+0x5b6>
          && (nb_rx_data > 0U))
 8004808:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800480c:	2b00      	cmp	r3, #0
 800480e:	f000 80a2 	beq.w	8004956 <HAL_UART_IRQHandler+0x5b6>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	681b      	ldr	r3, [r3, #0]
 8004816:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004818:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800481a:	e853 3f00 	ldrex	r3, [r3]
 800481e:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8004820:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004822:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004826:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	681b      	ldr	r3, [r3, #0]
 800482e:	461a      	mov	r2, r3
 8004830:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8004834:	647b      	str	r3, [r7, #68]	; 0x44
 8004836:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004838:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800483a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800483c:	e841 2300 	strex	r3, r2, [r1]
 8004840:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8004842:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004844:	2b00      	cmp	r3, #0
 8004846:	d1e4      	bne.n	8004812 <HAL_UART_IRQHandler+0x472>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	681b      	ldr	r3, [r3, #0]
 800484c:	3308      	adds	r3, #8
 800484e:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004850:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004852:	e853 3f00 	ldrex	r3, [r3]
 8004856:	623b      	str	r3, [r7, #32]
   return(result);
 8004858:	6a3b      	ldr	r3, [r7, #32]
 800485a:	f023 0301 	bic.w	r3, r3, #1
 800485e:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	681b      	ldr	r3, [r3, #0]
 8004866:	3308      	adds	r3, #8
 8004868:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800486c:	633a      	str	r2, [r7, #48]	; 0x30
 800486e:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004870:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004872:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004874:	e841 2300 	strex	r3, r2, [r1]
 8004878:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800487a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800487c:	2b00      	cmp	r3, #0
 800487e:	d1e3      	bne.n	8004848 <HAL_UART_IRQHandler+0x4a8>
#endif /* USART_CR1_FIFOEN */

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	2220      	movs	r2, #32
 8004884:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	2200      	movs	r2, #0
 800488a:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	2200      	movs	r2, #0
 8004890:	665a      	str	r2, [r3, #100]	; 0x64

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	681b      	ldr	r3, [r3, #0]
 8004896:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004898:	693b      	ldr	r3, [r7, #16]
 800489a:	e853 3f00 	ldrex	r3, [r3]
 800489e:	60fb      	str	r3, [r7, #12]
   return(result);
 80048a0:	68fb      	ldr	r3, [r7, #12]
 80048a2:	f023 0310 	bic.w	r3, r3, #16
 80048a6:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	681b      	ldr	r3, [r3, #0]
 80048ae:	461a      	mov	r2, r3
 80048b0:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80048b4:	61fb      	str	r3, [r7, #28]
 80048b6:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80048b8:	69b9      	ldr	r1, [r7, #24]
 80048ba:	69fa      	ldr	r2, [r7, #28]
 80048bc:	e841 2300 	strex	r3, r2, [r1]
 80048c0:	617b      	str	r3, [r7, #20]
   return(result);
 80048c2:	697b      	ldr	r3, [r7, #20]
 80048c4:	2b00      	cmp	r3, #0
 80048c6:	d1e4      	bne.n	8004892 <HAL_UART_IRQHandler+0x4f2>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80048c8:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80048cc:	4619      	mov	r1, r3
 80048ce:	6878      	ldr	r0, [r7, #4]
 80048d0:	f7fc fb16 	bl	8000f00 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80048d4:	e03f      	b.n	8004956 <HAL_UART_IRQHandler+0x5b6>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 80048d6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80048da:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80048de:	2b00      	cmp	r3, #0
 80048e0:	d00e      	beq.n	8004900 <HAL_UART_IRQHandler+0x560>
 80048e2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80048e6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80048ea:	2b00      	cmp	r3, #0
 80048ec:	d008      	beq.n	8004900 <HAL_UART_IRQHandler+0x560>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	681b      	ldr	r3, [r3, #0]
 80048f2:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80048f6:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 80048f8:	6878      	ldr	r0, [r7, #4]
 80048fa:	f000 ff1e 	bl	800573a <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80048fe:	e02d      	b.n	800495c <HAL_UART_IRQHandler+0x5bc>
#if defined(USART_CR1_FIFOEN)
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
#else
  if (((isrflags & USART_ISR_TXE) != 0U)
 8004900:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004904:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004908:	2b00      	cmp	r3, #0
 800490a:	d00e      	beq.n	800492a <HAL_UART_IRQHandler+0x58a>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 800490c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004910:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004914:	2b00      	cmp	r3, #0
 8004916:	d008      	beq.n	800492a <HAL_UART_IRQHandler+0x58a>
#endif /* USART_CR1_FIFOEN */
  {
    if (huart->TxISR != NULL)
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800491c:	2b00      	cmp	r3, #0
 800491e:	d01c      	beq.n	800495a <HAL_UART_IRQHandler+0x5ba>
    {
      huart->TxISR(huart);
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004924:	6878      	ldr	r0, [r7, #4]
 8004926:	4798      	blx	r3
    }
    return;
 8004928:	e017      	b.n	800495a <HAL_UART_IRQHandler+0x5ba>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800492a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800492e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004932:	2b00      	cmp	r3, #0
 8004934:	d012      	beq.n	800495c <HAL_UART_IRQHandler+0x5bc>
 8004936:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800493a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800493e:	2b00      	cmp	r3, #0
 8004940:	d00c      	beq.n	800495c <HAL_UART_IRQHandler+0x5bc>
  {
    UART_EndTransmit_IT(huart);
 8004942:	6878      	ldr	r0, [r7, #4]
 8004944:	f000 fecf 	bl	80056e6 <UART_EndTransmit_IT>
    return;
 8004948:	e008      	b.n	800495c <HAL_UART_IRQHandler+0x5bc>
      return;
 800494a:	bf00      	nop
 800494c:	e006      	b.n	800495c <HAL_UART_IRQHandler+0x5bc>
    return;
 800494e:	bf00      	nop
 8004950:	e004      	b.n	800495c <HAL_UART_IRQHandler+0x5bc>
      return;
 8004952:	bf00      	nop
 8004954:	e002      	b.n	800495c <HAL_UART_IRQHandler+0x5bc>
      return;
 8004956:	bf00      	nop
 8004958:	e000      	b.n	800495c <HAL_UART_IRQHandler+0x5bc>
    return;
 800495a:	bf00      	nop
    HAL_UARTEx_RxFifoFullCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
  }
#endif /* USART_CR1_FIFOEN */
}
 800495c:	37e8      	adds	r7, #232	; 0xe8
 800495e:	46bd      	mov	sp, r7
 8004960:	bd80      	pop	{r7, pc}
 8004962:	bf00      	nop

08004964 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8004964:	b480      	push	{r7}
 8004966:	b083      	sub	sp, #12
 8004968:	af00      	add	r7, sp, #0
 800496a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 800496c:	bf00      	nop
 800496e:	370c      	adds	r7, #12
 8004970:	46bd      	mov	sp, r7
 8004972:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004976:	4770      	bx	lr

08004978 <HAL_UART_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8004978:	b480      	push	{r7}
 800497a:	b083      	sub	sp, #12
 800497c:	af00      	add	r7, sp, #0
 800497e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_RxCpltCallback can be implemented in the user file.
   */
}
 8004980:	bf00      	nop
 8004982:	370c      	adds	r7, #12
 8004984:	46bd      	mov	sp, r7
 8004986:	f85d 7b04 	ldr.w	r7, [sp], #4
 800498a:	4770      	bx	lr

0800498c <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800498c:	b480      	push	{r7}
 800498e:	b083      	sub	sp, #12
 8004990:	af00      	add	r7, sp, #0
 8004992:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 8004994:	bf00      	nop
 8004996:	370c      	adds	r7, #12
 8004998:	46bd      	mov	sp, r7
 800499a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800499e:	4770      	bx	lr

080049a0 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80049a0:	b480      	push	{r7}
 80049a2:	b083      	sub	sp, #12
 80049a4:	af00      	add	r7, sp, #0
 80049a6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 80049a8:	bf00      	nop
 80049aa:	370c      	adds	r7, #12
 80049ac:	46bd      	mov	sp, r7
 80049ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049b2:	4770      	bx	lr

080049b4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80049b4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80049b8:	b08a      	sub	sp, #40	; 0x28
 80049ba:	af00      	add	r7, sp, #0
 80049bc:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80049be:	2300      	movs	r3, #0
 80049c0:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80049c4:	68fb      	ldr	r3, [r7, #12]
 80049c6:	689a      	ldr	r2, [r3, #8]
 80049c8:	68fb      	ldr	r3, [r7, #12]
 80049ca:	691b      	ldr	r3, [r3, #16]
 80049cc:	431a      	orrs	r2, r3
 80049ce:	68fb      	ldr	r3, [r7, #12]
 80049d0:	695b      	ldr	r3, [r3, #20]
 80049d2:	431a      	orrs	r2, r3
 80049d4:	68fb      	ldr	r3, [r7, #12]
 80049d6:	69db      	ldr	r3, [r3, #28]
 80049d8:	4313      	orrs	r3, r2
 80049da:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80049dc:	68fb      	ldr	r3, [r7, #12]
 80049de:	681b      	ldr	r3, [r3, #0]
 80049e0:	681a      	ldr	r2, [r3, #0]
 80049e2:	4ba4      	ldr	r3, [pc, #656]	; (8004c74 <UART_SetConfig+0x2c0>)
 80049e4:	4013      	ands	r3, r2
 80049e6:	68fa      	ldr	r2, [r7, #12]
 80049e8:	6812      	ldr	r2, [r2, #0]
 80049ea:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80049ec:	430b      	orrs	r3, r1
 80049ee:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80049f0:	68fb      	ldr	r3, [r7, #12]
 80049f2:	681b      	ldr	r3, [r3, #0]
 80049f4:	685b      	ldr	r3, [r3, #4]
 80049f6:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80049fa:	68fb      	ldr	r3, [r7, #12]
 80049fc:	68da      	ldr	r2, [r3, #12]
 80049fe:	68fb      	ldr	r3, [r7, #12]
 8004a00:	681b      	ldr	r3, [r3, #0]
 8004a02:	430a      	orrs	r2, r1
 8004a04:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004a06:	68fb      	ldr	r3, [r7, #12]
 8004a08:	699b      	ldr	r3, [r3, #24]
 8004a0a:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8004a0c:	68fb      	ldr	r3, [r7, #12]
 8004a0e:	681b      	ldr	r3, [r3, #0]
 8004a10:	4a99      	ldr	r2, [pc, #612]	; (8004c78 <UART_SetConfig+0x2c4>)
 8004a12:	4293      	cmp	r3, r2
 8004a14:	d004      	beq.n	8004a20 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8004a16:	68fb      	ldr	r3, [r7, #12]
 8004a18:	6a1b      	ldr	r3, [r3, #32]
 8004a1a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004a1c:	4313      	orrs	r3, r2
 8004a1e:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004a20:	68fb      	ldr	r3, [r7, #12]
 8004a22:	681b      	ldr	r3, [r3, #0]
 8004a24:	689b      	ldr	r3, [r3, #8]
 8004a26:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8004a2a:	68fb      	ldr	r3, [r7, #12]
 8004a2c:	681b      	ldr	r3, [r3, #0]
 8004a2e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004a30:	430a      	orrs	r2, r1
 8004a32:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004a34:	68fb      	ldr	r3, [r7, #12]
 8004a36:	681b      	ldr	r3, [r3, #0]
 8004a38:	4a90      	ldr	r2, [pc, #576]	; (8004c7c <UART_SetConfig+0x2c8>)
 8004a3a:	4293      	cmp	r3, r2
 8004a3c:	d126      	bne.n	8004a8c <UART_SetConfig+0xd8>
 8004a3e:	4b90      	ldr	r3, [pc, #576]	; (8004c80 <UART_SetConfig+0x2cc>)
 8004a40:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004a44:	f003 0303 	and.w	r3, r3, #3
 8004a48:	2b03      	cmp	r3, #3
 8004a4a:	d81b      	bhi.n	8004a84 <UART_SetConfig+0xd0>
 8004a4c:	a201      	add	r2, pc, #4	; (adr r2, 8004a54 <UART_SetConfig+0xa0>)
 8004a4e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004a52:	bf00      	nop
 8004a54:	08004a65 	.word	0x08004a65
 8004a58:	08004a75 	.word	0x08004a75
 8004a5c:	08004a6d 	.word	0x08004a6d
 8004a60:	08004a7d 	.word	0x08004a7d
 8004a64:	2301      	movs	r3, #1
 8004a66:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004a6a:	e116      	b.n	8004c9a <UART_SetConfig+0x2e6>
 8004a6c:	2302      	movs	r3, #2
 8004a6e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004a72:	e112      	b.n	8004c9a <UART_SetConfig+0x2e6>
 8004a74:	2304      	movs	r3, #4
 8004a76:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004a7a:	e10e      	b.n	8004c9a <UART_SetConfig+0x2e6>
 8004a7c:	2308      	movs	r3, #8
 8004a7e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004a82:	e10a      	b.n	8004c9a <UART_SetConfig+0x2e6>
 8004a84:	2310      	movs	r3, #16
 8004a86:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004a8a:	e106      	b.n	8004c9a <UART_SetConfig+0x2e6>
 8004a8c:	68fb      	ldr	r3, [r7, #12]
 8004a8e:	681b      	ldr	r3, [r3, #0]
 8004a90:	4a7c      	ldr	r2, [pc, #496]	; (8004c84 <UART_SetConfig+0x2d0>)
 8004a92:	4293      	cmp	r3, r2
 8004a94:	d138      	bne.n	8004b08 <UART_SetConfig+0x154>
 8004a96:	4b7a      	ldr	r3, [pc, #488]	; (8004c80 <UART_SetConfig+0x2cc>)
 8004a98:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004a9c:	f003 030c 	and.w	r3, r3, #12
 8004aa0:	2b0c      	cmp	r3, #12
 8004aa2:	d82d      	bhi.n	8004b00 <UART_SetConfig+0x14c>
 8004aa4:	a201      	add	r2, pc, #4	; (adr r2, 8004aac <UART_SetConfig+0xf8>)
 8004aa6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004aaa:	bf00      	nop
 8004aac:	08004ae1 	.word	0x08004ae1
 8004ab0:	08004b01 	.word	0x08004b01
 8004ab4:	08004b01 	.word	0x08004b01
 8004ab8:	08004b01 	.word	0x08004b01
 8004abc:	08004af1 	.word	0x08004af1
 8004ac0:	08004b01 	.word	0x08004b01
 8004ac4:	08004b01 	.word	0x08004b01
 8004ac8:	08004b01 	.word	0x08004b01
 8004acc:	08004ae9 	.word	0x08004ae9
 8004ad0:	08004b01 	.word	0x08004b01
 8004ad4:	08004b01 	.word	0x08004b01
 8004ad8:	08004b01 	.word	0x08004b01
 8004adc:	08004af9 	.word	0x08004af9
 8004ae0:	2300      	movs	r3, #0
 8004ae2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004ae6:	e0d8      	b.n	8004c9a <UART_SetConfig+0x2e6>
 8004ae8:	2302      	movs	r3, #2
 8004aea:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004aee:	e0d4      	b.n	8004c9a <UART_SetConfig+0x2e6>
 8004af0:	2304      	movs	r3, #4
 8004af2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004af6:	e0d0      	b.n	8004c9a <UART_SetConfig+0x2e6>
 8004af8:	2308      	movs	r3, #8
 8004afa:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004afe:	e0cc      	b.n	8004c9a <UART_SetConfig+0x2e6>
 8004b00:	2310      	movs	r3, #16
 8004b02:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004b06:	e0c8      	b.n	8004c9a <UART_SetConfig+0x2e6>
 8004b08:	68fb      	ldr	r3, [r7, #12]
 8004b0a:	681b      	ldr	r3, [r3, #0]
 8004b0c:	4a5e      	ldr	r2, [pc, #376]	; (8004c88 <UART_SetConfig+0x2d4>)
 8004b0e:	4293      	cmp	r3, r2
 8004b10:	d125      	bne.n	8004b5e <UART_SetConfig+0x1aa>
 8004b12:	4b5b      	ldr	r3, [pc, #364]	; (8004c80 <UART_SetConfig+0x2cc>)
 8004b14:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004b18:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8004b1c:	2b30      	cmp	r3, #48	; 0x30
 8004b1e:	d016      	beq.n	8004b4e <UART_SetConfig+0x19a>
 8004b20:	2b30      	cmp	r3, #48	; 0x30
 8004b22:	d818      	bhi.n	8004b56 <UART_SetConfig+0x1a2>
 8004b24:	2b20      	cmp	r3, #32
 8004b26:	d00a      	beq.n	8004b3e <UART_SetConfig+0x18a>
 8004b28:	2b20      	cmp	r3, #32
 8004b2a:	d814      	bhi.n	8004b56 <UART_SetConfig+0x1a2>
 8004b2c:	2b00      	cmp	r3, #0
 8004b2e:	d002      	beq.n	8004b36 <UART_SetConfig+0x182>
 8004b30:	2b10      	cmp	r3, #16
 8004b32:	d008      	beq.n	8004b46 <UART_SetConfig+0x192>
 8004b34:	e00f      	b.n	8004b56 <UART_SetConfig+0x1a2>
 8004b36:	2300      	movs	r3, #0
 8004b38:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004b3c:	e0ad      	b.n	8004c9a <UART_SetConfig+0x2e6>
 8004b3e:	2302      	movs	r3, #2
 8004b40:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004b44:	e0a9      	b.n	8004c9a <UART_SetConfig+0x2e6>
 8004b46:	2304      	movs	r3, #4
 8004b48:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004b4c:	e0a5      	b.n	8004c9a <UART_SetConfig+0x2e6>
 8004b4e:	2308      	movs	r3, #8
 8004b50:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004b54:	e0a1      	b.n	8004c9a <UART_SetConfig+0x2e6>
 8004b56:	2310      	movs	r3, #16
 8004b58:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004b5c:	e09d      	b.n	8004c9a <UART_SetConfig+0x2e6>
 8004b5e:	68fb      	ldr	r3, [r7, #12]
 8004b60:	681b      	ldr	r3, [r3, #0]
 8004b62:	4a4a      	ldr	r2, [pc, #296]	; (8004c8c <UART_SetConfig+0x2d8>)
 8004b64:	4293      	cmp	r3, r2
 8004b66:	d125      	bne.n	8004bb4 <UART_SetConfig+0x200>
 8004b68:	4b45      	ldr	r3, [pc, #276]	; (8004c80 <UART_SetConfig+0x2cc>)
 8004b6a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004b6e:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8004b72:	2bc0      	cmp	r3, #192	; 0xc0
 8004b74:	d016      	beq.n	8004ba4 <UART_SetConfig+0x1f0>
 8004b76:	2bc0      	cmp	r3, #192	; 0xc0
 8004b78:	d818      	bhi.n	8004bac <UART_SetConfig+0x1f8>
 8004b7a:	2b80      	cmp	r3, #128	; 0x80
 8004b7c:	d00a      	beq.n	8004b94 <UART_SetConfig+0x1e0>
 8004b7e:	2b80      	cmp	r3, #128	; 0x80
 8004b80:	d814      	bhi.n	8004bac <UART_SetConfig+0x1f8>
 8004b82:	2b00      	cmp	r3, #0
 8004b84:	d002      	beq.n	8004b8c <UART_SetConfig+0x1d8>
 8004b86:	2b40      	cmp	r3, #64	; 0x40
 8004b88:	d008      	beq.n	8004b9c <UART_SetConfig+0x1e8>
 8004b8a:	e00f      	b.n	8004bac <UART_SetConfig+0x1f8>
 8004b8c:	2300      	movs	r3, #0
 8004b8e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004b92:	e082      	b.n	8004c9a <UART_SetConfig+0x2e6>
 8004b94:	2302      	movs	r3, #2
 8004b96:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004b9a:	e07e      	b.n	8004c9a <UART_SetConfig+0x2e6>
 8004b9c:	2304      	movs	r3, #4
 8004b9e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004ba2:	e07a      	b.n	8004c9a <UART_SetConfig+0x2e6>
 8004ba4:	2308      	movs	r3, #8
 8004ba6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004baa:	e076      	b.n	8004c9a <UART_SetConfig+0x2e6>
 8004bac:	2310      	movs	r3, #16
 8004bae:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004bb2:	e072      	b.n	8004c9a <UART_SetConfig+0x2e6>
 8004bb4:	68fb      	ldr	r3, [r7, #12]
 8004bb6:	681b      	ldr	r3, [r3, #0]
 8004bb8:	4a35      	ldr	r2, [pc, #212]	; (8004c90 <UART_SetConfig+0x2dc>)
 8004bba:	4293      	cmp	r3, r2
 8004bbc:	d12a      	bne.n	8004c14 <UART_SetConfig+0x260>
 8004bbe:	4b30      	ldr	r3, [pc, #192]	; (8004c80 <UART_SetConfig+0x2cc>)
 8004bc0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004bc4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004bc8:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004bcc:	d01a      	beq.n	8004c04 <UART_SetConfig+0x250>
 8004bce:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004bd2:	d81b      	bhi.n	8004c0c <UART_SetConfig+0x258>
 8004bd4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004bd8:	d00c      	beq.n	8004bf4 <UART_SetConfig+0x240>
 8004bda:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004bde:	d815      	bhi.n	8004c0c <UART_SetConfig+0x258>
 8004be0:	2b00      	cmp	r3, #0
 8004be2:	d003      	beq.n	8004bec <UART_SetConfig+0x238>
 8004be4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004be8:	d008      	beq.n	8004bfc <UART_SetConfig+0x248>
 8004bea:	e00f      	b.n	8004c0c <UART_SetConfig+0x258>
 8004bec:	2300      	movs	r3, #0
 8004bee:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004bf2:	e052      	b.n	8004c9a <UART_SetConfig+0x2e6>
 8004bf4:	2302      	movs	r3, #2
 8004bf6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004bfa:	e04e      	b.n	8004c9a <UART_SetConfig+0x2e6>
 8004bfc:	2304      	movs	r3, #4
 8004bfe:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004c02:	e04a      	b.n	8004c9a <UART_SetConfig+0x2e6>
 8004c04:	2308      	movs	r3, #8
 8004c06:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004c0a:	e046      	b.n	8004c9a <UART_SetConfig+0x2e6>
 8004c0c:	2310      	movs	r3, #16
 8004c0e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004c12:	e042      	b.n	8004c9a <UART_SetConfig+0x2e6>
 8004c14:	68fb      	ldr	r3, [r7, #12]
 8004c16:	681b      	ldr	r3, [r3, #0]
 8004c18:	4a17      	ldr	r2, [pc, #92]	; (8004c78 <UART_SetConfig+0x2c4>)
 8004c1a:	4293      	cmp	r3, r2
 8004c1c:	d13a      	bne.n	8004c94 <UART_SetConfig+0x2e0>
 8004c1e:	4b18      	ldr	r3, [pc, #96]	; (8004c80 <UART_SetConfig+0x2cc>)
 8004c20:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004c24:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8004c28:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004c2c:	d01a      	beq.n	8004c64 <UART_SetConfig+0x2b0>
 8004c2e:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004c32:	d81b      	bhi.n	8004c6c <UART_SetConfig+0x2b8>
 8004c34:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004c38:	d00c      	beq.n	8004c54 <UART_SetConfig+0x2a0>
 8004c3a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004c3e:	d815      	bhi.n	8004c6c <UART_SetConfig+0x2b8>
 8004c40:	2b00      	cmp	r3, #0
 8004c42:	d003      	beq.n	8004c4c <UART_SetConfig+0x298>
 8004c44:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004c48:	d008      	beq.n	8004c5c <UART_SetConfig+0x2a8>
 8004c4a:	e00f      	b.n	8004c6c <UART_SetConfig+0x2b8>
 8004c4c:	2300      	movs	r3, #0
 8004c4e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004c52:	e022      	b.n	8004c9a <UART_SetConfig+0x2e6>
 8004c54:	2302      	movs	r3, #2
 8004c56:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004c5a:	e01e      	b.n	8004c9a <UART_SetConfig+0x2e6>
 8004c5c:	2304      	movs	r3, #4
 8004c5e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004c62:	e01a      	b.n	8004c9a <UART_SetConfig+0x2e6>
 8004c64:	2308      	movs	r3, #8
 8004c66:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004c6a:	e016      	b.n	8004c9a <UART_SetConfig+0x2e6>
 8004c6c:	2310      	movs	r3, #16
 8004c6e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004c72:	e012      	b.n	8004c9a <UART_SetConfig+0x2e6>
 8004c74:	efff69f3 	.word	0xefff69f3
 8004c78:	40008000 	.word	0x40008000
 8004c7c:	40013800 	.word	0x40013800
 8004c80:	40021000 	.word	0x40021000
 8004c84:	40004400 	.word	0x40004400
 8004c88:	40004800 	.word	0x40004800
 8004c8c:	40004c00 	.word	0x40004c00
 8004c90:	40005000 	.word	0x40005000
 8004c94:	2310      	movs	r3, #16
 8004c96:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8004c9a:	68fb      	ldr	r3, [r7, #12]
 8004c9c:	681b      	ldr	r3, [r3, #0]
 8004c9e:	4a9f      	ldr	r2, [pc, #636]	; (8004f1c <UART_SetConfig+0x568>)
 8004ca0:	4293      	cmp	r3, r2
 8004ca2:	d17a      	bne.n	8004d9a <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8004ca4:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8004ca8:	2b08      	cmp	r3, #8
 8004caa:	d824      	bhi.n	8004cf6 <UART_SetConfig+0x342>
 8004cac:	a201      	add	r2, pc, #4	; (adr r2, 8004cb4 <UART_SetConfig+0x300>)
 8004cae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004cb2:	bf00      	nop
 8004cb4:	08004cd9 	.word	0x08004cd9
 8004cb8:	08004cf7 	.word	0x08004cf7
 8004cbc:	08004ce1 	.word	0x08004ce1
 8004cc0:	08004cf7 	.word	0x08004cf7
 8004cc4:	08004ce7 	.word	0x08004ce7
 8004cc8:	08004cf7 	.word	0x08004cf7
 8004ccc:	08004cf7 	.word	0x08004cf7
 8004cd0:	08004cf7 	.word	0x08004cf7
 8004cd4:	08004cef 	.word	0x08004cef
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004cd8:	f7fe fdcc 	bl	8003874 <HAL_RCC_GetPCLK1Freq>
 8004cdc:	61f8      	str	r0, [r7, #28]
        break;
 8004cde:	e010      	b.n	8004d02 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004ce0:	4b8f      	ldr	r3, [pc, #572]	; (8004f20 <UART_SetConfig+0x56c>)
 8004ce2:	61fb      	str	r3, [r7, #28]
        break;
 8004ce4:	e00d      	b.n	8004d02 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004ce6:	f7fe fd2d 	bl	8003744 <HAL_RCC_GetSysClockFreq>
 8004cea:	61f8      	str	r0, [r7, #28]
        break;
 8004cec:	e009      	b.n	8004d02 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004cee:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004cf2:	61fb      	str	r3, [r7, #28]
        break;
 8004cf4:	e005      	b.n	8004d02 <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 8004cf6:	2300      	movs	r3, #0
 8004cf8:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8004cfa:	2301      	movs	r3, #1
 8004cfc:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8004d00:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8004d02:	69fb      	ldr	r3, [r7, #28]
 8004d04:	2b00      	cmp	r3, #0
 8004d06:	f000 80fb 	beq.w	8004f00 <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8004d0a:	68fb      	ldr	r3, [r7, #12]
 8004d0c:	685a      	ldr	r2, [r3, #4]
 8004d0e:	4613      	mov	r3, r2
 8004d10:	005b      	lsls	r3, r3, #1
 8004d12:	4413      	add	r3, r2
 8004d14:	69fa      	ldr	r2, [r7, #28]
 8004d16:	429a      	cmp	r2, r3
 8004d18:	d305      	bcc.n	8004d26 <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 8004d1a:	68fb      	ldr	r3, [r7, #12]
 8004d1c:	685b      	ldr	r3, [r3, #4]
 8004d1e:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8004d20:	69fa      	ldr	r2, [r7, #28]
 8004d22:	429a      	cmp	r2, r3
 8004d24:	d903      	bls.n	8004d2e <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 8004d26:	2301      	movs	r3, #1
 8004d28:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8004d2c:	e0e8      	b.n	8004f00 <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8004d2e:	69fb      	ldr	r3, [r7, #28]
 8004d30:	2200      	movs	r2, #0
 8004d32:	461c      	mov	r4, r3
 8004d34:	4615      	mov	r5, r2
 8004d36:	f04f 0200 	mov.w	r2, #0
 8004d3a:	f04f 0300 	mov.w	r3, #0
 8004d3e:	022b      	lsls	r3, r5, #8
 8004d40:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8004d44:	0222      	lsls	r2, r4, #8
 8004d46:	68f9      	ldr	r1, [r7, #12]
 8004d48:	6849      	ldr	r1, [r1, #4]
 8004d4a:	0849      	lsrs	r1, r1, #1
 8004d4c:	2000      	movs	r0, #0
 8004d4e:	4688      	mov	r8, r1
 8004d50:	4681      	mov	r9, r0
 8004d52:	eb12 0a08 	adds.w	sl, r2, r8
 8004d56:	eb43 0b09 	adc.w	fp, r3, r9
 8004d5a:	68fb      	ldr	r3, [r7, #12]
 8004d5c:	685b      	ldr	r3, [r3, #4]
 8004d5e:	2200      	movs	r2, #0
 8004d60:	603b      	str	r3, [r7, #0]
 8004d62:	607a      	str	r2, [r7, #4]
 8004d64:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004d68:	4650      	mov	r0, sl
 8004d6a:	4659      	mov	r1, fp
 8004d6c:	f7fb fbf0 	bl	8000550 <__aeabi_uldivmod>
 8004d70:	4602      	mov	r2, r0
 8004d72:	460b      	mov	r3, r1
 8004d74:	4613      	mov	r3, r2
 8004d76:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8004d78:	69bb      	ldr	r3, [r7, #24]
 8004d7a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004d7e:	d308      	bcc.n	8004d92 <UART_SetConfig+0x3de>
 8004d80:	69bb      	ldr	r3, [r7, #24]
 8004d82:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004d86:	d204      	bcs.n	8004d92 <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 8004d88:	68fb      	ldr	r3, [r7, #12]
 8004d8a:	681b      	ldr	r3, [r3, #0]
 8004d8c:	69ba      	ldr	r2, [r7, #24]
 8004d8e:	60da      	str	r2, [r3, #12]
 8004d90:	e0b6      	b.n	8004f00 <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 8004d92:	2301      	movs	r3, #1
 8004d94:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8004d98:	e0b2      	b.n	8004f00 <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004d9a:	68fb      	ldr	r3, [r7, #12]
 8004d9c:	69db      	ldr	r3, [r3, #28]
 8004d9e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004da2:	d15e      	bne.n	8004e62 <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 8004da4:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8004da8:	2b08      	cmp	r3, #8
 8004daa:	d828      	bhi.n	8004dfe <UART_SetConfig+0x44a>
 8004dac:	a201      	add	r2, pc, #4	; (adr r2, 8004db4 <UART_SetConfig+0x400>)
 8004dae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004db2:	bf00      	nop
 8004db4:	08004dd9 	.word	0x08004dd9
 8004db8:	08004de1 	.word	0x08004de1
 8004dbc:	08004de9 	.word	0x08004de9
 8004dc0:	08004dff 	.word	0x08004dff
 8004dc4:	08004def 	.word	0x08004def
 8004dc8:	08004dff 	.word	0x08004dff
 8004dcc:	08004dff 	.word	0x08004dff
 8004dd0:	08004dff 	.word	0x08004dff
 8004dd4:	08004df7 	.word	0x08004df7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004dd8:	f7fe fd4c 	bl	8003874 <HAL_RCC_GetPCLK1Freq>
 8004ddc:	61f8      	str	r0, [r7, #28]
        break;
 8004dde:	e014      	b.n	8004e0a <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004de0:	f7fe fd5e 	bl	80038a0 <HAL_RCC_GetPCLK2Freq>
 8004de4:	61f8      	str	r0, [r7, #28]
        break;
 8004de6:	e010      	b.n	8004e0a <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004de8:	4b4d      	ldr	r3, [pc, #308]	; (8004f20 <UART_SetConfig+0x56c>)
 8004dea:	61fb      	str	r3, [r7, #28]
        break;
 8004dec:	e00d      	b.n	8004e0a <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004dee:	f7fe fca9 	bl	8003744 <HAL_RCC_GetSysClockFreq>
 8004df2:	61f8      	str	r0, [r7, #28]
        break;
 8004df4:	e009      	b.n	8004e0a <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004df6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004dfa:	61fb      	str	r3, [r7, #28]
        break;
 8004dfc:	e005      	b.n	8004e0a <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 8004dfe:	2300      	movs	r3, #0
 8004e00:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8004e02:	2301      	movs	r3, #1
 8004e04:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8004e08:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8004e0a:	69fb      	ldr	r3, [r7, #28]
 8004e0c:	2b00      	cmp	r3, #0
 8004e0e:	d077      	beq.n	8004f00 <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8004e10:	69fb      	ldr	r3, [r7, #28]
 8004e12:	005a      	lsls	r2, r3, #1
 8004e14:	68fb      	ldr	r3, [r7, #12]
 8004e16:	685b      	ldr	r3, [r3, #4]
 8004e18:	085b      	lsrs	r3, r3, #1
 8004e1a:	441a      	add	r2, r3
 8004e1c:	68fb      	ldr	r3, [r7, #12]
 8004e1e:	685b      	ldr	r3, [r3, #4]
 8004e20:	fbb2 f3f3 	udiv	r3, r2, r3
 8004e24:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004e26:	69bb      	ldr	r3, [r7, #24]
 8004e28:	2b0f      	cmp	r3, #15
 8004e2a:	d916      	bls.n	8004e5a <UART_SetConfig+0x4a6>
 8004e2c:	69bb      	ldr	r3, [r7, #24]
 8004e2e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004e32:	d212      	bcs.n	8004e5a <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004e34:	69bb      	ldr	r3, [r7, #24]
 8004e36:	b29b      	uxth	r3, r3
 8004e38:	f023 030f 	bic.w	r3, r3, #15
 8004e3c:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004e3e:	69bb      	ldr	r3, [r7, #24]
 8004e40:	085b      	lsrs	r3, r3, #1
 8004e42:	b29b      	uxth	r3, r3
 8004e44:	f003 0307 	and.w	r3, r3, #7
 8004e48:	b29a      	uxth	r2, r3
 8004e4a:	8afb      	ldrh	r3, [r7, #22]
 8004e4c:	4313      	orrs	r3, r2
 8004e4e:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8004e50:	68fb      	ldr	r3, [r7, #12]
 8004e52:	681b      	ldr	r3, [r3, #0]
 8004e54:	8afa      	ldrh	r2, [r7, #22]
 8004e56:	60da      	str	r2, [r3, #12]
 8004e58:	e052      	b.n	8004f00 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8004e5a:	2301      	movs	r3, #1
 8004e5c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8004e60:	e04e      	b.n	8004f00 <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8004e62:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8004e66:	2b08      	cmp	r3, #8
 8004e68:	d827      	bhi.n	8004eba <UART_SetConfig+0x506>
 8004e6a:	a201      	add	r2, pc, #4	; (adr r2, 8004e70 <UART_SetConfig+0x4bc>)
 8004e6c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004e70:	08004e95 	.word	0x08004e95
 8004e74:	08004e9d 	.word	0x08004e9d
 8004e78:	08004ea5 	.word	0x08004ea5
 8004e7c:	08004ebb 	.word	0x08004ebb
 8004e80:	08004eab 	.word	0x08004eab
 8004e84:	08004ebb 	.word	0x08004ebb
 8004e88:	08004ebb 	.word	0x08004ebb
 8004e8c:	08004ebb 	.word	0x08004ebb
 8004e90:	08004eb3 	.word	0x08004eb3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004e94:	f7fe fcee 	bl	8003874 <HAL_RCC_GetPCLK1Freq>
 8004e98:	61f8      	str	r0, [r7, #28]
        break;
 8004e9a:	e014      	b.n	8004ec6 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004e9c:	f7fe fd00 	bl	80038a0 <HAL_RCC_GetPCLK2Freq>
 8004ea0:	61f8      	str	r0, [r7, #28]
        break;
 8004ea2:	e010      	b.n	8004ec6 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004ea4:	4b1e      	ldr	r3, [pc, #120]	; (8004f20 <UART_SetConfig+0x56c>)
 8004ea6:	61fb      	str	r3, [r7, #28]
        break;
 8004ea8:	e00d      	b.n	8004ec6 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004eaa:	f7fe fc4b 	bl	8003744 <HAL_RCC_GetSysClockFreq>
 8004eae:	61f8      	str	r0, [r7, #28]
        break;
 8004eb0:	e009      	b.n	8004ec6 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004eb2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004eb6:	61fb      	str	r3, [r7, #28]
        break;
 8004eb8:	e005      	b.n	8004ec6 <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 8004eba:	2300      	movs	r3, #0
 8004ebc:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8004ebe:	2301      	movs	r3, #1
 8004ec0:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8004ec4:	bf00      	nop
    }

    if (pclk != 0U)
 8004ec6:	69fb      	ldr	r3, [r7, #28]
 8004ec8:	2b00      	cmp	r3, #0
 8004eca:	d019      	beq.n	8004f00 <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8004ecc:	68fb      	ldr	r3, [r7, #12]
 8004ece:	685b      	ldr	r3, [r3, #4]
 8004ed0:	085a      	lsrs	r2, r3, #1
 8004ed2:	69fb      	ldr	r3, [r7, #28]
 8004ed4:	441a      	add	r2, r3
 8004ed6:	68fb      	ldr	r3, [r7, #12]
 8004ed8:	685b      	ldr	r3, [r3, #4]
 8004eda:	fbb2 f3f3 	udiv	r3, r2, r3
 8004ede:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004ee0:	69bb      	ldr	r3, [r7, #24]
 8004ee2:	2b0f      	cmp	r3, #15
 8004ee4:	d909      	bls.n	8004efa <UART_SetConfig+0x546>
 8004ee6:	69bb      	ldr	r3, [r7, #24]
 8004ee8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004eec:	d205      	bcs.n	8004efa <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8004eee:	69bb      	ldr	r3, [r7, #24]
 8004ef0:	b29a      	uxth	r2, r3
 8004ef2:	68fb      	ldr	r3, [r7, #12]
 8004ef4:	681b      	ldr	r3, [r3, #0]
 8004ef6:	60da      	str	r2, [r3, #12]
 8004ef8:	e002      	b.n	8004f00 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8004efa:	2301      	movs	r3, #1
 8004efc:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004f00:	68fb      	ldr	r3, [r7, #12]
 8004f02:	2200      	movs	r2, #0
 8004f04:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8004f06:	68fb      	ldr	r3, [r7, #12]
 8004f08:	2200      	movs	r2, #0
 8004f0a:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8004f0c:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 8004f10:	4618      	mov	r0, r3
 8004f12:	3728      	adds	r7, #40	; 0x28
 8004f14:	46bd      	mov	sp, r7
 8004f16:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004f1a:	bf00      	nop
 8004f1c:	40008000 	.word	0x40008000
 8004f20:	00f42400 	.word	0x00f42400

08004f24 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004f24:	b480      	push	{r7}
 8004f26:	b083      	sub	sp, #12
 8004f28:	af00      	add	r7, sp, #0
 8004f2a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f30:	f003 0301 	and.w	r3, r3, #1
 8004f34:	2b00      	cmp	r3, #0
 8004f36:	d00a      	beq.n	8004f4e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	681b      	ldr	r3, [r3, #0]
 8004f3c:	685b      	ldr	r3, [r3, #4]
 8004f3e:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	681b      	ldr	r3, [r3, #0]
 8004f4a:	430a      	orrs	r2, r1
 8004f4c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f52:	f003 0302 	and.w	r3, r3, #2
 8004f56:	2b00      	cmp	r3, #0
 8004f58:	d00a      	beq.n	8004f70 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	681b      	ldr	r3, [r3, #0]
 8004f5e:	685b      	ldr	r3, [r3, #4]
 8004f60:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	681b      	ldr	r3, [r3, #0]
 8004f6c:	430a      	orrs	r2, r1
 8004f6e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f74:	f003 0304 	and.w	r3, r3, #4
 8004f78:	2b00      	cmp	r3, #0
 8004f7a:	d00a      	beq.n	8004f92 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	681b      	ldr	r3, [r3, #0]
 8004f80:	685b      	ldr	r3, [r3, #4]
 8004f82:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	681b      	ldr	r3, [r3, #0]
 8004f8e:	430a      	orrs	r2, r1
 8004f90:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f96:	f003 0308 	and.w	r3, r3, #8
 8004f9a:	2b00      	cmp	r3, #0
 8004f9c:	d00a      	beq.n	8004fb4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	681b      	ldr	r3, [r3, #0]
 8004fa2:	685b      	ldr	r3, [r3, #4]
 8004fa4:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	681b      	ldr	r3, [r3, #0]
 8004fb0:	430a      	orrs	r2, r1
 8004fb2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004fb8:	f003 0310 	and.w	r3, r3, #16
 8004fbc:	2b00      	cmp	r3, #0
 8004fbe:	d00a      	beq.n	8004fd6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	681b      	ldr	r3, [r3, #0]
 8004fc4:	689b      	ldr	r3, [r3, #8]
 8004fc6:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	681b      	ldr	r3, [r3, #0]
 8004fd2:	430a      	orrs	r2, r1
 8004fd4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004fda:	f003 0320 	and.w	r3, r3, #32
 8004fde:	2b00      	cmp	r3, #0
 8004fe0:	d00a      	beq.n	8004ff8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	681b      	ldr	r3, [r3, #0]
 8004fe6:	689b      	ldr	r3, [r3, #8]
 8004fe8:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	681b      	ldr	r3, [r3, #0]
 8004ff4:	430a      	orrs	r2, r1
 8004ff6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ffc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005000:	2b00      	cmp	r3, #0
 8005002:	d01a      	beq.n	800503a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	681b      	ldr	r3, [r3, #0]
 8005008:	685b      	ldr	r3, [r3, #4]
 800500a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	681b      	ldr	r3, [r3, #0]
 8005016:	430a      	orrs	r2, r1
 8005018:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800501e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005022:	d10a      	bne.n	800503a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	681b      	ldr	r3, [r3, #0]
 8005028:	685b      	ldr	r3, [r3, #4]
 800502a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	681b      	ldr	r3, [r3, #0]
 8005036:	430a      	orrs	r2, r1
 8005038:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800503e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005042:	2b00      	cmp	r3, #0
 8005044:	d00a      	beq.n	800505c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	681b      	ldr	r3, [r3, #0]
 800504a:	685b      	ldr	r3, [r3, #4]
 800504c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	681b      	ldr	r3, [r3, #0]
 8005058:	430a      	orrs	r2, r1
 800505a:	605a      	str	r2, [r3, #4]
  }
}
 800505c:	bf00      	nop
 800505e:	370c      	adds	r7, #12
 8005060:	46bd      	mov	sp, r7
 8005062:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005066:	4770      	bx	lr

08005068 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005068:	b580      	push	{r7, lr}
 800506a:	b086      	sub	sp, #24
 800506c:	af02      	add	r7, sp, #8
 800506e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	2200      	movs	r2, #0
 8005074:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8005078:	f7fd f8aa 	bl	80021d0 <HAL_GetTick>
 800507c:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	681b      	ldr	r3, [r3, #0]
 8005082:	681b      	ldr	r3, [r3, #0]
 8005084:	f003 0308 	and.w	r3, r3, #8
 8005088:	2b08      	cmp	r3, #8
 800508a:	d10e      	bne.n	80050aa <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800508c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005090:	9300      	str	r3, [sp, #0]
 8005092:	68fb      	ldr	r3, [r7, #12]
 8005094:	2200      	movs	r2, #0
 8005096:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800509a:	6878      	ldr	r0, [r7, #4]
 800509c:	f000 f82d 	bl	80050fa <UART_WaitOnFlagUntilTimeout>
 80050a0:	4603      	mov	r3, r0
 80050a2:	2b00      	cmp	r3, #0
 80050a4:	d001      	beq.n	80050aa <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80050a6:	2303      	movs	r3, #3
 80050a8:	e023      	b.n	80050f2 <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	681b      	ldr	r3, [r3, #0]
 80050ae:	681b      	ldr	r3, [r3, #0]
 80050b0:	f003 0304 	and.w	r3, r3, #4
 80050b4:	2b04      	cmp	r3, #4
 80050b6:	d10e      	bne.n	80050d6 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80050b8:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80050bc:	9300      	str	r3, [sp, #0]
 80050be:	68fb      	ldr	r3, [r7, #12]
 80050c0:	2200      	movs	r2, #0
 80050c2:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80050c6:	6878      	ldr	r0, [r7, #4]
 80050c8:	f000 f817 	bl	80050fa <UART_WaitOnFlagUntilTimeout>
 80050cc:	4603      	mov	r3, r0
 80050ce:	2b00      	cmp	r3, #0
 80050d0:	d001      	beq.n	80050d6 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80050d2:	2303      	movs	r3, #3
 80050d4:	e00d      	b.n	80050f2 <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	2220      	movs	r2, #32
 80050da:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	2220      	movs	r2, #32
 80050e0:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	2200      	movs	r2, #0
 80050e6:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	2200      	movs	r2, #0
 80050ec:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 80050f0:	2300      	movs	r3, #0
}
 80050f2:	4618      	mov	r0, r3
 80050f4:	3710      	adds	r7, #16
 80050f6:	46bd      	mov	sp, r7
 80050f8:	bd80      	pop	{r7, pc}

080050fa <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80050fa:	b580      	push	{r7, lr}
 80050fc:	b09c      	sub	sp, #112	; 0x70
 80050fe:	af00      	add	r7, sp, #0
 8005100:	60f8      	str	r0, [r7, #12]
 8005102:	60b9      	str	r1, [r7, #8]
 8005104:	603b      	str	r3, [r7, #0]
 8005106:	4613      	mov	r3, r2
 8005108:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800510a:	e0a5      	b.n	8005258 <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800510c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800510e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005112:	f000 80a1 	beq.w	8005258 <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005116:	f7fd f85b 	bl	80021d0 <HAL_GetTick>
 800511a:	4602      	mov	r2, r0
 800511c:	683b      	ldr	r3, [r7, #0]
 800511e:	1ad3      	subs	r3, r2, r3
 8005120:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8005122:	429a      	cmp	r2, r3
 8005124:	d302      	bcc.n	800512c <UART_WaitOnFlagUntilTimeout+0x32>
 8005126:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005128:	2b00      	cmp	r3, #0
 800512a:	d13e      	bne.n	80051aa <UART_WaitOnFlagUntilTimeout+0xb0>
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                USART_CR1_TXEIE_TXFNFIE));
#else
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800512c:	68fb      	ldr	r3, [r7, #12]
 800512e:	681b      	ldr	r3, [r3, #0]
 8005130:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005132:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005134:	e853 3f00 	ldrex	r3, [r3]
 8005138:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800513a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800513c:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8005140:	667b      	str	r3, [r7, #100]	; 0x64
 8005142:	68fb      	ldr	r3, [r7, #12]
 8005144:	681b      	ldr	r3, [r3, #0]
 8005146:	461a      	mov	r2, r3
 8005148:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800514a:	65fb      	str	r3, [r7, #92]	; 0x5c
 800514c:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800514e:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8005150:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8005152:	e841 2300 	strex	r3, r2, [r1]
 8005156:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8005158:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800515a:	2b00      	cmp	r3, #0
 800515c:	d1e6      	bne.n	800512c <UART_WaitOnFlagUntilTimeout+0x32>
#endif /* USART_CR1_FIFOEN */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800515e:	68fb      	ldr	r3, [r7, #12]
 8005160:	681b      	ldr	r3, [r3, #0]
 8005162:	3308      	adds	r3, #8
 8005164:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005166:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005168:	e853 3f00 	ldrex	r3, [r3]
 800516c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800516e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005170:	f023 0301 	bic.w	r3, r3, #1
 8005174:	663b      	str	r3, [r7, #96]	; 0x60
 8005176:	68fb      	ldr	r3, [r7, #12]
 8005178:	681b      	ldr	r3, [r3, #0]
 800517a:	3308      	adds	r3, #8
 800517c:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800517e:	64ba      	str	r2, [r7, #72]	; 0x48
 8005180:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005182:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8005184:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005186:	e841 2300 	strex	r3, r2, [r1]
 800518a:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800518c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800518e:	2b00      	cmp	r3, #0
 8005190:	d1e5      	bne.n	800515e <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8005192:	68fb      	ldr	r3, [r7, #12]
 8005194:	2220      	movs	r2, #32
 8005196:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8005198:	68fb      	ldr	r3, [r7, #12]
 800519a:	2220      	movs	r2, #32
 800519c:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 800519e:	68fb      	ldr	r3, [r7, #12]
 80051a0:	2200      	movs	r2, #0
 80051a2:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 80051a6:	2303      	movs	r3, #3
 80051a8:	e067      	b.n	800527a <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80051aa:	68fb      	ldr	r3, [r7, #12]
 80051ac:	681b      	ldr	r3, [r3, #0]
 80051ae:	681b      	ldr	r3, [r3, #0]
 80051b0:	f003 0304 	and.w	r3, r3, #4
 80051b4:	2b00      	cmp	r3, #0
 80051b6:	d04f      	beq.n	8005258 <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80051b8:	68fb      	ldr	r3, [r7, #12]
 80051ba:	681b      	ldr	r3, [r3, #0]
 80051bc:	69db      	ldr	r3, [r3, #28]
 80051be:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80051c2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80051c6:	d147      	bne.n	8005258 <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80051c8:	68fb      	ldr	r3, [r7, #12]
 80051ca:	681b      	ldr	r3, [r3, #0]
 80051cc:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80051d0:	621a      	str	r2, [r3, #32]
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                  USART_CR1_TXEIE_TXFNFIE));
#else
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80051d2:	68fb      	ldr	r3, [r7, #12]
 80051d4:	681b      	ldr	r3, [r3, #0]
 80051d6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80051d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80051da:	e853 3f00 	ldrex	r3, [r3]
 80051de:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80051e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051e2:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80051e6:	66fb      	str	r3, [r7, #108]	; 0x6c
 80051e8:	68fb      	ldr	r3, [r7, #12]
 80051ea:	681b      	ldr	r3, [r3, #0]
 80051ec:	461a      	mov	r2, r3
 80051ee:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80051f0:	637b      	str	r3, [r7, #52]	; 0x34
 80051f2:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80051f4:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80051f6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80051f8:	e841 2300 	strex	r3, r2, [r1]
 80051fc:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80051fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005200:	2b00      	cmp	r3, #0
 8005202:	d1e6      	bne.n	80051d2 <UART_WaitOnFlagUntilTimeout+0xd8>
#endif /* USART_CR1_FIFOEN */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005204:	68fb      	ldr	r3, [r7, #12]
 8005206:	681b      	ldr	r3, [r3, #0]
 8005208:	3308      	adds	r3, #8
 800520a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800520c:	697b      	ldr	r3, [r7, #20]
 800520e:	e853 3f00 	ldrex	r3, [r3]
 8005212:	613b      	str	r3, [r7, #16]
   return(result);
 8005214:	693b      	ldr	r3, [r7, #16]
 8005216:	f023 0301 	bic.w	r3, r3, #1
 800521a:	66bb      	str	r3, [r7, #104]	; 0x68
 800521c:	68fb      	ldr	r3, [r7, #12]
 800521e:	681b      	ldr	r3, [r3, #0]
 8005220:	3308      	adds	r3, #8
 8005222:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8005224:	623a      	str	r2, [r7, #32]
 8005226:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005228:	69f9      	ldr	r1, [r7, #28]
 800522a:	6a3a      	ldr	r2, [r7, #32]
 800522c:	e841 2300 	strex	r3, r2, [r1]
 8005230:	61bb      	str	r3, [r7, #24]
   return(result);
 8005232:	69bb      	ldr	r3, [r7, #24]
 8005234:	2b00      	cmp	r3, #0
 8005236:	d1e5      	bne.n	8005204 <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 8005238:	68fb      	ldr	r3, [r7, #12]
 800523a:	2220      	movs	r2, #32
 800523c:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 800523e:	68fb      	ldr	r3, [r7, #12]
 8005240:	2220      	movs	r2, #32
 8005242:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8005244:	68fb      	ldr	r3, [r7, #12]
 8005246:	2220      	movs	r2, #32
 8005248:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800524c:	68fb      	ldr	r3, [r7, #12]
 800524e:	2200      	movs	r2, #0
 8005250:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8005254:	2303      	movs	r3, #3
 8005256:	e010      	b.n	800527a <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005258:	68fb      	ldr	r3, [r7, #12]
 800525a:	681b      	ldr	r3, [r3, #0]
 800525c:	69da      	ldr	r2, [r3, #28]
 800525e:	68bb      	ldr	r3, [r7, #8]
 8005260:	4013      	ands	r3, r2
 8005262:	68ba      	ldr	r2, [r7, #8]
 8005264:	429a      	cmp	r2, r3
 8005266:	bf0c      	ite	eq
 8005268:	2301      	moveq	r3, #1
 800526a:	2300      	movne	r3, #0
 800526c:	b2db      	uxtb	r3, r3
 800526e:	461a      	mov	r2, r3
 8005270:	79fb      	ldrb	r3, [r7, #7]
 8005272:	429a      	cmp	r2, r3
 8005274:	f43f af4a 	beq.w	800510c <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005278:	2300      	movs	r3, #0
}
 800527a:	4618      	mov	r0, r3
 800527c:	3770      	adds	r7, #112	; 0x70
 800527e:	46bd      	mov	sp, r7
 8005280:	bd80      	pop	{r7, pc}
	...

08005284 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005284:	b580      	push	{r7, lr}
 8005286:	b096      	sub	sp, #88	; 0x58
 8005288:	af00      	add	r7, sp, #0
 800528a:	60f8      	str	r0, [r7, #12]
 800528c:	60b9      	str	r1, [r7, #8]
 800528e:	4613      	mov	r3, r2
 8005290:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8005292:	68fb      	ldr	r3, [r7, #12]
 8005294:	68ba      	ldr	r2, [r7, #8]
 8005296:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize = Size;
 8005298:	68fb      	ldr	r3, [r7, #12]
 800529a:	88fa      	ldrh	r2, [r7, #6]
 800529c:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80052a0:	68fb      	ldr	r3, [r7, #12]
 80052a2:	2200      	movs	r2, #0
 80052a4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80052a8:	68fb      	ldr	r3, [r7, #12]
 80052aa:	2222      	movs	r2, #34	; 0x22
 80052ac:	67da      	str	r2, [r3, #124]	; 0x7c

  if (huart->hdmarx != NULL)
 80052ae:	68fb      	ldr	r3, [r7, #12]
 80052b0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80052b2:	2b00      	cmp	r3, #0
 80052b4:	d02b      	beq.n	800530e <UART_Start_Receive_DMA+0x8a>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 80052b6:	68fb      	ldr	r3, [r7, #12]
 80052b8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80052ba:	4a42      	ldr	r2, [pc, #264]	; (80053c4 <UART_Start_Receive_DMA+0x140>)
 80052bc:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 80052be:	68fb      	ldr	r3, [r7, #12]
 80052c0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80052c2:	4a41      	ldr	r2, [pc, #260]	; (80053c8 <UART_Start_Receive_DMA+0x144>)
 80052c4:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 80052c6:	68fb      	ldr	r3, [r7, #12]
 80052c8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80052ca:	4a40      	ldr	r2, [pc, #256]	; (80053cc <UART_Start_Receive_DMA+0x148>)
 80052cc:	635a      	str	r2, [r3, #52]	; 0x34

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 80052ce:	68fb      	ldr	r3, [r7, #12]
 80052d0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80052d2:	2200      	movs	r2, #0
 80052d4:	639a      	str	r2, [r3, #56]	; 0x38

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 80052d6:	68fb      	ldr	r3, [r7, #12]
 80052d8:	6f18      	ldr	r0, [r3, #112]	; 0x70
 80052da:	68fb      	ldr	r3, [r7, #12]
 80052dc:	681b      	ldr	r3, [r3, #0]
 80052de:	3324      	adds	r3, #36	; 0x24
 80052e0:	4619      	mov	r1, r3
 80052e2:	68fb      	ldr	r3, [r7, #12]
 80052e4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80052e6:	461a      	mov	r2, r3
 80052e8:	88fb      	ldrh	r3, [r7, #6]
 80052ea:	f7fd f947 	bl	800257c <HAL_DMA_Start_IT>
 80052ee:	4603      	mov	r3, r0
 80052f0:	2b00      	cmp	r3, #0
 80052f2:	d00c      	beq.n	800530e <UART_Start_Receive_DMA+0x8a>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 80052f4:	68fb      	ldr	r3, [r7, #12]
 80052f6:	2210      	movs	r2, #16
 80052f8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      __HAL_UNLOCK(huart);
 80052fc:	68fb      	ldr	r3, [r7, #12]
 80052fe:	2200      	movs	r2, #0
 8005300:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 8005304:	68fb      	ldr	r3, [r7, #12]
 8005306:	2220      	movs	r2, #32
 8005308:	67da      	str	r2, [r3, #124]	; 0x7c

      return HAL_ERROR;
 800530a:	2301      	movs	r3, #1
 800530c:	e055      	b.n	80053ba <UART_Start_Receive_DMA+0x136>
    }
  }
  __HAL_UNLOCK(huart);
 800530e:	68fb      	ldr	r3, [r7, #12]
 8005310:	2200      	movs	r2, #0
 8005312:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 8005316:	68fb      	ldr	r3, [r7, #12]
 8005318:	691b      	ldr	r3, [r3, #16]
 800531a:	2b00      	cmp	r3, #0
 800531c:	d018      	beq.n	8005350 <UART_Start_Receive_DMA+0xcc>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800531e:	68fb      	ldr	r3, [r7, #12]
 8005320:	681b      	ldr	r3, [r3, #0]
 8005322:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005324:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005326:	e853 3f00 	ldrex	r3, [r3]
 800532a:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800532c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800532e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005332:	657b      	str	r3, [r7, #84]	; 0x54
 8005334:	68fb      	ldr	r3, [r7, #12]
 8005336:	681b      	ldr	r3, [r3, #0]
 8005338:	461a      	mov	r2, r3
 800533a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800533c:	64bb      	str	r3, [r7, #72]	; 0x48
 800533e:	647a      	str	r2, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005340:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8005342:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005344:	e841 2300 	strex	r3, r2, [r1]
 8005348:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800534a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800534c:	2b00      	cmp	r3, #0
 800534e:	d1e6      	bne.n	800531e <UART_Start_Receive_DMA+0x9a>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005350:	68fb      	ldr	r3, [r7, #12]
 8005352:	681b      	ldr	r3, [r3, #0]
 8005354:	3308      	adds	r3, #8
 8005356:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005358:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800535a:	e853 3f00 	ldrex	r3, [r3]
 800535e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005360:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005362:	f043 0301 	orr.w	r3, r3, #1
 8005366:	653b      	str	r3, [r7, #80]	; 0x50
 8005368:	68fb      	ldr	r3, [r7, #12]
 800536a:	681b      	ldr	r3, [r3, #0]
 800536c:	3308      	adds	r3, #8
 800536e:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8005370:	637a      	str	r2, [r7, #52]	; 0x34
 8005372:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005374:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8005376:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005378:	e841 2300 	strex	r3, r2, [r1]
 800537c:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800537e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005380:	2b00      	cmp	r3, #0
 8005382:	d1e5      	bne.n	8005350 <UART_Start_Receive_DMA+0xcc>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005384:	68fb      	ldr	r3, [r7, #12]
 8005386:	681b      	ldr	r3, [r3, #0]
 8005388:	3308      	adds	r3, #8
 800538a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800538c:	697b      	ldr	r3, [r7, #20]
 800538e:	e853 3f00 	ldrex	r3, [r3]
 8005392:	613b      	str	r3, [r7, #16]
   return(result);
 8005394:	693b      	ldr	r3, [r7, #16]
 8005396:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800539a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800539c:	68fb      	ldr	r3, [r7, #12]
 800539e:	681b      	ldr	r3, [r3, #0]
 80053a0:	3308      	adds	r3, #8
 80053a2:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80053a4:	623a      	str	r2, [r7, #32]
 80053a6:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80053a8:	69f9      	ldr	r1, [r7, #28]
 80053aa:	6a3a      	ldr	r2, [r7, #32]
 80053ac:	e841 2300 	strex	r3, r2, [r1]
 80053b0:	61bb      	str	r3, [r7, #24]
   return(result);
 80053b2:	69bb      	ldr	r3, [r7, #24]
 80053b4:	2b00      	cmp	r3, #0
 80053b6:	d1e5      	bne.n	8005384 <UART_Start_Receive_DMA+0x100>

  return HAL_OK;
 80053b8:	2300      	movs	r3, #0
}
 80053ba:	4618      	mov	r0, r3
 80053bc:	3758      	adds	r7, #88	; 0x58
 80053be:	46bd      	mov	sp, r7
 80053c0:	bd80      	pop	{r7, pc}
 80053c2:	bf00      	nop
 80053c4:	080054e3 	.word	0x080054e3
 80053c8:	08005607 	.word	0x08005607
 80053cc:	0800563f 	.word	0x0800563f

080053d0 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 80053d0:	b480      	push	{r7}
 80053d2:	b089      	sub	sp, #36	; 0x24
 80053d4:	af00      	add	r7, sp, #0
 80053d6:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
#else
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	681b      	ldr	r3, [r3, #0]
 80053dc:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80053de:	68fb      	ldr	r3, [r7, #12]
 80053e0:	e853 3f00 	ldrex	r3, [r3]
 80053e4:	60bb      	str	r3, [r7, #8]
   return(result);
 80053e6:	68bb      	ldr	r3, [r7, #8]
 80053e8:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 80053ec:	61fb      	str	r3, [r7, #28]
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	681b      	ldr	r3, [r3, #0]
 80053f2:	461a      	mov	r2, r3
 80053f4:	69fb      	ldr	r3, [r7, #28]
 80053f6:	61bb      	str	r3, [r7, #24]
 80053f8:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80053fa:	6979      	ldr	r1, [r7, #20]
 80053fc:	69ba      	ldr	r2, [r7, #24]
 80053fe:	e841 2300 	strex	r3, r2, [r1]
 8005402:	613b      	str	r3, [r7, #16]
   return(result);
 8005404:	693b      	ldr	r3, [r7, #16]
 8005406:	2b00      	cmp	r3, #0
 8005408:	d1e6      	bne.n	80053d8 <UART_EndTxTransfer+0x8>
#endif /* USART_CR1_FIFOEN */

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	2220      	movs	r2, #32
 800540e:	679a      	str	r2, [r3, #120]	; 0x78
}
 8005410:	bf00      	nop
 8005412:	3724      	adds	r7, #36	; 0x24
 8005414:	46bd      	mov	sp, r7
 8005416:	f85d 7b04 	ldr.w	r7, [sp], #4
 800541a:	4770      	bx	lr

0800541c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800541c:	b480      	push	{r7}
 800541e:	b095      	sub	sp, #84	; 0x54
 8005420:	af00      	add	r7, sp, #0
 8005422:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	681b      	ldr	r3, [r3, #0]
 8005428:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800542a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800542c:	e853 3f00 	ldrex	r3, [r3]
 8005430:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8005432:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005434:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005438:	64fb      	str	r3, [r7, #76]	; 0x4c
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	681b      	ldr	r3, [r3, #0]
 800543e:	461a      	mov	r2, r3
 8005440:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005442:	643b      	str	r3, [r7, #64]	; 0x40
 8005444:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005446:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8005448:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800544a:	e841 2300 	strex	r3, r2, [r1]
 800544e:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8005450:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005452:	2b00      	cmp	r3, #0
 8005454:	d1e6      	bne.n	8005424 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	681b      	ldr	r3, [r3, #0]
 800545a:	3308      	adds	r3, #8
 800545c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800545e:	6a3b      	ldr	r3, [r7, #32]
 8005460:	e853 3f00 	ldrex	r3, [r3]
 8005464:	61fb      	str	r3, [r7, #28]
   return(result);
 8005466:	69fb      	ldr	r3, [r7, #28]
 8005468:	f023 0301 	bic.w	r3, r3, #1
 800546c:	64bb      	str	r3, [r7, #72]	; 0x48
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	681b      	ldr	r3, [r3, #0]
 8005472:	3308      	adds	r3, #8
 8005474:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005476:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005478:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800547a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800547c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800547e:	e841 2300 	strex	r3, r2, [r1]
 8005482:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005484:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005486:	2b00      	cmp	r3, #0
 8005488:	d1e5      	bne.n	8005456 <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800548e:	2b01      	cmp	r3, #1
 8005490:	d118      	bne.n	80054c4 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	681b      	ldr	r3, [r3, #0]
 8005496:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005498:	68fb      	ldr	r3, [r7, #12]
 800549a:	e853 3f00 	ldrex	r3, [r3]
 800549e:	60bb      	str	r3, [r7, #8]
   return(result);
 80054a0:	68bb      	ldr	r3, [r7, #8]
 80054a2:	f023 0310 	bic.w	r3, r3, #16
 80054a6:	647b      	str	r3, [r7, #68]	; 0x44
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	681b      	ldr	r3, [r3, #0]
 80054ac:	461a      	mov	r2, r3
 80054ae:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80054b0:	61bb      	str	r3, [r7, #24]
 80054b2:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80054b4:	6979      	ldr	r1, [r7, #20]
 80054b6:	69ba      	ldr	r2, [r7, #24]
 80054b8:	e841 2300 	strex	r3, r2, [r1]
 80054bc:	613b      	str	r3, [r7, #16]
   return(result);
 80054be:	693b      	ldr	r3, [r7, #16]
 80054c0:	2b00      	cmp	r3, #0
 80054c2:	d1e6      	bne.n	8005492 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	2220      	movs	r2, #32
 80054c8:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	2200      	movs	r2, #0
 80054ce:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	2200      	movs	r2, #0
 80054d4:	665a      	str	r2, [r3, #100]	; 0x64
}
 80054d6:	bf00      	nop
 80054d8:	3754      	adds	r7, #84	; 0x54
 80054da:	46bd      	mov	sp, r7
 80054dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054e0:	4770      	bx	lr

080054e2 <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 80054e2:	b580      	push	{r7, lr}
 80054e4:	b09c      	sub	sp, #112	; 0x70
 80054e6:	af00      	add	r7, sp, #0
 80054e8:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80054ee:	66fb      	str	r3, [r7, #108]	; 0x6c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	681b      	ldr	r3, [r3, #0]
 80054f4:	681b      	ldr	r3, [r3, #0]
 80054f6:	f003 0320 	and.w	r3, r3, #32
 80054fa:	2b00      	cmp	r3, #0
 80054fc:	d170      	bne.n	80055e0 <UART_DMAReceiveCplt+0xfe>
  {
    huart->RxXferCount = 0U;
 80054fe:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005500:	2200      	movs	r2, #0
 8005502:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005506:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005508:	681b      	ldr	r3, [r3, #0]
 800550a:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800550c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800550e:	e853 3f00 	ldrex	r3, [r3]
 8005512:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8005514:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005516:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800551a:	66bb      	str	r3, [r7, #104]	; 0x68
 800551c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800551e:	681b      	ldr	r3, [r3, #0]
 8005520:	461a      	mov	r2, r3
 8005522:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8005524:	65bb      	str	r3, [r7, #88]	; 0x58
 8005526:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005528:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800552a:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800552c:	e841 2300 	strex	r3, r2, [r1]
 8005530:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8005532:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005534:	2b00      	cmp	r3, #0
 8005536:	d1e6      	bne.n	8005506 <UART_DMAReceiveCplt+0x24>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005538:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800553a:	681b      	ldr	r3, [r3, #0]
 800553c:	3308      	adds	r3, #8
 800553e:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005540:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005542:	e853 3f00 	ldrex	r3, [r3]
 8005546:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8005548:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800554a:	f023 0301 	bic.w	r3, r3, #1
 800554e:	667b      	str	r3, [r7, #100]	; 0x64
 8005550:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005552:	681b      	ldr	r3, [r3, #0]
 8005554:	3308      	adds	r3, #8
 8005556:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8005558:	647a      	str	r2, [r7, #68]	; 0x44
 800555a:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800555c:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800555e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005560:	e841 2300 	strex	r3, r2, [r1]
 8005564:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8005566:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005568:	2b00      	cmp	r3, #0
 800556a:	d1e5      	bne.n	8005538 <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800556c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800556e:	681b      	ldr	r3, [r3, #0]
 8005570:	3308      	adds	r3, #8
 8005572:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005574:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005576:	e853 3f00 	ldrex	r3, [r3]
 800557a:	623b      	str	r3, [r7, #32]
   return(result);
 800557c:	6a3b      	ldr	r3, [r7, #32]
 800557e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005582:	663b      	str	r3, [r7, #96]	; 0x60
 8005584:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005586:	681b      	ldr	r3, [r3, #0]
 8005588:	3308      	adds	r3, #8
 800558a:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800558c:	633a      	str	r2, [r7, #48]	; 0x30
 800558e:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005590:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005592:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005594:	e841 2300 	strex	r3, r2, [r1]
 8005598:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800559a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800559c:	2b00      	cmp	r3, #0
 800559e:	d1e5      	bne.n	800556c <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80055a0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80055a2:	2220      	movs	r2, #32
 80055a4:	67da      	str	r2, [r3, #124]	; 0x7c

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80055a6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80055a8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80055aa:	2b01      	cmp	r3, #1
 80055ac:	d118      	bne.n	80055e0 <UART_DMAReceiveCplt+0xfe>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80055ae:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80055b0:	681b      	ldr	r3, [r3, #0]
 80055b2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80055b4:	693b      	ldr	r3, [r7, #16]
 80055b6:	e853 3f00 	ldrex	r3, [r3]
 80055ba:	60fb      	str	r3, [r7, #12]
   return(result);
 80055bc:	68fb      	ldr	r3, [r7, #12]
 80055be:	f023 0310 	bic.w	r3, r3, #16
 80055c2:	65fb      	str	r3, [r7, #92]	; 0x5c
 80055c4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80055c6:	681b      	ldr	r3, [r3, #0]
 80055c8:	461a      	mov	r2, r3
 80055ca:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80055cc:	61fb      	str	r3, [r7, #28]
 80055ce:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80055d0:	69b9      	ldr	r1, [r7, #24]
 80055d2:	69fa      	ldr	r2, [r7, #28]
 80055d4:	e841 2300 	strex	r3, r2, [r1]
 80055d8:	617b      	str	r3, [r7, #20]
   return(result);
 80055da:	697b      	ldr	r3, [r7, #20]
 80055dc:	2b00      	cmp	r3, #0
 80055de:	d1e6      	bne.n	80055ae <UART_DMAReceiveCplt+0xcc>
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80055e0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80055e2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80055e4:	2b01      	cmp	r3, #1
 80055e6:	d107      	bne.n	80055f8 <UART_DMAReceiveCplt+0x116>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80055e8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80055ea:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 80055ee:	4619      	mov	r1, r3
 80055f0:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 80055f2:	f7fb fc85 	bl	8000f00 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80055f6:	e002      	b.n	80055fe <UART_DMAReceiveCplt+0x11c>
    HAL_UART_RxCpltCallback(huart);
 80055f8:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 80055fa:	f7ff f9bd 	bl	8004978 <HAL_UART_RxCpltCallback>
}
 80055fe:	bf00      	nop
 8005600:	3770      	adds	r7, #112	; 0x70
 8005602:	46bd      	mov	sp, r7
 8005604:	bd80      	pop	{r7, pc}

08005606 <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8005606:	b580      	push	{r7, lr}
 8005608:	b084      	sub	sp, #16
 800560a:	af00      	add	r7, sp, #0
 800560c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005612:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005614:	68fb      	ldr	r3, [r7, #12]
 8005616:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005618:	2b01      	cmp	r3, #1
 800561a:	d109      	bne.n	8005630 <UART_DMARxHalfCplt+0x2a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 800561c:	68fb      	ldr	r3, [r7, #12]
 800561e:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8005622:	085b      	lsrs	r3, r3, #1
 8005624:	b29b      	uxth	r3, r3
 8005626:	4619      	mov	r1, r3
 8005628:	68f8      	ldr	r0, [r7, #12]
 800562a:	f7fb fc69 	bl	8000f00 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800562e:	e002      	b.n	8005636 <UART_DMARxHalfCplt+0x30>
    HAL_UART_RxHalfCpltCallback(huart);
 8005630:	68f8      	ldr	r0, [r7, #12]
 8005632:	f7ff f9ab 	bl	800498c <HAL_UART_RxHalfCpltCallback>
}
 8005636:	bf00      	nop
 8005638:	3710      	adds	r7, #16
 800563a:	46bd      	mov	sp, r7
 800563c:	bd80      	pop	{r7, pc}

0800563e <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800563e:	b580      	push	{r7, lr}
 8005640:	b086      	sub	sp, #24
 8005642:	af00      	add	r7, sp, #0
 8005644:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800564a:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 800564c:	697b      	ldr	r3, [r7, #20]
 800564e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005650:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 8005652:	697b      	ldr	r3, [r7, #20]
 8005654:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005656:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 8005658:	697b      	ldr	r3, [r7, #20]
 800565a:	681b      	ldr	r3, [r3, #0]
 800565c:	689b      	ldr	r3, [r3, #8]
 800565e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005662:	2b80      	cmp	r3, #128	; 0x80
 8005664:	d109      	bne.n	800567a <UART_DMAError+0x3c>
 8005666:	693b      	ldr	r3, [r7, #16]
 8005668:	2b21      	cmp	r3, #33	; 0x21
 800566a:	d106      	bne.n	800567a <UART_DMAError+0x3c>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 800566c:	697b      	ldr	r3, [r7, #20]
 800566e:	2200      	movs	r2, #0
 8005670:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    UART_EndTxTransfer(huart);
 8005674:	6978      	ldr	r0, [r7, #20]
 8005676:	f7ff feab 	bl	80053d0 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 800567a:	697b      	ldr	r3, [r7, #20]
 800567c:	681b      	ldr	r3, [r3, #0]
 800567e:	689b      	ldr	r3, [r3, #8]
 8005680:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005684:	2b40      	cmp	r3, #64	; 0x40
 8005686:	d109      	bne.n	800569c <UART_DMAError+0x5e>
 8005688:	68fb      	ldr	r3, [r7, #12]
 800568a:	2b22      	cmp	r3, #34	; 0x22
 800568c:	d106      	bne.n	800569c <UART_DMAError+0x5e>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 800568e:	697b      	ldr	r3, [r7, #20]
 8005690:	2200      	movs	r2, #0
 8005692:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
    UART_EndRxTransfer(huart);
 8005696:	6978      	ldr	r0, [r7, #20]
 8005698:	f7ff fec0 	bl	800541c <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800569c:	697b      	ldr	r3, [r7, #20]
 800569e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80056a2:	f043 0210 	orr.w	r2, r3, #16
 80056a6:	697b      	ldr	r3, [r7, #20]
 80056a8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80056ac:	6978      	ldr	r0, [r7, #20]
 80056ae:	f7ff f977 	bl	80049a0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80056b2:	bf00      	nop
 80056b4:	3718      	adds	r7, #24
 80056b6:	46bd      	mov	sp, r7
 80056b8:	bd80      	pop	{r7, pc}

080056ba <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80056ba:	b580      	push	{r7, lr}
 80056bc:	b084      	sub	sp, #16
 80056be:	af00      	add	r7, sp, #0
 80056c0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80056c2:	687b      	ldr	r3, [r7, #4]
 80056c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80056c6:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 80056c8:	68fb      	ldr	r3, [r7, #12]
 80056ca:	2200      	movs	r2, #0
 80056cc:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 80056d0:	68fb      	ldr	r3, [r7, #12]
 80056d2:	2200      	movs	r2, #0
 80056d4:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80056d8:	68f8      	ldr	r0, [r7, #12]
 80056da:	f7ff f961 	bl	80049a0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80056de:	bf00      	nop
 80056e0:	3710      	adds	r7, #16
 80056e2:	46bd      	mov	sp, r7
 80056e4:	bd80      	pop	{r7, pc}

080056e6 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80056e6:	b580      	push	{r7, lr}
 80056e8:	b088      	sub	sp, #32
 80056ea:	af00      	add	r7, sp, #0
 80056ec:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	681b      	ldr	r3, [r3, #0]
 80056f2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80056f4:	68fb      	ldr	r3, [r7, #12]
 80056f6:	e853 3f00 	ldrex	r3, [r3]
 80056fa:	60bb      	str	r3, [r7, #8]
   return(result);
 80056fc:	68bb      	ldr	r3, [r7, #8]
 80056fe:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005702:	61fb      	str	r3, [r7, #28]
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	681b      	ldr	r3, [r3, #0]
 8005708:	461a      	mov	r2, r3
 800570a:	69fb      	ldr	r3, [r7, #28]
 800570c:	61bb      	str	r3, [r7, #24]
 800570e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005710:	6979      	ldr	r1, [r7, #20]
 8005712:	69ba      	ldr	r2, [r7, #24]
 8005714:	e841 2300 	strex	r3, r2, [r1]
 8005718:	613b      	str	r3, [r7, #16]
   return(result);
 800571a:	693b      	ldr	r3, [r7, #16]
 800571c:	2b00      	cmp	r3, #0
 800571e:	d1e6      	bne.n	80056ee <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	2220      	movs	r2, #32
 8005724:	679a      	str	r2, [r3, #120]	; 0x78

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	2200      	movs	r2, #0
 800572a:	669a      	str	r2, [r3, #104]	; 0x68
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800572c:	6878      	ldr	r0, [r7, #4]
 800572e:	f7ff f919 	bl	8004964 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005732:	bf00      	nop
 8005734:	3720      	adds	r7, #32
 8005736:	46bd      	mov	sp, r7
 8005738:	bd80      	pop	{r7, pc}

0800573a <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800573a:	b480      	push	{r7}
 800573c:	b083      	sub	sp, #12
 800573e:	af00      	add	r7, sp, #0
 8005740:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8005742:	bf00      	nop
 8005744:	370c      	adds	r7, #12
 8005746:	46bd      	mov	sp, r7
 8005748:	f85d 7b04 	ldr.w	r7, [sp], #4
 800574c:	4770      	bx	lr

0800574e <HAL_UARTEx_ReceiveToIdle_DMA>:
  * @param pData Pointer to data buffer (uint8_t or uint16_t data elements).
  * @param Size  Amount of data elements (uint8_t or uint16_t) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_ReceiveToIdle_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800574e:	b580      	push	{r7, lr}
 8005750:	b08c      	sub	sp, #48	; 0x30
 8005752:	af00      	add	r7, sp, #0
 8005754:	60f8      	str	r0, [r7, #12]
 8005756:	60b9      	str	r1, [r7, #8]
 8005758:	4613      	mov	r3, r2
 800575a:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800575c:	68fb      	ldr	r3, [r7, #12]
 800575e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005760:	2b20      	cmp	r3, #32
 8005762:	d14a      	bne.n	80057fa <HAL_UARTEx_ReceiveToIdle_DMA+0xac>
  {
    if ((pData == NULL) || (Size == 0U))
 8005764:	68bb      	ldr	r3, [r7, #8]
 8005766:	2b00      	cmp	r3, #0
 8005768:	d002      	beq.n	8005770 <HAL_UARTEx_ReceiveToIdle_DMA+0x22>
 800576a:	88fb      	ldrh	r3, [r7, #6]
 800576c:	2b00      	cmp	r3, #0
 800576e:	d101      	bne.n	8005774 <HAL_UARTEx_ReceiveToIdle_DMA+0x26>
    {
      return HAL_ERROR;
 8005770:	2301      	movs	r3, #1
 8005772:	e043      	b.n	80057fc <HAL_UARTEx_ReceiveToIdle_DMA+0xae>
    }

    __HAL_LOCK(huart);
 8005774:	68fb      	ldr	r3, [r7, #12]
 8005776:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 800577a:	2b01      	cmp	r3, #1
 800577c:	d101      	bne.n	8005782 <HAL_UARTEx_ReceiveToIdle_DMA+0x34>
 800577e:	2302      	movs	r3, #2
 8005780:	e03c      	b.n	80057fc <HAL_UARTEx_ReceiveToIdle_DMA+0xae>
 8005782:	68fb      	ldr	r3, [r7, #12]
 8005784:	2201      	movs	r2, #1
 8005786:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Set Reception type to reception till IDLE Event*/
    huart->ReceptionType = HAL_UART_RECEPTION_TOIDLE;
 800578a:	68fb      	ldr	r3, [r7, #12]
 800578c:	2201      	movs	r2, #1
 800578e:	661a      	str	r2, [r3, #96]	; 0x60

    status =  UART_Start_Receive_DMA(huart, pData, Size);
 8005790:	88fb      	ldrh	r3, [r7, #6]
 8005792:	461a      	mov	r2, r3
 8005794:	68b9      	ldr	r1, [r7, #8]
 8005796:	68f8      	ldr	r0, [r7, #12]
 8005798:	f7ff fd74 	bl	8005284 <UART_Start_Receive_DMA>
 800579c:	4603      	mov	r3, r0
 800579e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

    /* Check Rx process has been successfully started */
    if (status == HAL_OK)
 80057a2:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80057a6:	2b00      	cmp	r3, #0
 80057a8:	d124      	bne.n	80057f4 <HAL_UARTEx_ReceiveToIdle_DMA+0xa6>
    {
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80057aa:	68fb      	ldr	r3, [r7, #12]
 80057ac:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80057ae:	2b01      	cmp	r3, #1
 80057b0:	d11d      	bne.n	80057ee <HAL_UARTEx_ReceiveToIdle_DMA+0xa0>
      {
        __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80057b2:	68fb      	ldr	r3, [r7, #12]
 80057b4:	681b      	ldr	r3, [r3, #0]
 80057b6:	2210      	movs	r2, #16
 80057b8:	621a      	str	r2, [r3, #32]
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80057ba:	68fb      	ldr	r3, [r7, #12]
 80057bc:	681b      	ldr	r3, [r3, #0]
 80057be:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80057c0:	69bb      	ldr	r3, [r7, #24]
 80057c2:	e853 3f00 	ldrex	r3, [r3]
 80057c6:	617b      	str	r3, [r7, #20]
   return(result);
 80057c8:	697b      	ldr	r3, [r7, #20]
 80057ca:	f043 0310 	orr.w	r3, r3, #16
 80057ce:	62bb      	str	r3, [r7, #40]	; 0x28
 80057d0:	68fb      	ldr	r3, [r7, #12]
 80057d2:	681b      	ldr	r3, [r3, #0]
 80057d4:	461a      	mov	r2, r3
 80057d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80057d8:	627b      	str	r3, [r7, #36]	; 0x24
 80057da:	623a      	str	r2, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80057dc:	6a39      	ldr	r1, [r7, #32]
 80057de:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80057e0:	e841 2300 	strex	r3, r2, [r1]
 80057e4:	61fb      	str	r3, [r7, #28]
   return(result);
 80057e6:	69fb      	ldr	r3, [r7, #28]
 80057e8:	2b00      	cmp	r3, #0
 80057ea:	d1e6      	bne.n	80057ba <HAL_UARTEx_ReceiveToIdle_DMA+0x6c>
 80057ec:	e002      	b.n	80057f4 <HAL_UARTEx_ReceiveToIdle_DMA+0xa6>
      {
        /* In case of errors already pending when reception is started,
           Interrupts may have already been raised and lead to reception abortion.
           (Overrun error for instance).
           In such case Reception Type has been reset to HAL_UART_RECEPTION_STANDARD. */
        status = HAL_ERROR;
 80057ee:	2301      	movs	r3, #1
 80057f0:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }

    return status;
 80057f4:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80057f8:	e000      	b.n	80057fc <HAL_UARTEx_ReceiveToIdle_DMA+0xae>
  }
  else
  {
    return HAL_BUSY;
 80057fa:	2302      	movs	r3, #2
  }
}
 80057fc:	4618      	mov	r0, r3
 80057fe:	3730      	adds	r7, #48	; 0x30
 8005800:	46bd      	mov	sp, r7
 8005802:	bd80      	pop	{r7, pc}

08005804 <__libc_init_array>:
 8005804:	b570      	push	{r4, r5, r6, lr}
 8005806:	4d0d      	ldr	r5, [pc, #52]	; (800583c <__libc_init_array+0x38>)
 8005808:	4c0d      	ldr	r4, [pc, #52]	; (8005840 <__libc_init_array+0x3c>)
 800580a:	1b64      	subs	r4, r4, r5
 800580c:	10a4      	asrs	r4, r4, #2
 800580e:	2600      	movs	r6, #0
 8005810:	42a6      	cmp	r6, r4
 8005812:	d109      	bne.n	8005828 <__libc_init_array+0x24>
 8005814:	4d0b      	ldr	r5, [pc, #44]	; (8005844 <__libc_init_array+0x40>)
 8005816:	4c0c      	ldr	r4, [pc, #48]	; (8005848 <__libc_init_array+0x44>)
 8005818:	f000 f834 	bl	8005884 <_init>
 800581c:	1b64      	subs	r4, r4, r5
 800581e:	10a4      	asrs	r4, r4, #2
 8005820:	2600      	movs	r6, #0
 8005822:	42a6      	cmp	r6, r4
 8005824:	d105      	bne.n	8005832 <__libc_init_array+0x2e>
 8005826:	bd70      	pop	{r4, r5, r6, pc}
 8005828:	f855 3b04 	ldr.w	r3, [r5], #4
 800582c:	4798      	blx	r3
 800582e:	3601      	adds	r6, #1
 8005830:	e7ee      	b.n	8005810 <__libc_init_array+0xc>
 8005832:	f855 3b04 	ldr.w	r3, [r5], #4
 8005836:	4798      	blx	r3
 8005838:	3601      	adds	r6, #1
 800583a:	e7f2      	b.n	8005822 <__libc_init_array+0x1e>
 800583c:	08005924 	.word	0x08005924
 8005840:	08005924 	.word	0x08005924
 8005844:	08005924 	.word	0x08005924
 8005848:	08005928 	.word	0x08005928

0800584c <memset>:
 800584c:	4402      	add	r2, r0
 800584e:	4603      	mov	r3, r0
 8005850:	4293      	cmp	r3, r2
 8005852:	d100      	bne.n	8005856 <memset+0xa>
 8005854:	4770      	bx	lr
 8005856:	f803 1b01 	strb.w	r1, [r3], #1
 800585a:	e7f9      	b.n	8005850 <memset+0x4>

0800585c <strncmp>:
 800585c:	b510      	push	{r4, lr}
 800585e:	b17a      	cbz	r2, 8005880 <strncmp+0x24>
 8005860:	4603      	mov	r3, r0
 8005862:	3901      	subs	r1, #1
 8005864:	1884      	adds	r4, r0, r2
 8005866:	f813 0b01 	ldrb.w	r0, [r3], #1
 800586a:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 800586e:	4290      	cmp	r0, r2
 8005870:	d101      	bne.n	8005876 <strncmp+0x1a>
 8005872:	42a3      	cmp	r3, r4
 8005874:	d101      	bne.n	800587a <strncmp+0x1e>
 8005876:	1a80      	subs	r0, r0, r2
 8005878:	bd10      	pop	{r4, pc}
 800587a:	2800      	cmp	r0, #0
 800587c:	d1f3      	bne.n	8005866 <strncmp+0xa>
 800587e:	e7fa      	b.n	8005876 <strncmp+0x1a>
 8005880:	4610      	mov	r0, r2
 8005882:	e7f9      	b.n	8005878 <strncmp+0x1c>

08005884 <_init>:
 8005884:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005886:	bf00      	nop
 8005888:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800588a:	bc08      	pop	{r3}
 800588c:	469e      	mov	lr, r3
 800588e:	4770      	bx	lr

08005890 <_fini>:
 8005890:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005892:	bf00      	nop
 8005894:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005896:	bc08      	pop	{r3}
 8005898:	469e      	mov	lr, r3
 800589a:	4770      	bx	lr
